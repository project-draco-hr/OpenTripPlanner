{
  if (edges.size() == 2) {
    Iterator<StreetEdge> it=edges.iterator();
    Edge firstEdge=it.next();
    Edge secondEdge=it.next();
    if (firstEdge instanceof PlainStreetEdge && secondEdge instanceof PlainStreetEdge) {
      return new P2<PlainStreetEdge>((PlainStreetEdge)firstEdge,(PlainStreetEdge)secondEdge);
    }
  }
  P2<Entry<TurnVertex,Set<Edge>>> ends=findEndVertices(edges);
  Entry<TurnVertex,Set<Edge>> start=ends.getFirst();
  Entry<TurnVertex,Set<Edge>> end=ends.getSecond();
  TurnVertex startVertex=start.getKey();
  TurnVertex endVertex=null;
  if (end != null) {
    endVertex=end.getKey();
  }
 else {
    return null;
  }
  StreetVertex newEnd=new IntersectionVertex(linker.graph,"replace " + endVertex.getLabel(),endVertex.getX(),endVertex.getY(),endVertex.getName());
  for (  Edge e : startVertex.getOutgoing()) {
    final Vertex toVertex=e.getToVertex();
    if (!toVertex.getCoordinate().equals(endVertex.getCoordinate())) {
      continue;
    }
    if (e instanceof TurnEdge) {
      final TurnEdge turnEdge=(TurnEdge)e;
      TinyTurnEdge newTurn=new TinyTurnEdge(newEnd,toVertex,turnEdge.getPermission());
      addEdges(newTurn);
      newTurn.setRestrictedModes(turnEdge.getRestrictedModes());
      newTurn.setTurnCost(turnEdge.turnCost);
    }
 else {
      addEdges(new FreeEdge(newEnd,toVertex));
    }
  }
  StreetVertex newStart=new IntersectionVertex(linker.graph,"replace " + startVertex.getLabel(),startVertex.getX(),startVertex.getY(),startVertex.getName());
  for (  Edge e : endVertex.getOutgoing()) {
    final Vertex toVertex=e.getToVertex();
    if (!toVertex.getCoordinate().equals(startVertex.getCoordinate())) {
      continue;
    }
    if (e instanceof TurnEdge) {
      final TurnEdge turnEdge=(TurnEdge)e;
      TinyTurnEdge newTurn=new TinyTurnEdge(newStart,toVertex,turnEdge.getPermission());
      addEdges(newTurn);
      newTurn.setRestrictedModes(turnEdge.getRestrictedModes());
      newTurn.setTurnCost(turnEdge.turnCost);
    }
 else {
      addEdges(new FreeEdge(newStart,toVertex));
    }
  }
  PlainStreetEdge forward=new PlainStreetEdge(startVertex,newEnd,startVertex.getGeometry(),startVertex.getName(),startVertex.getLength(),startVertex.getPermission(),false);
  PlainStreetEdge backward=new PlainStreetEdge(endVertex,newStart,endVertex.getGeometry(),endVertex.getName(),endVertex.getLength(),endVertex.getPermission(),true);
  forward.setWheelchairAccessible(startVertex.isWheelchairAccessible());
  backward.setWheelchairAccessible(endVertex.isWheelchairAccessible());
  forward.setElevationProfile(startVertex.getElevationProfile(),false);
  backward.setElevationProfile(endVertex.getElevationProfile(),false);
  forward.setBicycleSafetyEffectiveLength(startVertex.getBicycleSafetyEffectiveLength());
  backward.setBicycleSafetyEffectiveLength(endVertex.getBicycleSafetyEffectiveLength());
  addEdges(forward,backward);
  P2<PlainStreetEdge> replacement=new P2<PlainStreetEdge>(forward,backward);
  return replacement;
}
