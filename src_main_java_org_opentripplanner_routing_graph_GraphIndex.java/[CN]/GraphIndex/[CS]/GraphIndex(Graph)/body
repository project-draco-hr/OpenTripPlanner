{
  LOG.info("Indexing graph...");
  for (  Agency a : graph.getAgencies()) {
    agencyForId.put(a.getId(),a);
  }
  Collection<Edge> edges=graph.getEdges();
  Set<Vertex> vertices=Sets.newHashSet();
  for (  Edge edge : edges) {
    vertices.add(edge.getFromVertex());
    vertices.add(edge.getToVertex());
    if (edge instanceof TablePatternEdge) {
      TablePatternEdge patternEdge=(TablePatternEdge)edge;
      TripPattern pattern=patternEdge.getPattern();
      patternForId.put(pattern.code,pattern);
    }
  }
  for (  Vertex vertex : vertices) {
    vertexForId.put(vertex.getLabel(),vertex);
    if (vertex instanceof TransitStop) {
      TransitStop transitStop=(TransitStop)vertex;
      Stop stop=transitStop.getStop();
      stopForId.put(stop.getId(),stop);
      stopVertexForStop.put(stop,transitStop);
      stopsForParentStation.put(stop.getParentStation(),stop);
    }
  }
  for (  TransitStop stopVertex : stopVertexForStop.values()) {
    Envelope envelope=new Envelope(stopVertex.getCoordinate());
    stopSpatialIndex.insert(envelope,stopVertex);
  }
  for (  TripPattern pattern : patternForId.values()) {
    patternsForAgency.put(pattern.route.getAgency(),pattern);
    patternsForRoute.put(pattern.route,pattern);
    for (    Trip trip : pattern.getTrips()) {
      patternForTrip.put(trip,pattern);
      tripForId.put(trip.getId(),trip);
    }
    for (    Stop stop : pattern.getStops()) {
      patternsForStop.put(stop,pattern);
    }
  }
  for (  Route route : patternsForRoute.asMap().keySet()) {
    routeForId.put(route.getId(),route);
  }
  calendarService=graph.getCalendarService();
  serviceCodes=graph.serviceCodes;
  this.graph=graph;
  LOG.info("Done indexing graph.");
}
