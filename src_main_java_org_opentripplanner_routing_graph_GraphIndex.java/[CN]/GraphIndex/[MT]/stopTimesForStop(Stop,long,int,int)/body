{
  if (startTime == 0) {
    startTime=System.currentTimeMillis() / 1000;
  }
  List<StopTimesInPattern> ret=new ArrayList<>();
  TimetableSnapshot snapshot=null;
  if (graph.timetableSnapshotSource != null) {
    snapshot=graph.timetableSnapshotSource.getTimetableSnapshot();
  }
  ServiceDate[] serviceDates={new ServiceDate().previous(),new ServiceDate(),new ServiceDate().next()};
  for (  TripPattern pattern : patternsForStop.get(stop)) {
    PriorityQueue<TripTimeShort> pq=new PriorityQueue<TripTimeShort>(numberOfDepartures){
      @Override protected boolean lessThan(      TripTimeShort tripTimeShort,      TripTimeShort t1){
        return (tripTimeShort.serviceDay + tripTimeShort.realtimeDeparture) > (t1.serviceDay + t1.realtimeDeparture);
      }
    }
;
    for (    ServiceDate serviceDate : serviceDates) {
      ServiceDay sd=new ServiceDay(graph,serviceDate,calendarService,pattern.route.getAgency().getId());
      Timetable tt;
      if (snapshot != null) {
        tt=snapshot.resolve(pattern,serviceDate);
      }
 else {
        tt=pattern.scheduledTimetable;
      }
      if (!tt.temporallyViable(sd,startTime,timeRange,true))       continue;
      int secondsSinceMidnight=sd.secondsSinceMidnight(startTime);
      int sidx=0;
      for (      Stop currStop : pattern.stopPattern.stops) {
        if (currStop == stop) {
          for (          TripTimes t : tt.tripTimes) {
            if (!sd.serviceRunning(t.serviceCode))             continue;
            if (t.getDepartureTime(sidx) != -1 && t.getDepartureTime(sidx) >= secondsSinceMidnight) {
              pq.insertWithOverflow(new TripTimeShort(t,sidx,stop,sd));
            }
          }
          for (          FrequencyEntry freq : tt.frequencyEntries) {
            if (!sd.serviceRunning(freq.tripTimes.serviceCode))             continue;
            int departureTime=freq.nextDepartureTime(sidx,secondsSinceMidnight);
            if (departureTime == -1)             continue;
            int lastDeparture=freq.endTime + freq.tripTimes.getArrivalTime(sidx) - freq.tripTimes.getDepartureTime(0);
            int i=0;
            while (departureTime <= lastDeparture && i < numberOfDepartures) {
              pq.insertWithOverflow(new TripTimeShort(freq.materialize(sidx,departureTime,true),sidx,stop,sd));
              departureTime+=freq.headway;
              i++;
            }
          }
        }
        sidx++;
      }
    }
    if (pq.size() != 0) {
      StopTimesInPattern stopTimes=new StopTimesInPattern(pattern);
      while (pq.size() != 0) {
        stopTimes.times.add(0,pq.pop());
      }
      ret.add(stopTimes);
    }
  }
  return ret;
}
