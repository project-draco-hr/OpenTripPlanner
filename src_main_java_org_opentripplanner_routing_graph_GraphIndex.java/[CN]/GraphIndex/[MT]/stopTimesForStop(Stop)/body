{
  List<StopTimesInPattern> ret=Lists.newArrayList();
  RoutingRequest req=new RoutingRequest();
  req.setRoutingContext(graph,(Vertex)null,(Vertex)null);
  State state=new State(req);
  for (  TripPattern pattern : patternsForStop.get(stop)) {
    StopTimesInPattern times=new StopTimesInPattern(pattern);
    Timetable table=pattern.getScheduledTimetable();
    int sidx=0;
    for (    Stop currStop : table.getPattern().getStopPattern().stops) {
      if (currStop != stop)       continue;
      for (      ServiceDay sd : req.rctx.serviceDays) {
        TripTimes tt=table.getNextTrip(state,sd,sidx,true);
        if (tt != null) {
          times.times.add(new TripTimeShort(tt,sidx,stop));
        }
      }
      sidx++;
    }
    if (!times.times.isEmpty())     ret.add(times);
  }
  return ret;
}
