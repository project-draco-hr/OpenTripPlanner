{
  boolean walkingBike=options.isWalkingBike();
  boolean backWalkingBike=s0.isBackWalkingBike();
  TraverseMode backMode=s0.getBackMode();
  Edge backEdge=s0.getBackEdge();
  if (backEdge != null) {
    if (this.isReverseOf(backEdge) || backEdge.isReverseOf(this)) {
      return null;
    }
  }
  backWalkingBike&=TraverseMode.WALK.equals(backMode);
  walkingBike&=TraverseMode.WALK.equals(traverseMode);
  if (!canTraverse(options,traverseMode)) {
    if (traverseMode == TraverseMode.BICYCLE) {
      return doTraverse(s0,options.getBikeWalkingOptions(),TraverseMode.WALK);
    }
    return null;
  }
  double speed=calculateSpeed(options,traverseMode);
  double time=length / speed;
  double weight;
  if (options.wheelchairAccessible) {
    weight=elevationProfileSegment.getSlopeSpeedEffectiveLength() / speed;
  }
 else   if (traverseMode.equals(TraverseMode.BICYCLE)) {
    time=elevationProfileSegment.getSlopeSpeedEffectiveLength() / speed;
switch (options.optimize) {
case SAFE:
      weight=elevationProfileSegment.getBicycleSafetyEffectiveLength() / speed;
    break;
case GREENWAYS:
  weight=elevationProfileSegment.getBicycleSafetyEffectiveLength() / speed;
if (elevationProfileSegment.getBicycleSafetyEffectiveLength() / length <= GREENWAY_SAFETY_FACTOR) {
  weight*=0.66;
}
break;
case FLAT:
weight=length / speed + elevationProfileSegment.getSlopeWorkCost();
break;
case QUICK:
weight=elevationProfileSegment.getSlopeSpeedEffectiveLength() / speed;
break;
case TRIANGLE:
double quick=elevationProfileSegment.getSlopeSpeedEffectiveLength();
double safety=elevationProfileSegment.getBicycleSafetyEffectiveLength();
double slope=elevationProfileSegment.getSlopeWorkCost();
weight=quick * options.getTriangleTimeFactor() + slope * options.getTriangleSlopeFactor() + safety * options.getTriangleSafetyFactor();
weight/=speed;
break;
default :
weight=length / speed;
}
}
 else {
if (walkingBike) {
time=elevationProfileSegment.getSlopeSpeedEffectiveLength() / speed;
}
weight=time;
if (traverseMode.equals(TraverseMode.WALK)) {
double costs=ElevationUtils.getWalkCostsForSlope(length,elevationProfileSegment.getMaxSlope());
double elevationUtilsSpeed=4.0 / 3.0;
weight=costs * (elevationUtilsSpeed / speed);
time=weight;
}
}
if (isStairs()) {
weight*=options.stairsReluctance;
}
 else {
weight*=options.walkReluctance;
}
StateEditor s1=s0.edit(this);
s1.setBackMode(traverseMode);
s1.setBackWalkingBike(walkingBike);
if (wheelchairNotes != null && options.wheelchairAccessible) {
s1.addAlerts(wheelchairNotes);
}
PlainStreetEdge backPSE;
if (backEdge != null && backEdge instanceof PlainStreetEdge) {
backPSE=(PlainStreetEdge)backEdge;
RoutingRequest backOptions=backWalkingBike ? s0.getOptions().bikeWalkingOptions : s0.getOptions();
double backSpeed=backPSE.calculateSpeed(backOptions,backMode);
final double realTurnCost;
if (options.arriveBy && tov instanceof IntersectionVertex) {
if (!canTurnOnto(backPSE,s0,backMode)) {
return null;
}
IntersectionVertex traversedVertex=((IntersectionVertex)tov);
realTurnCost=backOptions.getIntersectionTraversalCostModel().computeTraversalCost(traversedVertex,this,backPSE,backMode,backOptions,(float)speed,(float)backSpeed);
}
 else if (fromv instanceof IntersectionVertex) {
if (!backPSE.canTurnOnto(this,s0,traverseMode)) {
return null;
}
IntersectionVertex traversedVertex=((IntersectionVertex)fromv);
realTurnCost=options.getIntersectionTraversalCostModel().computeTraversalCost(traversedVertex,backPSE,this,traverseMode,options,(float)backSpeed,(float)speed);
}
 else {
LOG.debug("Not computing turn cost for edge {}",this);
realTurnCost=0;
}
if (!traverseMode.isDriving()) {
s1.incrementWalkDistance(realTurnCost / 100);
}
long turnTime=(long)Math.ceil(realTurnCost);
time+=turnTime;
weight+=options.turnReluctance * realTurnCost;
}
int timeLong=(int)Math.ceil(time);
s1.incrementTimeInSeconds(timeLong);
s1.incrementWeight(weight);
if (!traverseMode.isDriving()) {
s1.incrementWalkDistance(length);
}
if (s1.weHaveWalkedTooFar(options)) {
LOG.debug("Too much walking. Bailing.");
return null;
}
s1.addAlerts(notes);
if (this.isToll() && traverseMode.isDriving()) {
s1.addAlert(Alert.createSimpleAlerts("Toll road"));
}
return s1.makeState();
}
