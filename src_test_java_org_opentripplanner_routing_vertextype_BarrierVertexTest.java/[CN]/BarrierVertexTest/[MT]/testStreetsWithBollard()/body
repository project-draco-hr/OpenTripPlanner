{
  Graph _graph=new Graph();
  BarrierVertex bv=new BarrierVertex(_graph,"start_bollard",2.0,2.0,0);
  StreetVertex endVertex=new IntersectionVertex(_graph,"end_vertex",1.0,2.0);
  StreetEdge bv_to_endVertex_forward=edge(bv,endVertex,100,false);
  assertTrue(bv_to_endVertex_forward.canTraverse(new TraverseModeSet("CAR")));
  assertTrue(bv_to_endVertex_forward.canTraverse(new TraverseModeSet("BICYCLE")));
  assertTrue(bv_to_endVertex_forward.canTraverse(new TraverseModeSet("WALK")));
  assertFalse(bv_to_endVertex_forward.canTraverseIncludingBarrier(TraverseMode.CAR));
  assertTrue(bv_to_endVertex_forward.canTraverseIncludingBarrier(TraverseMode.BICYCLE));
  assertTrue(bv_to_endVertex_forward.canTraverseIncludingBarrier(TraverseMode.WALK));
  StreetEdge endVertex_to_bv_backward=edge(endVertex,bv,100,true);
  assertTrue(endVertex_to_bv_backward.canTraverse(new TraverseModeSet("CAR")));
  assertTrue(endVertex_to_bv_backward.canTraverse(new TraverseModeSet("BICYCLE")));
  assertTrue(endVertex_to_bv_backward.canTraverse(new TraverseModeSet("WALK")));
  assertFalse(endVertex_to_bv_backward.canTraverseIncludingBarrier(TraverseMode.CAR));
  assertTrue(endVertex_to_bv_backward.canTraverseIncludingBarrier(TraverseMode.BICYCLE));
  assertTrue(endVertex_to_bv_backward.canTraverseIncludingBarrier(TraverseMode.WALK));
  StreetEdge bv_to_endVertex_backward=edge(bv,endVertex,100,true);
  assertTrue(bv_to_endVertex_backward.canTraverse(new TraverseModeSet("CAR")));
  assertTrue(bv_to_endVertex_backward.canTraverse(new TraverseModeSet("BICYCLE")));
  assertTrue(bv_to_endVertex_backward.canTraverse(new TraverseModeSet("WALK")));
  assertFalse(bv_to_endVertex_backward.canTraverseIncludingBarrier(TraverseMode.CAR));
  assertTrue(bv_to_endVertex_backward.canTraverseIncludingBarrier(TraverseMode.BICYCLE));
  assertTrue(bv_to_endVertex_backward.canTraverseIncludingBarrier(TraverseMode.WALK));
  StreetEdge endVertex_to_bv_forward=edge(endVertex,bv,100,false);
  assertTrue(endVertex_to_bv_forward.canTraverse(new TraverseModeSet("CAR")));
  assertTrue(endVertex_to_bv_forward.canTraverse(new TraverseModeSet("BICYCLE")));
  assertTrue(endVertex_to_bv_forward.canTraverse(new TraverseModeSet("WALK")));
  assertFalse(endVertex_to_bv_forward.canTraverseIncludingBarrier(TraverseMode.CAR));
  assertTrue(endVertex_to_bv_forward.canTraverseIncludingBarrier(TraverseMode.BICYCLE));
  assertTrue(endVertex_to_bv_forward.canTraverseIncludingBarrier(TraverseMode.WALK));
  BarrierVertex noBicycleBollard=new BarrierVertex(_graph,"no_bike_bollard",1.5,1,0);
  noBicycleBollard.setBarrierPermissions(StreetTraversalPermission.PEDESTRIAN);
  StreetEdge no_bike_to_endVertex=edge(noBicycleBollard,endVertex,100,false);
  assertTrue(no_bike_to_endVertex.canTraverse(new TraverseModeSet("CAR")));
  assertTrue(no_bike_to_endVertex.canTraverse(new TraverseModeSet("BICYCLE")));
  assertTrue(no_bike_to_endVertex.canTraverse(new TraverseModeSet("WALK")));
  assertFalse(no_bike_to_endVertex.canTraverseIncludingBarrier(TraverseMode.CAR));
  assertFalse(no_bike_to_endVertex.canTraverseIncludingBarrier(TraverseMode.BICYCLE));
  assertTrue(no_bike_to_endVertex.canTraverseIncludingBarrier(TraverseMode.WALK));
}
