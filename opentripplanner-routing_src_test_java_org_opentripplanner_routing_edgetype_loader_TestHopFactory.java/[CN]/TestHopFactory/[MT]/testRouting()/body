{
  Vertex stop_a=graph.getVertex("agency_A_depart");
  Vertex stop_b=graph.getVertex("agency_B_arrive");
  Vertex stop_c=graph.getVertex("agency_C_arrive");
  Vertex stop_d=graph.getVertex("agency_D_arrive");
  Vertex stop_e=graph.getVertex("agency_E_arrive");
  RoutingRequest options=new RoutingRequest();
  options.dateTime=TestUtils.dateInSeconds("America/New_York",2009,8,7,0,0,0);
  ShortestPathTree spt;
  GraphPath path;
  options.setRoutingContext(graph,stop_a,stop_b);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(stop_b,false);
  assertNotNull(path);
  assertEquals(4,path.states.size());
  options.setRoutingContext(graph,stop_a,stop_c);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(stop_c,false);
  assertNotNull(path);
  assertEquals(6,path.states.size());
  options.setRoutingContext(graph,stop_a,stop_d);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(stop_d,false);
  assertNotNull(path);
  assertTrue(path.states.size() <= 11);
  long endTime=TestUtils.dateInSeconds("America/New_York",2009,8,7,0,0,0) + 40 * 60;
  assertEquals(endTime,path.getEndTime());
  options.setRoutingContext(graph,stop_a,stop_e);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(stop_e,false);
  assertNotNull(path);
  assertTrue(path.states.size() <= 12);
  endTime=TestUtils.dateInSeconds("America/New_York",2009,8,7,0,0,0) + 70 * 60;
  assertEquals(endTime,path.getEndTime());
}
