{
  GtfsContext context=GtfsLibrary.readGtfs(new File(ConstantsForTests.FAKE_GTFS));
  options=new TraverseOptions();
  options.setGtfsContext(context);
  graph=new Graph();
  GTFSPatternHopFactory factory=new GTFSPatternHopFactory(context);
  factory.run(graph);
  TransitIndexService index=new TransitIndexService(){
    @Override public Edge getPrealightEdge(    AgencyAndId stop){
      return graph.getOutgoing("agency_A_arrive").iterator().next();
    }
    @Override public Edge getPreboardEdge(    AgencyAndId stop){
      return graph.getIncoming("agency_A_depart").iterator().next();
    }
    @Override public RouteVariant getVariantForTrip(    AgencyAndId trip){
      return null;
    }
    @Override public List<RouteVariant> getVariantsForRoute(    AgencyAndId routeId){
      Route route=new Route();
      route.setId(routeId);
      route.setShortName(routeId.getId());
      PatternBoard somePatternBoard=(PatternBoard)graph.getOutgoing("agency_A_depart").iterator().next();
      PatternHop somePatternHop=(PatternHop)graph.getOutgoing(somePatternBoard.getToVertex()).iterator().next();
      Stop stopA=somePatternHop.getStartStop();
      ArrayList<Stop> stops=new ArrayList<Stop>();
      stops.add(stopA);
      RouteVariant variant=new RouteVariant(route,stops);
      RouteSegment segment=new RouteSegment(stopA.getId());
      segment.board=somePatternBoard;
      segment.hopOut=somePatternHop;
      variant.addSegment(segment);
      ArrayList<RouteVariant> variants=new ArrayList<RouteVariant>();
      variants.add(variant);
      return variants;
    }
    @Override public List<String> getDirectionsForRoute(    AgencyAndId route){
      return null;
    }
  }
;
  graph.putService(TransitIndexService.class,index);
}
