{
  File gtfs=new File("src/test/resources/mmri/" + getFeedName() + ".zip");
  File gtfsRealTime=new File("src/test/resources/mmri/" + getFeedName() + ".pb");
  GtfsBundle gtfsBundle=new GtfsBundle(gtfs);
  List<GtfsBundle> gtfsBundleList=Collections.singletonList(gtfsBundle);
  GtfsGraphBuilderImpl gtfsGraphBuilderImpl=new GtfsGraphBuilderImpl(gtfsBundleList);
  alertsUpdateHandler=new AlertsUpdateHandler();
  graph=new Graph();
  gtfsBundle.setTransfersTxtDefinesStationPaths(true);
  gtfsGraphBuilderImpl.buildGraph(graph,null);
  graph.index(new DefaultStreetVertexIndexFactory());
  timetableSnapshotSource=new TimetableSnapshotSource(graph);
  timetableSnapshotSource.setPurgeExpiredData(false);
  graph.setTimetableSnapshotSource(timetableSnapshotSource);
  alertPatchServiceImpl=new AlertPatchServiceImpl(graph);
  alertsUpdateHandler.setAlertPatchService(alertPatchServiceImpl);
  alertsUpdateHandler.setDefaultAgencyId("MMRI");
  try {
    InputStream inputStream=new FileInputStream(gtfsRealTime);
    FeedMessage feedMessage=FeedMessage.PARSER.parseFrom(inputStream);
    List<FeedEntity> feedEntityList=feedMessage.getEntityList();
    List<TripUpdate> updates=new ArrayList<TripUpdate>(feedEntityList.size());
    for (    FeedEntity feedEntity : feedEntityList) {
      updates.add(feedEntity.getTripUpdate());
    }
    timetableSnapshotSource.applyTripUpdates(updates,"MMRI");
    alertsUpdateHandler.update(feedMessage);
  }
 catch (  Exception exception) {
  }
  genericAStar=new GenericAStar();
  longDistancePathService=new LongDistancePathService(null,genericAStar);
  planGenerator=new PlanGenerator(null,longDistancePathService);
}
