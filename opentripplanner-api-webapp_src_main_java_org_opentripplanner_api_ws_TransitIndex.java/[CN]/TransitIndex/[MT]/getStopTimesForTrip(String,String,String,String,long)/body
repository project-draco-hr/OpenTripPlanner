{
  AgencyAndId firstStop=null;
  if (stopId != null) {
    firstStop=new AgencyAndId(stopAgency,stopId);
  }
  AgencyAndId trip=new AgencyAndId(tripAgency,tripId);
  TransitIndexService transitIndexService=graphService.getGraph().getService(TransitIndexService.class);
  if (transitIndexService == null) {
    return new TransitError("No transit index found.  Add TransitIndexBuilder to your graph builder configuration and rebuild your graph.");
  }
  RouteVariant variant=transitIndexService.getVariantForTrip(trip);
  RoutingRequest options=makeTraverseOptions(time);
  StopTimeList result=new StopTimeList();
  result.stopTimes=new ArrayList<StopTime>();
  State state=null;
  RouteSegment start=null;
  for (  RouteSegment segment : variant.getSegments()) {
    if (segment.stop.equals(firstStop)) {
      State s0=new State(segment.board.getFromVertex(),options);
      state=segment.board.traverse(s0);
      if (state == null)       continue;
      if (state.getBackEdgeNarrative().getTrip().getId().equals(trip)) {
        start=segment;
        StopTime st=new StopTime();
        st.time=state.getTime();
        st.stop=segment.stop;
        result.stopTimes.add(st);
        break;
      }
    }
  }
  if (start == null) {
    return null;
  }
  for (  RouteSegment segment : variant.segmentsAfter(start)) {
    State s0=new State(segment.hopIn.getFromVertex(),state.getTime(),options);
    state=segment.hopIn.traverse(s0);
    StopTime st=new StopTime();
    st.time=state.getTime();
    st.stop=segment.stop;
    result.stopTimes.add(st);
  }
  return result;
}
