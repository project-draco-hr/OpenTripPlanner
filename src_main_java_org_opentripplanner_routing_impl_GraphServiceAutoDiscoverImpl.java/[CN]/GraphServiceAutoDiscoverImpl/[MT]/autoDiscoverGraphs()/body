{
  LOG.debug("Auto discovering graphs under {}",basePath);
  Collection<String> graphOnDisk=new HashSet<String>();
  Collection<String> graphToLoad=new HashSet<String>();
  long validEndTime=System.currentTimeMillis() - loadDelaySec * 1000;
  File baseFile=new File(basePath);
  File rootGraphFile=new File(baseFile,FileGraphSource.GRAPH_FILENAME);
  if (rootGraphFile.exists() && rootGraphFile.canRead()) {
    graphOnDisk.add("");
    long lastModified=rootGraphFile.lastModified();
    if (lastModified > lastAutoScan && lastModified <= validEndTime) {
      LOG.debug("Graph to (re)load: {}, lastModified={}",rootGraphFile,lastModified);
      graphToLoad.add("");
    }
  }
  for (  String sub : baseFile.list()) {
    File subFile=new File(baseFile,sub);
    if (subFile.isDirectory()) {
      File graphFile=new File(subFile,FileGraphSource.GRAPH_FILENAME);
      if (graphFile.exists() && graphFile.canRead()) {
        graphOnDisk.add(sub);
        long lastModified=graphFile.lastModified();
        if (lastModified > lastAutoScan && lastModified <= validEndTime) {
          LOG.debug("Graph to (re)load: {}, lastModified={}",graphFile,lastModified);
          graphToLoad.add(sub);
        }
      }
    }
  }
  lastAutoScan=validEndTime;
  StringBuffer onDiskSb=new StringBuffer();
  for (  String routerId : graphOnDisk)   onDiskSb.append("[").append(routerId).append("]");
  StringBuffer toLoadSb=new StringBuffer();
  for (  String routerId : graphToLoad)   toLoadSb.append("[").append(routerId).append("]");
  LOG.debug("Found routers: {} - Must reload: {}",onDiskSb.toString(),toLoadSb.toString());
  for (  String routerId : graphToLoad) {
    this.registerGraph(routerId,new FileGraphSource(routerId,baseFile,LoadLevel.FULL));
  }
  for (  String routerId : getRouterIds()) {
    if (!graphOnDisk.contains(routerId)) {
      LOG.warn("Auto-evicting routerId '{}', not present on disk anymore.",routerId);
      this.evictGraph(routerId);
    }
  }
  if (!getRouterIds().contains(defaultRouterId)) {
    LOG.warn("Default routerId '{}' not available!",defaultRouterId);
    if (!getRouterIds().isEmpty()) {
      String defRouterId=null;
      if (getRouterIds().contains("")) {
        defRouterId="";
        LOG.info("Setting default routerId to root graph ''");
      }
 else {
        defRouterId=getRouterIds().iterator().next();
        if (getRouterIds().size() > 1)         LOG.warn("Setting default routerId to arbitrary one '{}'",defRouterId);
 else         LOG.info("Setting default routerId to '{}'",defRouterId);
      }
      defaultRouterId=(defRouterId);
    }
  }
  if (this.getRouterIds().isEmpty()) {
    LOG.warn("No graphs have been loaded/registered. " + "You must place one or more graphs before routing.");
  }
}
