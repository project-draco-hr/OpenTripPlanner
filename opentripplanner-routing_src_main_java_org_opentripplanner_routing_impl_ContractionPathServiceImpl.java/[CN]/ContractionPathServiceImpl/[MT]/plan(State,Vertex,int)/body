{
  Date targetTime=new Date(origin.getTime() * 1000);
  TraverseOptions options=origin.getOptions();
  if (_graphService.getCalendarService() != null)   options.setCalendarService(_graphService.getCalendarService());
  options.setTransferTable(_graphService.getGraph().getTransferTable());
  options.setServiceDays(targetTime.getTime() / 1000);
  if (options.getModes().getTransit() && !_graphService.getGraph().transitFeedCovers(targetTime)) {
    throw new TransitTimesException();
  }
  options.remainingWeightHeuristic=_remainingWeightHeuristicFactory.getInstanceForSearch(options,target);
  LOG.debug("Applied A* heuristic: {}",options.remainingWeightHeuristic);
  if (!options.getModes().getTransit()) {
    nItineraries=1;
    options.setMaxWalkDistance(Double.MAX_VALUE);
  }
  ArrayList<GraphPath> paths=new ArrayList<GraphPath>();
  long computationEndTime=(long)(System.currentTimeMillis() + _maxComputationTime * 1000);
  Queue<TraverseOptions> optionQueue=new LinkedList<TraverseOptions>();
  optionQueue.add(options);
  if (options.getModes().getTrainish() && options.getModes().contains(TraverseMode.BUS)) {
    TraverseOptions busOnly=options.clone();
    busOnly.setModes(options.getModes().clone());
    busOnly.getModes().setTrainish(false);
  }
  double maxWeight=Double.MAX_VALUE;
  long maxTime=options.isArriveBy() ? 0 : Long.MAX_VALUE;
  while (paths.size() < nItineraries) {
    options=optionQueue.poll();
    if (options == null) {
      break;
    }
    StateEditor editor=new StateEditor(origin,null);
    editor.setTraverseOptions(options);
    origin=editor.makeState();
    if (_maxComputationTime > 0) {
      long remainingComputationTime=computationEndTime - System.currentTimeMillis();
      LOG.debug("remaining time for search: {} sec",remainingComputationTime / 1000.0);
      if (remainingComputationTime <= 0) {
        LOG.warn("Max computation time exceeded for origin {} target {}",origin,target);
        break;
      }
      options.maxComputationTime=remainingComputationTime;
    }
 else {
      options.maxComputationTime=0;
    }
    long searchBeginTime=System.currentTimeMillis();
    LOG.debug("BEGIN SEARCH");
    List<GraphPath> somePaths=_routingService.route(origin,target);
    LOG.debug("END SEARCH {} msec",System.currentTimeMillis() - searchBeginTime);
    if (maxWeight == Double.MAX_VALUE) {
      if (somePaths.isEmpty()) {
        return null;
      }
      GraphPath path=somePaths.get(0);
      long duration=path.getDuration();
      LOG.debug("Setting max time and weight for subsequent searches.");
      LOG.debug("First path start time:  {}",path.getStartTime());
      maxTime=path.getStartTime() + MAX_TIME_FACTOR * (options.isArriveBy() ? -duration : duration);
      LOG.debug("First path duration:  {}",duration);
      LOG.debug("Max time set to:  {}",maxTime);
      maxWeight=path.getWeight() * MAX_WEIGHT_FACTOR;
      LOG.debug("Max weight set to:  {}",maxWeight);
    }
    if (somePaths.isEmpty()) {
      LOG.debug("NO PATHS FOUND");
      continue;
    }
    for (    GraphPath path : somePaths) {
      if (!paths.contains(path)) {
        paths.add(path);
        LOG.debug("New trips: {}",path.getTrips());
        TraverseOptions newOptions=options.clone();
        for (        AgencyAndId trip : path.getTrips()) {
          newOptions.bannedTrips.add(trip);
        }
        if (!optionQueue.contains(newOptions)) {
          optionQueue.add(newOptions);
        }
      }
    }
    LOG.debug("{} / {} itineraries",paths.size(),nItineraries);
  }
  if (paths.size() == 0) {
    return null;
  }
  Collections.sort(paths,new PathComparator(origin.getOptions().isArriveBy()));
  return paths;
}
