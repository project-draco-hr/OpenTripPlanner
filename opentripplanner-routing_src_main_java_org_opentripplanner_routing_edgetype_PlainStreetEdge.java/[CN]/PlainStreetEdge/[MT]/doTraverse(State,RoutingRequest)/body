{
  TraverseMode traverseMode=s0.getNonTransitMode(options);
  if (!canTraverse(options,traverseMode)) {
    if (traverseMode == TraverseMode.BICYCLE) {
      return doTraverse(s0,options.getWalkingOptions());
    }
    return null;
  }
  double speed=options.getSpeed(s0.getNonTransitMode(options));
  double time=length / speed;
  double weight;
  if (options.wheelchairAccessible) {
    weight=elevationProfileSegment.getSlopeSpeedEffectiveLength() / speed;
  }
 else   if (s0.getNonTransitMode(options).equals(TraverseMode.BICYCLE)) {
    time=elevationProfileSegment.getSlopeSpeedEffectiveLength() / speed;
switch (options.optimize) {
case SAFE:
      weight=elevationProfileSegment.getBicycleSafetyEffectiveLength() / speed;
    break;
case GREENWAYS:
  weight=elevationProfileSegment.getBicycleSafetyEffectiveLength() / speed;
if (elevationProfileSegment.getBicycleSafetyEffectiveLength() / length <= TurnVertex.GREENWAY_SAFETY_FACTOR) {
  weight*=0.66;
}
break;
case FLAT:
weight=length / speed + elevationProfileSegment.getSlopeWorkCost();
break;
case QUICK:
weight=elevationProfileSegment.getSlopeSpeedEffectiveLength() / speed;
break;
case TRIANGLE:
double quick=elevationProfileSegment.getSlopeSpeedEffectiveLength();
double safety=elevationProfileSegment.getBicycleSafetyEffectiveLength();
double slope=elevationProfileSegment.getSlopeWorkCost();
weight=quick * options.getTriangleTimeFactor() + slope * options.getTriangleSlopeFactor() + safety * options.getTriangleSafetyFactor();
weight/=speed;
break;
default :
weight=length / speed;
}
}
 else {
weight=time;
}
if (isStairs()) {
weight*=options.stairsReluctance;
}
 else {
weight*=options.walkReluctance;
}
StateEditor s1=s0.edit(this);
s1.setBackMode(s0.getNonTransitMode(options));
if (wheelchairNotes != null && options.wheelchairAccessible) {
s1.addAlerts(wheelchairNotes);
}
switch (s0.getNoThruTrafficState()) {
case INIT:
if (isNoThruTraffic()) {
s1.setNoThruTrafficState(NoThruTrafficState.IN_INITIAL_ISLAND);
}
 else {
s1.setNoThruTrafficState(NoThruTrafficState.BETWEEN_ISLANDS);
}
break;
case IN_INITIAL_ISLAND:
if (!isNoThruTraffic()) {
s1.setNoThruTrafficState(NoThruTrafficState.BETWEEN_ISLANDS);
}
break;
case BETWEEN_ISLANDS:
if (isNoThruTraffic()) {
s1.setNoThruTrafficState(NoThruTrafficState.IN_FINAL_ISLAND);
}
break;
case IN_FINAL_ISLAND:
if (!isNoThruTraffic()) {
return null;
}
break;
}
s1.incrementWalkDistance(length);
s1.incrementTimeInSeconds((int)Math.ceil(time));
s1.incrementWeight(weight);
if (s1.weHaveWalkedTooFar(options)) return null;
s1.addAlerts(getNotes());
return s1.makeState();
}
