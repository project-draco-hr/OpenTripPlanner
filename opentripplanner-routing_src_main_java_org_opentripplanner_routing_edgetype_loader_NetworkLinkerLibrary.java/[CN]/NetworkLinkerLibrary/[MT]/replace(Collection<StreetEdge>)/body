{
  P2<Entry<StreetVertex,Set<Edge>>> ends=findEndVertices(edges);
  Entry<StreetVertex,Set<Edge>> start=ends.getFirst();
  Entry<StreetVertex,Set<Edge>> end=ends.getSecond();
  StreetVertex startVertex=start.getKey();
  StreetVertex endVertex=null;
  if (end != null) {
    endVertex=end.getKey();
  }
 else {
    return null;
  }
  Vertex newStart=new GenericVertex("replace " + startVertex.getLabel(),startVertex.getX(),startVertex.getY());
  newStart=graph.addVertex(newStart);
  graph.addEdge(new FreeEdge(startVertex,newStart));
  List<Vertex> startVertices=index.getIntersectionAt(startVertex.getCoordinate());
  for (  Vertex v : startVertices) {
    graph.addEdge(new FreeEdge(newStart,v));
  }
  Vertex newEnd=new GenericVertex("replace " + endVertex.getLabel(),endVertex.getX(),endVertex.getY());
  newEnd=graph.addVertex(newEnd);
  graph.addEdge(new FreeEdge(endVertex,newEnd));
  List<Vertex> endVertices=index.getIntersectionAt(endVertex.getCoordinate());
  for (  Vertex v : endVertices) {
    graph.addEdge(new FreeEdge(newEnd,v));
  }
  PlainStreetEdge forward=new PlainStreetEdge(newStart,newEnd,startVertex.getGeometry(),startVertex.getName(),startVertex.getLength(),startVertex.getPermission(),false);
  PlainStreetEdge backward=new PlainStreetEdge(newEnd,newStart,endVertex.getGeometry(),endVertex.getName(),endVertex.getLength(),endVertex.getPermission(),true);
  forward.setWheelchairAccessible(startVertex.isWheelchairAccessible());
  backward.setWheelchairAccessible(startVertex.isWheelchairAccessible());
  P2<PlainStreetEdge> replacement=new P2<PlainStreetEdge>(forward,backward);
  return replacement;
}
