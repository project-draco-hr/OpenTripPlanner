{
  this.rctx=s.getContext();
  this.back=s.getOptions().isArriveBy();
  if (s.getOptions().getStartingTransitTripId() != null) {
    LOG.debug("Disable reverse-optimize for on-board depart");
    optimize=false;
  }
  State lastState;
  walkDistance=s.getWalkDistance();
  if (back) {
    lastState=optimize ? s.optimize() : s.reverse();
  }
 else {
    lastState=optimize ? s.optimize().reverse() : s;
  }
  this.states=new LinkedList<State>();
  this.edges=new LinkedList<Edge>();
  for (State cur=lastState; cur != null; cur=cur.getBackState()) {
    states.addFirst(cur);
    if (cur.getBackEdge() != null && cur.getBackState() != null) {
      edges.addFirst(cur.getBackEdge());
    }
  }
}
