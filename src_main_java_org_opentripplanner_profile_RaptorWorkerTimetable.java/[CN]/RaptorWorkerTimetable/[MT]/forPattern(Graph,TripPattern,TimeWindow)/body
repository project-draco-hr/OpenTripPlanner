{
  BitSet servicesRunning=window.servicesRunning;
  List<TripTimes> tripTimes=Lists.newArrayList();
  TT:   for (  TripTimes tt : pattern.scheduledTimetable.tripTimes) {
    if (servicesRunning.get(tt.serviceCode) && tt.getScheduledArrivalTime(0) < window.to && tt.getScheduledDepartureTime(tt.getNumStops() - 1) >= window.from) {
      tripTimes.add(tt);
    }
  }
  List<FrequencyEntry> freqs=Lists.newArrayList();
  for (  FrequencyEntry fe : pattern.scheduledTimetable.frequencyEntries) {
    if (servicesRunning.get(fe.tripTimes.serviceCode) && fe.getMinDeparture() < window.to && fe.getMaxArrival() > window.from) {
      if (fe.exactTimes) {
        LOG.warn("Exact-times frequency trips not yet supported");
        continue;
      }
      freqs.add(fe);
    }
  }
  if (tripTimes.isEmpty() && freqs.isEmpty()) {
    return null;
  }
  Collections.sort(tripTimes,new Comparator<TripTimes>(){
    @Override public int compare(    TripTimes tt1,    TripTimes tt2){
      return (tt1.getScheduledArrivalTime(0) - tt2.getScheduledArrivalTime(0));
    }
  }
);
  RaptorWorkerTimetable rwtt=new RaptorWorkerTimetable(tripTimes.size(),pattern.getStops().size() * 2);
  int t=0;
  for (  TripTimes tt : tripTimes) {
    int[] times=new int[rwtt.nStops];
    for (int s=0; s < pattern.getStops().size(); s++) {
      int arrival=tt.getScheduledArrivalTime(s);
      int departure=tt.getScheduledDepartureTime(s);
      times[s * 2]=arrival;
      times[s * 2 + 1]=departure;
    }
    rwtt.timesPerTrip[t++]=times;
  }
  rwtt.frequencyTrips=new int[freqs.size()][pattern.getStops().size() * 2];
  rwtt.endTimes=new int[freqs.size()];
  rwtt.startTimes=new int[freqs.size()];
  rwtt.headwaySecs=new int[freqs.size()];
{
    int i=0;
    for (    FrequencyEntry fe : freqs) {
      rwtt.headwaySecs[i]=fe.headway;
      rwtt.startTimes[i]=fe.startTime;
      rwtt.endTimes[i]=fe.endTime;
      int[] times=rwtt.frequencyTrips[i];
      for (int s=0; s < fe.tripTimes.getNumStops(); s++) {
        times[s * 2]=fe.tripTimes.getScheduledArrivalTime(s);
        times[s * 2 + 1]=fe.tripTimes.getScheduledDepartureTime(s);
      }
      i++;
    }
  }
  return rwtt;
}
