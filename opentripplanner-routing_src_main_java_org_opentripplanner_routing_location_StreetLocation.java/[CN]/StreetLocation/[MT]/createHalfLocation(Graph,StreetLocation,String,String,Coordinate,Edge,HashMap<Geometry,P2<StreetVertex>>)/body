{
  StreetVertex fromv=(StreetVertex)street.getFromVertex();
  StreetVertex newFrom, location;
  if (cache.containsKey(fromv.getGeometry())) {
    P2<StreetVertex> cached=cache.get(fromv.getGeometry());
    newFrom=cached.getFirst();
    location=cached.getSecond();
  }
 else {
    P2<LineString> geometries=getGeometry(fromv,nearestPoint);
    double totalGeomLength=fromv.getGeometry().getLength();
    double lengthRatioIn=geometries.getFirst().getLength() / totalGeomLength;
    double lengthIn=fromv.getLength() * lengthRatioIn;
    double lengthOut=fromv.getLength() * (1 - lengthRatioIn);
    newFrom=new StreetVertex(label + " (vertex going in)",geometries.getFirst(),name,lengthIn,false);
    newFrom.setElevationProfile(fromv.getElevationProfile(0,lengthIn));
    newFrom.setPermission(fromv.getPermission());
    location=new StreetVertex(label + "(vertex at location)",geometries.getSecond(),name,lengthOut,false);
    location.setElevationProfile(fromv.getElevationProfile(lengthIn,totalGeomLength));
    location.setPermission(fromv.getPermission());
    cache.put(fromv.getGeometry(),new P2<StreetVertex>(newFrom,location));
    FreeEdge free=new FreeEdge(fromv,newFrom);
    TurnEdge incoming=new TurnEdge(newFrom,location);
    base.extra.add(free);
    base.extra.add(incoming);
  }
  Vertex tov=street.getToVertex();
  Edge e;
  if (tov instanceof StreetVertex) {
    e=new TurnEdge(location,(StreetVertex)tov);
  }
 else {
    e=new OutEdge(location,(EndpointVertex)tov);
  }
  base.extra.add(e);
  return location;
}
