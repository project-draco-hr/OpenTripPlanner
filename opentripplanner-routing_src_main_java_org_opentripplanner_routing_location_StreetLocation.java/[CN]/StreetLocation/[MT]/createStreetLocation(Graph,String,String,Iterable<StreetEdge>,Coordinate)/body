{
  boolean wheelchairAccessible=false;
  StreetLocation location=new StreetLocation(graph,label,nearestPoint,name);
  HashMap<Geometry,P2<TurnVertex>> cache=new HashMap<Geometry,P2<TurnVertex>>();
  for (  StreetEdge street : edges) {
    Vertex fromv=street.getFromVertex();
    if (street instanceof PlainStreetEdge) {
      wheelchairAccessible|=((PlainStreetEdge)street).isWheelchairAccessible();
    }
 else {
      wheelchairAccessible|=((TurnVertex)fromv).isWheelchairAccessible();
    }
    boolean seen=cache.containsKey(street.getGeometry());
    TurnVertex edgeLocation=createHalfLocation(graph,location,label + " to " + street.getToVertex().getLabel(),name,nearestPoint,street,cache);
    if (!seen) {
      FreeEdge l1in=new FreeEdge(location,edgeLocation);
      FreeEdge l1out=new FreeEdge(edgeLocation,location);
      location.extra.add(l1in);
      location.extra.add(l1out);
      graph.addTemporaryEdge(l1in);
      graph.addTemporaryEdge(l1out);
    }
    double distance=fromv.getDistanceToNearestTransitStop();
    if (distance < location.getDistanceToNearestTransitStop()) {
      location.setDistanceToNearestTransitStop(distance);
    }
  }
  location.setWheelchairAccessible(wheelchairAccessible);
  location.setSourceEdges(edges);
  return location;
}
