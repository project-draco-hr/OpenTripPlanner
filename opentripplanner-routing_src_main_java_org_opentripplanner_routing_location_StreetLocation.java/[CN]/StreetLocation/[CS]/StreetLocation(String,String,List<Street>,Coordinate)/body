{
  super(label,nearestPoint.x,nearestPoint.y,name);
  this.streets=streets;
  for (  Street street : streets) {
    Vertex fromv=street.getFromVertex();
    Vertex tov=street.getToVertex();
    Coordinate startCoord=fromv.getCoordinate();
    Coordinate endCoord=tov.getCoordinate();
    LocationIndexedLine line=new LocationIndexedLine(street.getGeometry());
    LinearLocation l=line.indexOf(nearestPoint);
    if (location == null)     location=l;
    LineString beginning=(LineString)line.extractLine(line.getStartIndex(),l);
    LineString ending=(LineString)line.extractLine(l,line.getEndIndex());
    String streetName=street.getName();
    double weight1=DistanceLibrary.distance(nearestPoint,startCoord);
    double bicycleWeight1=weight1 * street.bicycleSafetyEffectiveLength / street.length;
    double weight2=DistanceLibrary.distance(nearestPoint,endCoord);
    double bicycleWeight2=weight2 * street.bicycleSafetyEffectiveLength / street.length;
    Street e1=new Street(fromv,this,streetName,weight1,bicycleWeight1,street.getTraversalPermission(),street.getWheelchairAccessible());
    e1.setGeometry(beginning);
    e1.setElevationProfile(street.getElevationProfile(0,weight1));
    addIncoming(e1);
    Street e2=new Street(this,tov,streetName,weight2,bicycleWeight2,street.getTraversalPermission(),street.getWheelchairAccessible());
    e2.setGeometry(ending);
    e2.setElevationProfile(street.getElevationProfile(weight1,street.length));
    addOutgoing(e2);
  }
}
