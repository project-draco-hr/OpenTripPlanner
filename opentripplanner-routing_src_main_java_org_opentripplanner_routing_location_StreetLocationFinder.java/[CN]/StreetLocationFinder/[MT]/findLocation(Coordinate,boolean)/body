{
  Envelope envelope=new Envelope(c);
  List<Vertex> nearby=new LinkedList<Vertex>();
  int i=0;
  double envelopeGrowthRate=0.0018;
  while (nearby.size() < 2 && i < 10) {
    ++i;
    envelope.expandBy(envelopeGrowthRate);
    envelopeGrowthRate*=2;
    nearby=intersections.query(envelope);
    Collections.sort(nearby,new Comparator<Vertex>(){
      public int compare(      Vertex a,      Vertex b){
        double distance=(a.distance(c) - b.distance(c));
        return (int)(Math.abs(distance) / distance);
      }
    }
);
    System.out.println("nearby: " + nearby);
    for (    Vertex a : nearby) {
      for (      Vertex b : nearby) {
        if (a == b) {
          continue;
        }
        Edge street=null;
        for (int j=0; j < a.outgoing.size(); ++j) {
          street=a.outgoing.get(j);
          if (street.tov == b) {
            break;
          }
        }
        if (street == null) {
          for (int j=0; j < a.incoming.size(); ++j) {
            street=a.incoming.get(j);
            if (street.tov == b) {
              break;
            }
          }
        }
        if (street != null) {
          LineString g=(LineString)street.payload.getGeometry();
          GeometryFactory factory=new GeometryFactory();
          if (g.distance(factory.createPoint(c)) < 0.00000001) {
            LengthIndexedLine l=new LengthIndexedLine(g);
            double location=l.indexOf(c);
            return new StreetLocation(street,location,incoming);
          }
        }
      }
    }
  }
  throw new IntersectionNotFoundException("No intersection found near " + c + " within envelope "+ envelope);
}
