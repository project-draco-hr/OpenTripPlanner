{
  Coordinate nearestPoint=new Coordinate(0.5,2.0);
  List<StreetEdge> edges=new ArrayList<StreetEdge>();
  edges.add(e2);
  StreetLocation intermediate=StreetLocation.createStreetLocation(_graph,"middle of e2","foo",edges,nearestPoint);
  RoutingRequest options=new RoutingRequest();
  options.setMode(TraverseMode.CAR);
  options.setRoutingContext(_graph,v1,v2);
  double turnDurationSecs=10.0 * 60.0;
  options.setTraversalCostModel(new DummyCostModel(turnDurationSecs));
  options.setTurnReluctance(1.0);
  State s0=new State(options);
  State s1=e1.traverse(s0);
  State s2=e2.traverse(s1);
  State s3=e3.traverse(s2);
  Edge partialE2First=intermediate.getIncoming().iterator().next();
  Edge partialE2Second=intermediate.getOutgoing().iterator().next();
  System.out.println(intermediate.getIncoming());
  System.out.println(intermediate.getOutgoing());
  State partialS0=new State(options);
  State partialS1=e1.traverse(partialS0);
  State partialS2A=partialE2First.traverse(partialS1);
  State partialS2B=partialE2Second.traverse(partialS2A);
  State partialS3=e3.traverse(partialS2B);
  assertEquals(s0.getTime(),partialS0.getTime());
  assertTrue(Math.abs(s3.getTime() - partialS3.getTime()) <= 1);
  assertTrue(Math.abs(s3.getElapsedTime() - partialS3.getElapsedTime()) <= 1);
  assertTrue(Math.abs(s3.getWeight() - partialS3.getWeight()) <= 1);
  options.setTraversalCostModel(new DummyCostModel(0.0));
  State s0NoCost=new State(options);
  State s1NoCost=e1.traverse(s0NoCost);
  State s2NoCost=e2.traverse(s1NoCost);
  State s3NoCost=e3.traverse(s2NoCost);
  State partialS0NoCost=new State(options);
  State partialS1NoCost=e1.traverse(partialS0NoCost);
  State partialS2ANoCost=partialE2First.traverse(partialS1NoCost);
  State partialS2BNoCost=partialE2Second.traverse(partialS2ANoCost);
  State partialS3NoCost=e3.traverse(partialS2BNoCost);
  assertTrue(Math.abs(s3NoCost.getTime() - partialS3NoCost.getTime()) <= 1);
  assertTrue(Math.abs(s3NoCost.getElapsedTime() - partialS3NoCost.getElapsedTime()) <= 1);
  assertTrue(Math.abs(s3NoCost.getWeight() - partialS3NoCost.getWeight()) <= 1);
  double expectedDifference=2 * 10 * 60.0;
  double durationDiff=s3.getTime() - s3NoCost.getTime();
  double partialDurationDiff=partialS3.getTime() - partialS3NoCost.getTime();
  assertTrue(Math.abs(durationDiff - expectedDifference) <= 1);
  assertTrue(Math.abs(partialDurationDiff - expectedDifference) <= 1);
  double weightDiff=s3.getWeight() - s3NoCost.getWeight();
  double partialWeightDiff=partialS3.getWeight() - partialS3NoCost.getWeight();
  assertTrue(Math.abs(weightDiff - expectedDifference) <= 1);
  assertTrue(Math.abs(partialWeightDiff - expectedDifference) <= 1);
}
