{
  super();
  BorderLayout layout=new BorderLayout();
  setLayout(layout);
  Container pane=getContentPane();
  showGraph=new ShowGraph(this,graphObj);
  pane.add(showGraph,BorderLayout.CENTER);
  leftPanel=new JPanel();
  leftPanel.setLayout(new BorderLayout());
  pane.add(leftPanel,BorderLayout.LINE_START);
  JPanel vertexDataPanel=new JPanel();
  vertexDataPanel.setLayout(new BoxLayout(vertexDataPanel,BoxLayout.PAGE_AXIS));
  leftPanel.add(vertexDataPanel,BorderLayout.CENTER);
  JLabel nvLabel=new JLabel("Vertices");
  vertexDataPanel.add(nvLabel);
  nearbyVertices=new JList();
  nearbyVertices.setPrototypeCellValue("Bite the wax tadpole right on the nose");
  nearbyVertices.setVisibleRowCount(4);
  JScrollPane nvScrollPane=new JScrollPane(nearbyVertices);
  vertexDataPanel.add(nvScrollPane);
  JLabel ogeLabel=new JLabel("Outgoing edges");
  vertexDataPanel.add(ogeLabel);
  outgoingEdges=new JList();
  outgoingEdges.setVisibleRowCount(4);
  JScrollPane ogeScrollPane=new JScrollPane(outgoingEdges);
  vertexDataPanel.add(ogeScrollPane);
  JLabel iceLabel=new JLabel("Incoming edges");
  vertexDataPanel.add(iceLabel);
  incomingEdges=new JList();
  JScrollPane iceScrollPane=new JScrollPane(incomingEdges);
  vertexDataPanel.add(iceScrollPane);
  ListSelectionListener edgeChanged=new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      JList edgeList=(JList)e.getSource();
      Edge selected=(Edge)edgeList.getSelectedValue();
      if (selected == null) {
        departurePattern.removeAll();
        return;
      }
      TripPattern pattern=null;
      int stopIndex=0;
      if (selected instanceof PatternBoard) {
        PatternBoard boardEdge=(PatternBoard)selected;
        pattern=boardEdge.getPattern();
        stopIndex=boardEdge.getStopIndex();
      }
 else       if (selected instanceof PatternAlight) {
        PatternAlight alightEdge=(PatternAlight)selected;
        pattern=alightEdge.getPattern();
        stopIndex=alightEdge.getStopIndex();
      }
 else {
        departurePattern.removeAll();
        return;
      }
      Trip trip=pattern.exemplar;
      serviceIdLabel.setText(trip.getServiceId().toString());
      ListModel model=new TripPatternListModel(pattern,stopIndex);
      departurePattern.setModel(model);
    }
  }
;
  outgoingEdges.addListSelectionListener(edgeChanged);
  incomingEdges.addListSelectionListener(edgeChanged);
  nearbyVertices.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      outgoingEdges.removeAll();
      incomingEdges.removeAll();
      DisplayVertex selected=(DisplayVertex)nearbyVertices.getSelectedValue();
      if (selected != null) {
        Vertex nowSelected=selected.vertex;
        outgoingEdges.setModel(new EdgeListModel(nowSelected.getOutgoing()));
        incomingEdges.setModel(new EdgeListModel(nowSelected.getIncoming()));
      }
    }
  }
);
  JPanel buttonPanel=new JPanel();
  leftPanel.add(buttonPanel,BorderLayout.PAGE_END);
  JButton zoomDefaultButton=new JButton("Zoom to default");
  zoomDefaultButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showGraph.zoomToDefault();
    }
  }
);
  buttonPanel.add(zoomDefaultButton);
  rightPanel=new JPanel();
  rightPanel.setLayout(new BoxLayout(rightPanel,BoxLayout.PAGE_AXIS));
  serviceIdLabel=new JLabel("trip pattern");
  rightPanel.add(serviceIdLabel);
  pane.add(rightPanel,BorderLayout.LINE_END);
  departurePattern=new JList();
  departurePattern.setPrototypeCellValue("Bite the wax tadpole right on the nose");
  JScrollPane dpScrollPane=new JScrollPane(departurePattern);
  rightPanel.add(dpScrollPane);
  showGraph.init();
  addWindowListener(new ExitListener());
  pack();
}
