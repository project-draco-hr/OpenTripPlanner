{
  HashSet<Vertex> seenVertices=new HashSet<Vertex>();
  Collection<Vertex> allVertices=getGraph().getVertices();
  Vertex v=allVertices.iterator().next();
  System.out.println("initial vertex: " + v);
  Queue<Vertex> toExplore=new LinkedList<Vertex>();
  toExplore.add(v);
  seenVertices.add(v);
  while (!toExplore.isEmpty()) {
    Vertex src=toExplore.poll();
    for (    Edge e : filter(src.getOutgoing(),Edge.class)) {
      Vertex tov=e.getToVertex();
      if (!seenVertices.contains(tov)) {
        seenVertices.add(tov);
        toExplore.add(tov);
      }
    }
  }
  System.out.println("After investigation, visited " + seenVertices.size() + " of "+ allVertices.size());
  for (  Vertex u : allVertices) {
    if (!seenVertices.contains(u)) {
      System.out.println("unvisited vertex" + u);
      break;
    }
  }
}
