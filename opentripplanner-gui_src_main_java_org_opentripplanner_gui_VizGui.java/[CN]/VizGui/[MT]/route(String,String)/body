{
  Date when;
  try {
    when=dateFormat.parse(searchDate.getText());
  }
 catch (  ParseException e) {
    searchDate.setText("Format: " + dateFormat.toPattern());
    return;
  }
  TraverseModeSet modeSet=new TraverseModeSet();
  modeSet.setWalk(walkCheckBox.isSelected());
  modeSet.setBicycle(bikeCheckBox.isSelected());
  modeSet.setFerry(ferryCheckBox.isSelected());
  modeSet.setTrainish(trainCheckBox.isSelected());
  modeSet.setBusish(busCheckBox.isSelected());
  if (transitCheckBox.isSelected())   modeSet.setTransit(true);
  TraverseOptions options=new TraverseOptions(modeSet);
  VisualTraverseVisitor visitor=new VisualTraverseVisitor(showGraph);
  options.boardCost=Integer.parseInt(boardingPenaltyField.getText()) * 60;
  options.setOptimize(OptimizeType.QUICK);
  options.setMaxWalkDistance(Double.MAX_VALUE);
  System.out.println("--------");
  System.out.println("Path from " + from + " to "+ to+ " at "+ when);
  System.out.println("\tModes: " + modeSet);
  System.out.println("\tOptions: " + options);
  List<GraphPath> paths=pathservice.getPaths(options);
  if (paths == null) {
    System.out.println("no path");
    showGraph.highlightGraphPath(null);
    return;
  }
  GraphPath gp=paths.get(0);
  for (  State s : gp.states) {
    System.out.print(s.toString() + " <- ");
    System.out.println(s.getBackEdgeNarrative());
  }
  showGraph.highlightGraphPath(gp);
}
