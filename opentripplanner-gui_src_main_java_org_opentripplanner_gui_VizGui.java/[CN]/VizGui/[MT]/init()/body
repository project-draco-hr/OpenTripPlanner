{
  BorderLayout layout=new BorderLayout();
  setLayout(layout);
  Container pane=getContentPane();
  showGraph=new ShowGraph(this,getGraph());
  pane.add(showGraph,BorderLayout.CENTER);
  sptService.setTraverseVisitor(new VisualTraverseVisitor(showGraph));
  leftPanel=new JPanel();
  leftPanel.setLayout(new BorderLayout());
  pane.add(leftPanel,BorderLayout.LINE_START);
  JPanel routingPanel=new JPanel();
  routingPanel.setLayout(new GridLayout(0,2));
  leftPanel.add(routingPanel,BorderLayout.NORTH);
  JButton setSourceVertexButton=new JButton("set source");
  setSourceVertexButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Object selected=nearbyVertices.getSelectedValue();
      if (selected != null) {
        sourceVertex.setText(selected.toString());
      }
    }
  }
);
  routingPanel.add(setSourceVertexButton);
  sourceVertex=new JTextField();
  routingPanel.add(sourceVertex);
  JButton setSinkVertexButton=new JButton("set sink");
  setSinkVertexButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Object selected=nearbyVertices.getSelectedValue();
      if (selected != null) {
        sinkVertex.setText(selected.toString());
      }
    }
  }
);
  routingPanel.add(setSinkVertexButton);
  sinkVertex=new JTextField();
  routingPanel.add(sinkVertex);
  JButton resetSearchDateButton=new JButton("now ->");
  resetSearchDateButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      searchDate.setText(dateFormat.format(new Date()));
    }
  }
);
  routingPanel.add(resetSearchDateButton);
  searchDate=new JTextField();
  searchDate.setText(dateFormat.format(new Date()));
  routingPanel.add(searchDate);
  walkCheckBox=new JCheckBox("walk");
  routingPanel.add(walkCheckBox);
  bikeCheckBox=new JCheckBox("bike");
  routingPanel.add(bikeCheckBox);
  trainCheckBox=new JCheckBox("trainish");
  routingPanel.add(trainCheckBox);
  busCheckBox=new JCheckBox("busish");
  routingPanel.add(busCheckBox);
  ferryCheckBox=new JCheckBox("ferry");
  routingPanel.add(ferryCheckBox);
  transitCheckBox=new JCheckBox("transit");
  routingPanel.add(transitCheckBox);
  JLabel boardPenaltyLabel=new JLabel("Boarding penalty (min):");
  routingPanel.add(boardPenaltyLabel);
  boardingPenaltyField=new JTextField("5");
  routingPanel.add(boardingPenaltyField);
  JButton routeButton=new JButton("path search");
  routeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String from=sourceVertex.getText();
      String to=sinkVertex.getText();
      route(from,to);
    }
  }
);
  routingPanel.add(routeButton);
  JButton clearRouteButton=new JButton("clear path");
  clearRouteButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showGraph.highlightGraphPath(null);
      showGraph.clearHighlights();
    }
  }
);
  routingPanel.add(clearRouteButton);
  JPanel vertexDataPanel=new JPanel();
  vertexDataPanel.setLayout(new BoxLayout(vertexDataPanel,BoxLayout.PAGE_AXIS));
  vertexDataPanel.setPreferredSize(new Dimension(300,600));
  leftPanel.add(vertexDataPanel,BorderLayout.CENTER);
  JLabel nvLabel=new JLabel("Vertices");
  vertexDataPanel.add(nvLabel);
  nearbyVertices=new JList();
  nearbyVertices.setVisibleRowCount(4);
  JScrollPane nvScrollPane=new JScrollPane(nearbyVertices);
  vertexDataPanel.add(nvScrollPane);
  JLabel ogeLabel=new JLabel("Outgoing edges");
  vertexDataPanel.add(ogeLabel);
  outgoingEdges=new JList();
  outgoingEdges.setVisibleRowCount(4);
  JScrollPane ogeScrollPane=new JScrollPane(outgoingEdges);
  vertexDataPanel.add(ogeScrollPane);
  JLabel iceLabel=new JLabel("Incoming edges");
  vertexDataPanel.add(iceLabel);
  incomingEdges=new JList();
  JScrollPane iceScrollPane=new JScrollPane(incomingEdges);
  vertexDataPanel.add(iceScrollPane);
  ListSelectionListener edgeChanged=new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      JList edgeList=(JList)e.getSource();
      Edge selected=(Edge)edgeList.getSelectedValue();
      if (selected == null) {
        departurePattern.removeAll();
        return;
      }
      showGraph.highlightEdge(selected);
      if (selected instanceof StreetEdge) {
        List<Vertex> vertices=new ArrayList<Vertex>();
        List<Edge> edges=new ArrayList<Edge>();
        Vertex tov=selected.getToVertex();
        for (        Edge og : tov.getOutgoing()) {
          if (og instanceof StreetEdge) {
            edges.add(og);
            vertices.add(og.getToVertex());
            break;
          }
        }
        Vertex fromv=selected.getFromVertex();
        for (        Edge ic : fromv.getIncoming()) {
          if (ic instanceof StreetEdge) {
            edges.add(ic);
            vertices.add(ic.getFromVertex());
            break;
          }
        }
        showGraph.setHighlightedEdges(edges);
      }
      VertexList nearbyModel=(VertexList)nearbyVertices.getModel();
      List<Vertex> vertices=nearbyModel.selected;
      Vertex v;
      if (edgeList == outgoingEdges) {
        v=selected.getToVertex();
      }
 else {
        v=selected.getFromVertex();
      }
      if (!vertices.contains(v)) {
        vertices.add(v);
        nearbyModel=new VertexList(vertices);
        nearbyVertices.setModel(nearbyModel);
      }
      metadataModel.clear();
      Class<?> c;
      Field[] fields;
      getMetadata(selected);
      Vertex fromv=selected.getFromVertex();
      getMetadata(fromv);
      if (selected instanceof EdgeWithElevation) {
        getMetadata(((EdgeWithElevation)selected).getElevationProfileSegment());
      }
      metadataList.revalidate();
      TableTripPattern pattern=null;
      int stopIndex=0;
      if (selected instanceof TransitBoardAlight && ((TransitBoardAlight)selected).isBoarding()) {
        TransitBoardAlight boardEdge=(TransitBoardAlight)selected;
        pattern=boardEdge.getPattern();
        stopIndex=boardEdge.getStopIndex();
      }
 else       if (selected instanceof TransitBoardAlight && !((TransitBoardAlight)selected).isBoarding()) {
        TransitBoardAlight alightEdge=(TransitBoardAlight)selected;
        pattern=alightEdge.getPattern();
        stopIndex=alightEdge.getStopIndex();
      }
 else {
        departurePattern.removeAll();
        return;
      }
      ListModel model=new TripPatternListModel(pattern,stopIndex);
      departurePattern.setModel(model);
      Trip trip=pattern.getExemplar();
      serviceIdLabel.setText(trip.getServiceId().toString());
    }
    private void getMetadata(    Object selected){
      Class<?> c=selected.getClass();
      Field[] fields;
      while (c != null && c != Object.class) {
        metadataModel.addElement("Class:" + c);
        fields=c.getDeclaredFields();
        for (int i=0; i < fields.length; i++) {
          Field field=fields[i];
          int modifiers=field.getModifiers();
          if ((modifiers & Modifier.STATIC) != 0) {
            continue;
          }
          field.setAccessible(true);
          String name=field.getName();
          String value="(unknown -- see console for stack trace)";
          try {
            value="" + field.get(selected);
          }
 catch (          IllegalArgumentException e1) {
            e1.printStackTrace();
          }
catch (          IllegalAccessException e1) {
            e1.printStackTrace();
          }
          metadataModel.addElement(name + ": " + value);
        }
        c=c.getSuperclass();
      }
    }
  }
;
  outgoingEdges.addListSelectionListener(edgeChanged);
  incomingEdges.addListSelectionListener(edgeChanged);
  nearbyVertices.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      outgoingEdges.removeAll();
      incomingEdges.removeAll();
      DisplayVertex selected=(DisplayVertex)nearbyVertices.getSelectedValue();
      if (selected != null) {
        Vertex nowSelected=selected.vertex;
        showGraph.highlightVertex(nowSelected);
        outgoingEdges.setModel(new EdgeListModel(nowSelected.getOutgoing()));
        incomingEdges.setModel(new EdgeListModel(nowSelected.getIncoming()));
      }
    }
  }
);
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new GridLayout(0,3));
  leftPanel.add(buttonPanel,BorderLayout.PAGE_END);
  JButton zoomDefaultButton=new JButton("Zoom to default");
  zoomDefaultButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showGraph.zoomToDefault();
    }
  }
);
  buttonPanel.add(zoomDefaultButton);
  final JFrame frame=this;
  JButton zoomToNodeButton=new JButton("Zoom to node");
  zoomToNodeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String nodeName=(String)JOptionPane.showInputDialog(frame,"Node id",JOptionPane.PLAIN_MESSAGE);
      Vertex v=getGraph().getVertex(nodeName);
      if (v == null) {
        System.out.println("no such node " + nodeName);
      }
 else {
        showGraph.zoomToVertex(v);
      }
    }
  }
);
  buttonPanel.add(zoomToNodeButton);
  JButton zoomToLocationButton=new JButton("Zoom to location");
  zoomToLocationButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String result=JOptionPane.showInputDialog("Enter the location (lat lon)");
      if (result == null || result.length() == 0)       return;
      String[] tokens=result.split("[\\s,]+");
      double lat=Double.parseDouble(tokens[0]);
      double lon=Double.parseDouble(tokens[1]);
      Coordinate c=new Coordinate(lon,lat);
      showGraph.zoomToLocation(c);
    }
  }
);
  buttonPanel.add(zoomToLocationButton);
  JButton zoomOutButton=new JButton("Zoom out");
  zoomOutButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showGraph.zoomOut();
    }
  }
);
  buttonPanel.add(zoomOutButton);
  JButton routeButton2=new JButton("Route");
  routeButton2.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String from=sourceVertex.getText();
      String to=sinkVertex.getText();
      route(from,to);
    }
  }
);
  buttonPanel.add(routeButton2);
  JButton findButton=new JButton("Find node");
  findButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String nodeName=(String)JOptionPane.showInputDialog(frame,"Node id",JOptionPane.PLAIN_MESSAGE);
      Vertex v=getGraph().getVertex(nodeName);
      if (v == null) {
        System.out.println("no such node " + nodeName);
      }
 else {
        showGraph.highlightVertex(v);
        ArrayList<Vertex> l=new ArrayList<Vertex>();
        l.add(v);
        verticesSelected(l);
      }
    }
  }
);
  buttonPanel.add(findButton);
  JButton findEdgeButton=new JButton("Find edge");
  findEdgeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String edgeName=(String)JOptionPane.showInputDialog(frame,"Edge name like",JOptionPane.PLAIN_MESSAGE);
      for (      Vertex gv : getGraph().getVertices()) {
        for (        Edge edge : gv.getOutgoing()) {
          if (edge.getName() != null && edge.getName().contains(edgeName)) {
            showGraph.highlightVertex(gv);
            ArrayList<Vertex> l=new ArrayList<Vertex>();
            l.add(gv);
            verticesSelected(l);
          }
        }
      }
    }
  }
);
  buttonPanel.add(findEdgeButton);
  JButton checkButton=new JButton("Check graph");
  checkButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      checkGraph();
    }
  }
);
  buttonPanel.add(checkButton);
  JButton traceButton=new JButton("Trace");
  traceButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      trace();
    }
  }
);
  buttonPanel.add(traceButton);
  JButton annotationButton=new JButton("Find annotations");
  annotationButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      findAnnotation();
    }
  }
);
  buttonPanel.add(annotationButton);
  JPanel rightPanel=new JPanel();
  rightPanel.setLayout(new BorderLayout());
  pane.add(rightPanel,BorderLayout.LINE_END);
  JTabbedPane rightPanelTabs=new JTabbedPane();
  rightPanel.add(rightPanelTabs,BorderLayout.LINE_END);
  serviceIdLabel=new JLabel("[service id]");
  rightPanel.add(serviceIdLabel,BorderLayout.PAGE_END);
  departurePattern=new JList();
  JScrollPane dpScrollPane=new JScrollPane(departurePattern);
  rightPanelTabs.addTab("trip pattern",dpScrollPane);
  metadataList=new JList();
  metadataModel=new DefaultListModel();
  metadataList.setModel(metadataModel);
  JScrollPane mdScrollPane=new JScrollPane(metadataList);
  mdScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
  rightPanelTabs.addTab("metadata",mdScrollPane);
  annotationMatches=new JList();
  annotationMatches.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      JList theList=(JList)e.getSource();
      GraphBuilderAnnotation anno=(GraphBuilderAnnotation)theList.getSelectedValue();
      if (anno == null)       return;
      showGraph.drawAnotation(anno);
    }
  }
);
  annotationMatchesModel=new DefaultListModel();
  annotationMatches.setModel(annotationMatchesModel);
  JScrollPane amScrollPane=new JScrollPane(annotationMatches);
  amScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
  rightPanelTabs.addTab("annotations",amScrollPane);
  Dimension size=new Dimension(200,1600);
  amScrollPane.setMaximumSize(size);
  amScrollPane.setPreferredSize(size);
  mdScrollPane.setMaximumSize(size);
  mdScrollPane.setPreferredSize(size);
  rightPanelTabs.setMaximumSize(size);
  rightPanel.setMaximumSize(size);
  showGraph.init();
  addWindowListener(new ExitListener());
  pack();
}
