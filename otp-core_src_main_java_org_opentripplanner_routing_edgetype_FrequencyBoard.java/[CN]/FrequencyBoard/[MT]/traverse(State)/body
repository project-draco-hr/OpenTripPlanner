{
  RoutingContext rctx=state0.getContext();
  RoutingRequest options=state0.getOptions();
  Trip trip=pattern.getTrip();
  if (options.isArriveBy()) {
    if (state0.getBackEdge() instanceof TransitBoardAlight && !((TransitBoardAlight)state0.getBackEdge()).isBoarding()) {
      return null;
    }
    StateEditor s1=state0.edit(this);
    int type=pattern.getBoardType(stopIndex);
    if (TransitUtils.handleBoardAlightType(s1,type)) {
      return null;
    }
    s1.setTripId(null);
    s1.setLastAlightedTimeSeconds(state0.getTimeSeconds());
    s1.setBackMode(TraverseMode.LEG_SWITCH);
    s1.setPreviousStop(((TransitVertex)fromv).getStop());
    return s1.makeState();
  }
 else {
    if (!options.getModes().get(modeMask)) {
      return null;
    }
    long currentTime=state0.getTimeSeconds();
    int transferPenalty=0;
    if (state0.getNumBoardings() > 0) {
      TransferTable transferTable=options.getRoutingContext().transferTable;
      Stop currentStop=((TransitVertex)fromv).getStop();
      int transferTime=transferTable.getTransferTime(state0.getPreviousStop(),currentStop,state0.getPreviousTrip(),trip,true);
      if (transferTime > 0) {
        long tableBoardAfter=state0.getLastAlightedTimeSeconds() + transferTime;
        if (tableBoardAfter > currentTime) {
          currentTime=tableBoardAfter;
        }
      }
 else       if (transferTime == StopTransfer.FORBIDDEN_TRANSFER) {
        return null;
      }
      transferPenalty=transferTable.determineTransferPenalty(transferTime,options.nonpreferredTransferPenalty);
      if (state0.getBackEdge() instanceof TimedTransferEdge) {
        if (transferTime != StopTransfer.TIMED_TRANSFER) {
          return null;
        }
      }
    }
    int bestWait=-1;
    TraverseMode mode=state0.getNonTransitMode();
    if (options.bannedTrips.containsKey(trip.getId())) {
      return null;
    }
    for (    ServiceDay sd : rctx.serviceDays) {
      int secondsSinceMidnight=sd.secondsSinceMidnight(currentTime);
      if (secondsSinceMidnight < 0)       continue;
      if (sd.serviceIdRunning(serviceId)) {
        int startTime=pattern.getNextDepartureTime(stopIndex,secondsSinceMidnight,options.wheelchairAccessible,mode == TraverseMode.BICYCLE,true);
        if (startTime >= 0) {
          int wait=(int)(sd.time(startTime) - state0.getTimeSeconds());
          if (wait < 0)           LOG.error("negative wait time on board");
          if (bestWait < 0 || wait < bestWait) {
            bestWait=wait;
          }
        }
      }
    }
    if (bestWait < 0) {
      return null;
    }
    if (options.tripIsBanned(trip))     return null;
    long preferences_penalty=options.preferencesPenaltyForTrip(trip);
    StateEditor s1=state0.edit(this);
    int type=pattern.getBoardType(stopIndex);
    if (TransitUtils.handleBoardAlightType(s1,type)) {
      return null;
    }
    s1.incrementTimeInSeconds(bestWait);
    s1.incrementNumBoardings();
    s1.setTripId(trip.getId());
    s1.setPreviousTrip(trip);
    s1.setZone(pattern.getZone(stopIndex));
    s1.setRoute(trip.getRoute().getId());
    s1.setBackMode(TraverseMode.LEG_SWITCH);
    long wait_cost=bestWait;
    if (state0.getNumBoardings() == 0) {
      wait_cost*=options.waitAtBeginningFactor;
    }
 else {
      wait_cost*=options.waitReluctance;
    }
    s1.incrementWeight(preferences_penalty);
    s1.incrementWeight(transferPenalty);
    s1.incrementWeight(wait_cost + options.getBoardCost(mode));
    return s1.makeState();
  }
}
