{
  SLF4JBridgeHandler.removeHandlersForRootLogger();
  SLF4JBridgeHandler.install();
  LOG.info("Starting OTP Grizzly server...");
  if (args.length > 2)   port=Integer.parseInt(args[2]);
  HttpServer httpServer=new HttpServer();
  NetworkListener networkListener=new NetworkListener("sample-listener","localhost",port);
  ThreadPoolConfig threadPoolConfig=ThreadPoolConfig.defaultConfig().setCorePoolSize(1).setMaxPoolSize(Runtime.getRuntime().availableProcessors());
  networkListener.getTransport().setWorkerThreadPoolConfig(threadPoolConfig);
  httpServer.addListener(networkListener);
  ResourceConfig rc=new PackagesResourceConfig("org.opentripplanner");
  rc.getProperties().put(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,new String[]{AuthFilter.class.getName(),RewriteFilter.class.getName()});
  IoCComponentProviderFactory ioc_factory=OTPConfigurator.fromCommandLineArguments(args);
  HttpHandler handler=ContainerFactory.createContainer(HttpHandler.class,rc,ioc_factory);
  httpServer.getServerConfiguration().addHttpHandler(handler,"/opentripplanner-api-webapp/");
  final String clientPath="../opentripplanner-webapp/src/main/webapp/";
  httpServer.getServerConfiguration().addHttpHandler(new StaticHttpHandler(clientPath),"/");
  try {
    httpServer.start();
    LOG.info("Grizzly server running.");
    Thread.currentThread().join();
  }
 catch (  BindException be) {
    LOG.error("Cannot bind to port {}. Is it already in use?",port);
  }
catch (  IOException ioe) {
    LOG.error("IO exception while starting server.");
  }
catch (  InterruptedException ie) {
    httpServer.stop();
  }
}
