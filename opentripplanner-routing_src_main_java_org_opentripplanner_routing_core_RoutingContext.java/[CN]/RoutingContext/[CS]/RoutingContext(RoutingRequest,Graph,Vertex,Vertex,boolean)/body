{
  this.opt=routingRequest;
  this.graph=graph;
  if (findPlaces) {
    if (!opt.batch || opt.arriveBy) {
      toVertex=graph.streetIndex.getVertexForLocation(opt.getTo(),opt);
    }
 else {
      toVertex=null;
    }
    if (!opt.batch || !opt.arriveBy) {
      fromVertex=graph.streetIndex.getVertexForLocation(opt.getFrom(),opt,toVertex);
    }
 else {
      fromVertex=null;
    }
    if (opt.intermediatePlaces != null) {
      for (      GenericLocation intermediate : opt.intermediatePlaces) {
        Vertex vertex=graph.streetIndex.getVertexForLocation(intermediate,opt);
        intermediateVertices.add(vertex);
      }
    }
  }
 else {
    fromVertex=from;
    toVertex=to;
  }
  if (opt.getStartingTransitStopId() != null) {
    TransitIndexService tis=graph.getService(TransitIndexService.class);
    if (tis == null) {
      throw new RuntimeException("Next/Previous/First/Last trip " + "functionality depends on the transit index. Rebuild " + "the graph with TransitIndexBuilder");
    }
    AgencyAndId stopId=opt.getStartingTransitStopId();
    startingStop=tis.getPreBoardEdge(stopId).getToVertex();
  }
  origin=opt.arriveBy ? toVertex : fromVertex;
  target=opt.arriveBy ? fromVertex : toVertex;
  calendarService=graph.getCalendarService();
  transferTable=graph.getTransferTable();
  if (graph.timetableSnapshotSource != null)   timetableSnapshot=graph.timetableSnapshotSource.getSnapshot();
 else   timetableSnapshot=null;
  setServiceDays();
  if (opt.batch)   remainingWeightHeuristic=new TrivialRemainingWeightHeuristic();
 else   remainingWeightHeuristic=heuristicFactory.getInstanceForSearch(opt);
  if (this.origin != null) {
    LOG.debug("Origin vertex inbound edges {}",this.origin.getIncoming());
    LOG.debug("Origin vertex outbound edges {}",this.origin.getOutgoing());
  }
  LOG.debug("Target vertex {}",this.target);
  if (this.target != null) {
    LOG.debug("Destination vertex inbound edges {}",this.target.getIncoming());
    LOG.debug("Destination vertex outbound edges {}",this.target.getOutgoing());
  }
}
