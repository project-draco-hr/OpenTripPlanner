{
  this.opt=traverseOptions;
  this.graph=graph;
  if (from == null && to == null) {
    fromVertex=graph.streetIndex.getVertexForPlace(opt.getFromPlace(),opt);
    toVertex=graph.streetIndex.getVertexForPlace(opt.getToPlace(),opt,fromVertex);
    if (opt.intermediatePlaces != null) {
      for (      NamedPlace intermediate : opt.intermediatePlaces) {
        Vertex vertex=graph.streetIndex.getVertexForPlace(intermediate,opt);
        intermediateVertices.add(vertex);
      }
    }
  }
 else {
    fromVertex=from;
    toVertex=to;
  }
  origin=opt.arriveBy ? toVertex : fromVertex;
  target=opt.arriveBy ? fromVertex : toVertex;
  calendarService=graph.getCalendarService();
  transferTable=graph.getTransferTable();
  setServiceDays();
  if (opt.batch)   remainingWeightHeuristic=new TrivialRemainingWeightHeuristic();
 else   remainingWeightHeuristic=heuristicFactory.getInstanceForSearch(opt);
}
