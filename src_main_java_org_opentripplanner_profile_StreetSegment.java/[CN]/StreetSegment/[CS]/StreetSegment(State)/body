{
  GraphPath path=new GraphPath(state,false);
  CoordinateArrayListSequence coordinates=new CoordinateArrayListSequence();
  for (  Edge edge : path.edges) {
    LineString geometry=edge.getGeometry();
    if (geometry != null) {
      if (coordinates.size() == 0) {
        coordinates.extend(geometry.getCoordinates());
      }
 else {
        coordinates.extend(geometry.getCoordinates(),1);
      }
    }
  }
  Geometry geom=GeometryUtils.getGeometryFactory().createLineString(coordinates);
  this.geometry=PolylineEncoder.createEncodings(geom);
  Itinerary itin=GraphPathToTripPlanConverter.generateItinerary(path,false);
  for (  Leg leg : itin.legs) {
    walkSteps.addAll(leg.walkSteps);
    for (    WalkStep walkStep : leg.walkSteps) {
      boolean firstEdge=true;
      for (      Edge edge : walkStep.edges) {
        StreetEdgeInfo edgeInfo=new StreetEdgeInfo(edge);
        if (firstEdge) {
          edgeInfo.mode=walkStep.newMode;
          edgeInfo.streetName=walkStep.streetName;
          edgeInfo.absoluteDirection=walkStep.absoluteDirection;
          edgeInfo.relativeDirection=walkStep.relativeDirection;
          edgeInfo.stayOn=walkStep.stayOn;
          edgeInfo.area=walkStep.area;
          edgeInfo.bogusName=walkStep.bogusName;
          firstEdge=false;
        }
        streetEdges.add(edgeInfo);
      }
    }
  }
  time=(int)(state.getElapsedTimeSeconds());
}
