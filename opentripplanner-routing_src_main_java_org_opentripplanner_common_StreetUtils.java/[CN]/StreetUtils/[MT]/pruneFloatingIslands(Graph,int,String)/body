{
  _log.debug("pruning");
  Logger islandLog=null;
  if (islandLogName != null) {
    islandLog=LoggerFactory.getLogger(islandLogName);
    islandLog.info(String.format("%s\t%s\t%s","id","size","wkt"));
  }
  Map<Vertex,HashSet<Vertex>> subgraphs=new HashMap<Vertex,HashSet<Vertex>>();
  Map<Vertex,ArrayList<Vertex>> neighborsForVertex=new HashMap<Vertex,ArrayList<Vertex>>();
  RoutingRequest options=new RoutingRequest(new TraverseModeSet(TraverseMode.WALK,TraverseMode.TRANSIT));
  for (  Vertex gv : graph.getVertices()) {
    if (!(gv instanceof StreetVertex)) {
      continue;
    }
    State s0=new State(gv,options);
    for (    Edge e : gv.getOutgoing()) {
      Vertex in=gv;
      if (!(e instanceof StreetEdge)) {
        continue;
      }
      State s1=e.traverse(s0);
      if (s1 == null) {
        continue;
      }
      Vertex out=s1.getVertex();
      ArrayList<Vertex> vertexList=neighborsForVertex.get(in);
      if (vertexList == null) {
        vertexList=new ArrayList<Vertex>();
        neighborsForVertex.put(in,vertexList);
      }
      vertexList.add(out);
      vertexList=neighborsForVertex.get(out);
      if (vertexList == null) {
        vertexList=new ArrayList<Vertex>();
        neighborsForVertex.put(out,vertexList);
      }
      vertexList.add(in);
    }
  }
  ArrayList<HashSet<Vertex>> islands=new ArrayList<HashSet<Vertex>>();
  for (  Vertex gv : graph.getVertices()) {
    if (!(gv instanceof StreetVertex)) {
      continue;
    }
    Vertex vertex=gv;
    if (subgraphs.containsKey(vertex)) {
      continue;
    }
    if (!neighborsForVertex.containsKey(vertex)) {
      continue;
    }
    HashSet<Vertex> subgraph=computeConnectedSubgraph(neighborsForVertex,vertex);
    for (    Vertex subnode : subgraph) {
      subgraphs.put(subnode,subgraph);
    }
    islands.add(subgraph);
  }
  _log.info(islands.size() + " sub graphs found");
  for (  HashSet<Vertex> island : islands) {
    if (islandLog != null) {
      WriteNodesInSubGraph(island,islandLog);
    }
    if (island.size() < maxIslandSize) {
      _log.warn(graph.addBuilderAnnotation(new GraphConnectivity(island.iterator().next(),island.size())));
      depedestrianizeOrRemove(graph,island);
    }
  }
  if (graph.removeEdgelessVertices() > 0) {
    _log.warn("Removed edgeless vertices after pruning islands.");
  }
}
