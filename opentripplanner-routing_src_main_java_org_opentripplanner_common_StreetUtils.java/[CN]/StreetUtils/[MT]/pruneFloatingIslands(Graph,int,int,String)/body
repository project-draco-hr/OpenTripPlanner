{
  _log.debug("pruning");
  PrintWriter islandLog=null;
  if (islandLogName != null && !islandLogName.isEmpty()) {
    try {
      islandLog=new PrintWriter(new File(islandLogName));
    }
 catch (    Exception e) {
      _log.error("Failed to write islands log file due to {}",e.toString());
      e.printStackTrace();
    }
  }
  if (islandLog != null) {
    islandLog.printf("%s\t%s\t%s\t%s\t%s\n","id","stopCount","streetCount","wkt","hadRemoved");
  }
  Map<Vertex,Subgraph> subgraphs=new HashMap<Vertex,Subgraph>();
  Map<Vertex,ArrayList<Vertex>> neighborsForVertex=new HashMap<Vertex,ArrayList<Vertex>>();
  RoutingRequest options=new RoutingRequest(new TraverseModeSet(TraverseMode.WALK));
  for (  Vertex gv : graph.getVertices()) {
    if (!(gv instanceof StreetVertex)) {
      continue;
    }
    State s0=new State(gv,options);
    for (    Edge e : gv.getOutgoing()) {
      Vertex in=gv;
      if (!(e instanceof StreetEdge || e instanceof StreetTransitLink || e instanceof ElevatorEdge)) {
        continue;
      }
      State s1=e.traverse(s0);
      if (s1 == null) {
        continue;
      }
      Vertex out=s1.getVertex();
      ArrayList<Vertex> vertexList=neighborsForVertex.get(in);
      if (vertexList == null) {
        vertexList=new ArrayList<Vertex>();
        neighborsForVertex.put(in,vertexList);
      }
      vertexList.add(out);
      vertexList=neighborsForVertex.get(out);
      if (vertexList == null) {
        vertexList=new ArrayList<Vertex>();
        neighborsForVertex.put(out,vertexList);
      }
      vertexList.add(in);
    }
  }
  ArrayList<Subgraph> islands=new ArrayList<Subgraph>();
  for (  Vertex gv : graph.getVertices()) {
    if (!(gv instanceof StreetVertex)) {
      continue;
    }
    Vertex vertex=gv;
    if (subgraphs.containsKey(vertex)) {
      continue;
    }
    if (!neighborsForVertex.containsKey(vertex)) {
      continue;
    }
    Subgraph subgraph=computeConnectedSubgraph(neighborsForVertex,vertex);
    if (subgraph != null) {
      for (Iterator<Vertex> vIter=subgraph.streetIterator(); vIter.hasNext(); ) {
        Vertex subnode=vIter.next();
        subgraphs.put(subnode,subgraph);
      }
      islands.add(subgraph);
    }
  }
  _log.info(islands.size() + " sub graphs found");
  for (  Subgraph island : islands) {
    boolean hadRemoved=false;
    if (island.stopSize() > 0) {
      if (island.streetSize() < islandWithStopMaxSize) {
        depedestrianizeOrRemove(graph,island);
        hadRemoved=true;
      }
    }
 else {
      if (island.streetSize() < maxIslandSize) {
        depedestrianizeOrRemove(graph,island);
        hadRemoved=true;
      }
    }
    if (islandLog != null) {
      WriteNodesInSubGraph(island,islandLog,hadRemoved);
    }
  }
  if (graph.removeEdgelessVertices() > 0) {
    _log.warn("Removed edgeless vertices after pruning islands");
  }
}
