{
  _log.debug("converting to edge-based graph");
  ArrayList<DirectEdge> turns=new ArrayList<DirectEdge>(endpoints.size());
  for (  Vertex v : endpoints) {
    Vertex gv=graph.getVertex(v.getLabel());
    if (gv == null) {
      continue;
    }
    if (gv != v) {
      throw new IllegalStateException("Vertex in graph is not the same one at endpoint.");
    }
    for (    Edge e : gv.getIncoming()) {
      boolean replaced=false;
      TurnRestriction restriction=null;
      if (restrictions != null && e instanceof PlainStreetEdge) {
        restriction=restrictions.get((PlainStreetEdge)e);
      }
      for (      Edge e2 : v.getOutgoing()) {
        if (e2 instanceof PlainStreetEdge && e instanceof PlainStreetEdge) {
          StreetVertex v1=getStreetVertexForEdge(graph,(PlainStreetEdge)e);
          StreetVertex v2=getStreetVertexForEdge(graph,(PlainStreetEdge)e2);
          TurnEdge turn=new TurnEdge(v1,v2);
          if (restriction != null) {
            if (restriction.type == TurnRestrictionType.NO_TURN && restriction.to == e2) {
              turn.setRestrictedModes(restriction.modes);
            }
 else             if (restriction.type == TurnRestrictionType.ONLY_TURN && restriction.to != e2) {
              turn.setRestrictedModes(restriction.modes);
            }
          }
          if (v1 != v2 && !v1.getEdgeId().equals(v2.getEdgeId())) {
            turns.add(turn);
            replaced=true;
          }
          if (!replaced) {
            PlainStreetEdge pse=(PlainStreetEdge)e;
            pse.setFromVertex(v1);
            turns.add(pse);
          }
        }
 else {
          Vertex v1;
          Vertex v2;
          if (e instanceof PlainStreetEdge) {
            v1=getStreetVertexForEdge(graph,(PlainStreetEdge)e);
          }
 else {
            v1=e.getFromVertex();
          }
          if (e2 instanceof PlainStreetEdge) {
            v2=getStreetVertexForEdge(graph,(PlainStreetEdge)e2);
          }
 else {
            v2=((AbstractEdge)e2).getToVertex();
          }
          if (v1 == null || v2 == null) {
            throw new IllegalStateException("Null vertex when building FreeEdge!");
          }
 else           if (v1 != v2) {
            FreeEdge turn=new FreeEdge(v1,v2);
            turns.add(turn);
          }
        }
      }
    }
  }
  for (  Vertex v : endpoints) {
    graph.removeVertexAndEdges(v);
  }
  for (  DirectEdge e : turns) {
    graph.addEdge(e);
  }
}
