{
  State lastLegStates[]=legsStates[legsStates.length - 1];
  State lastState=lastLegStates[lastLegStates.length - 1];
  for (int i=0; i < legsStates.length - 1; i++) {
    legs.get(i + 1).from.arrival=legs.get(i).to.arrival;
    legs.get(i).to.departure=legs.get(i + 1).from.departure;
    Object boardRule=legsStates[i][0].getExtension("boardAlightRule");
    Object alightRule=legsStates[i + 1][0].getExtension("boardAlightRule");
    if (legs.get(i).isTransitLeg()) {
      if (!legs.get(i).interlineWithPreviousLeg) {
        legs.get(i).boardRule=(String)boardRule;
      }
      if (!legs.get(i + 1).interlineWithPreviousLeg) {
        legs.get(i).alightRule=(String)alightRule;
      }
    }
    if (legs.get(i).isTransitLeg() && !legs.get(i + 1).isTransitLeg()) {
      legs.get(i + 1).from.name=legs.get(i).to.name;
    }
    if (!legs.get(i).isTransitLeg() && legs.get(i + 1).isTransitLeg()) {
      legs.get(i).to.name=legs.get(i + 1).from.name;
    }
  }
  Leg lastLeg=legs.get(legs.size() - 1);
  if (lastLeg.isTransitLeg()) {
    Object boardRule=legsStates[legsStates.length - 1][0].getExtension("boardAlightRule");
    Object alightRule=lastState.getExtension("boardAlightRule");
    if (!lastLeg.interlineWithPreviousLeg) {
      lastLeg.boardRule=(String)boardRule;
    }
    lastLeg.alightRule=(String)alightRule;
  }
}
