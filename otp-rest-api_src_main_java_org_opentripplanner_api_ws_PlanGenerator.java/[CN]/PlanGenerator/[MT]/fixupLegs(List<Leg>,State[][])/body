{
  Object alightRules[]=new Object[legsStates.length];
  Object boardRules[]=new Object[legsStates.length];
  for (int i=0; i < legsStates.length; i++) {
    for (int j=1; j < legsStates[i].length; j++) {
      if (legsStates[i][j].getBackEdge() instanceof PatternEdge) {
        PatternEdge patternEdge=(PatternEdge)legsStates[i][j].getBackEdge();
        TripPattern tripPattern=patternEdge.getPattern();
        int boardType=tripPattern.getBoardType(legs.get(i).from.stopIndex);
        int alightType=tripPattern.getAlightType(legs.get(i).to.stopIndex);
        boardRules[i]=TransitUtils.determineBoardAlightType(boardType);
        alightRules[i]=TransitUtils.determineBoardAlightType(alightType);
      }
    }
  }
  for (int i=0; i < legsStates.length - 1; i++) {
    legs.get(i + 1).from.arrival=legs.get(i).to.arrival;
    legs.get(i).to.departure=legs.get(i + 1).from.departure;
    if (legs.get(i).isTransitLeg()) {
      if (boardRules[i] instanceof String && !legs.get(i).interlineWithPreviousLeg) {
        legs.get(i).boardRule=(String)boardRules[i];
      }
      if (alightRules[i] instanceof String && !legs.get(i + 1).interlineWithPreviousLeg) {
        legs.get(i).alightRule=(String)alightRules[i];
      }
    }
    if (legs.get(i).isTransitLeg() && !legs.get(i + 1).isTransitLeg()) {
      legs.get(i + 1).from.name=legs.get(i).to.name;
    }
    if (!legs.get(i).isTransitLeg() && legs.get(i + 1).isTransitLeg()) {
      legs.get(i).to.name=legs.get(i + 1).from.name;
    }
  }
  Leg lastLeg=legs.get(legs.size() - 1);
  Object lastBoardRule=boardRules[boardRules.length - 1];
  Object lastAlightRule=alightRules[alightRules.length - 1];
  if (lastLeg.isTransitLeg()) {
    if (lastBoardRule instanceof String && !lastLeg.interlineWithPreviousLeg) {
      lastLeg.boardRule=(String)lastBoardRule;
    }
    if (lastAlightRule instanceof String) {
      lastLeg.alightRule=(String)lastAlightRule;
    }
  }
}
