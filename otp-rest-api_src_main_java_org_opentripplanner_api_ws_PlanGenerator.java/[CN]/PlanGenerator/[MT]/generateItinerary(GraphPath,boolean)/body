{
  if (path.states.size() < 2) {
    throw new TrivialPathException();
  }
  Itinerary itinerary=new Itinerary();
  State[] states=new State[path.states.size()];
  State lastState=path.states.getLast();
  states=path.states.toArray(states);
  Edge[] edges=new Edge[path.edges.size()];
  edges=path.edges.toArray(edges);
  Graph graph=path.getRoutingContext().graph;
  FareService fareService=graph.getService(FareService.class);
  TransitIndexService transitIndexService=graph.getService(TransitIndexService.class);
  State[][] legsStates=sliceStates(states);
  if (fareService != null) {
    itinerary.fare=fareService.getCost(path);
  }
  for (  State[] legStates : legsStates) {
    itinerary.addLeg(generateLeg(legStates,transitIndexService,showIntermediateStops));
  }
  addWalkSteps(itinerary.legs,legsStates);
  fixupLegs(itinerary.legs,legsStates);
  itinerary.duration=1000L * lastState.getElapsedTimeSeconds();
  itinerary.startTime=makeCalendar(states[0]);
  itinerary.endTime=makeCalendar(lastState);
  calculateTimes(itinerary,states);
  calculateElevations(itinerary,edges);
  itinerary.walkDistance=lastState.getWalkDistance();
  if (lastState.getNumBoardings() > 1)   itinerary.transfers=lastState.getNumBoardings() - 1;
  return itinerary;
}
