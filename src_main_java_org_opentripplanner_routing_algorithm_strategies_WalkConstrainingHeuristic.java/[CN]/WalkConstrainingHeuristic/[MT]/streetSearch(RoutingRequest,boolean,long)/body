{
  rr=rr.clone();
  if (fromTarget) {
    rr.setArriveBy(!rr.arriveBy);
  }
  Set<Vertex> vertices=new HashSet<>();
  ShortestPathTree spt=new DominanceFunction.MinimumWeight().getNewShortestPathTree(rr);
  BinHeap<State> pq=new BinHeap<State>();
  Vertex initVertex=fromTarget ? rr.rctx.target : rr.rctx.origin;
  State initState=new State(initVertex,rr);
  pq.insert(initState,0);
  while (!pq.empty()) {
    if (abortTime < Long.MAX_VALUE && System.currentTimeMillis() > abortTime) {
      return null;
    }
    State s=pq.extract_min();
    Vertex v=s.getVertex();
    if (!(v instanceof StreetVertex)) {
      continue;
    }
    vertices.add(v);
    for (    Edge e : rr.arriveBy ? v.getIncoming() : v.getOutgoing()) {
      State s1=e.traverse(s);
      if (s1 == null)       continue;
      if (spt.add(s1)) {
        pq.insert(s1,s1.getWeight());
      }
    }
  }
  return vertices;
}
