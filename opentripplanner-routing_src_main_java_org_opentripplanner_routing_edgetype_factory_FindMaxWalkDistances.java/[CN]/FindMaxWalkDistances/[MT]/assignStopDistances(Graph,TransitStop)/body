{
  TraverseOptions options=new TraverseOptions(new TraverseModeSet(TraverseMode.WALK));
  options.maxWalkDistance=Double.MAX_VALUE;
  options.walkReluctance=1.0;
  options.speed=1.0;
  SPTVertex spt_u, spt_v;
  HashSet<Vertex> closed=new HashSet<Vertex>();
  FibHeap<SPTVertex> queue=new FibHeap<SPTVertex>(graph.getVertices().size());
  BasicShortestPathTree spt=new BasicShortestPathTree();
  State init=new State();
  SPTVertex spt_origin=spt.addVertex(origin,init,0,options);
  queue.insert(spt_origin,spt_origin.weightSum);
  while (!queue.empty()) {
    spt_u=queue.peek_min();
    Vertex fromv=spt_u.mirror;
    queue.extract_min();
    closed.add(fromv);
    Iterable<Edge> outgoing=graph.getOutgoing(fromv);
    State state=spt_u.state;
    for (    Edge edge : outgoing) {
      Vertex toVertex=edge.getToVertex();
      if (closed.contains(toVertex)) {
        continue;
      }
      TraverseResult wr=edge.traverse(state,options);
      if (wr == null) {
        continue;
      }
      if (wr.weight < 0) {
        throw new NegativeWeightException(String.valueOf(wr.weight));
      }
      double new_w=spt_u.weightSum + wr.weight;
      if (toVertex instanceof StreetVertex) {
        StreetVertex sv=(StreetVertex)toVertex;
        if (sv.getDistanceToNearestTransitStop() <= new_w) {
          continue;
        }
        sv.setDistanceToNearestTransitStop(new_w);
      }
      spt_v=spt.addVertex(toVertex,wr.state,new_w,options,spt_u.hops + 1);
      if (spt_v != null) {
        spt_v.setParent(spt_u,edge);
        queue.insert_or_dec_key(spt_v,new_w);
      }
    }
  }
}
