{
  final int nTotalStops=data.stops.length;
  data.nearbyStops=new List[nTotalStops];
  for (int i=0; i < nTotalStops; ++i) {
    if (i % 500 == 0) {
      System.out.println("Precomputing nearby stops:" + i + " / "+ nTotalStops);
    }
    data.nearbyStops[i]=new ArrayList<T2<Double,RaptorStop>>();
    RaptorStop stop=data.stops[i];
    Coordinate coord=stop.stopVertex.getCoordinate();
    for (    RaptorStop other : data.stops) {
      if (other == stop)       continue;
      Coordinate otherCoord=other.stopVertex.getCoordinate();
      if (Math.abs(otherCoord.x - coord.x) > 4850 / 111111.0) {
        continue;
      }
      if (Math.abs(otherCoord.y - coord.y) > 4850 / 111111.0) {
        continue;
      }
      double distance=distanceLibrary.fastDistance(coord,otherCoord);
      if (distance > 4850)       continue;
      data.nearbyStops[i].add(new T2<Double,RaptorStop>(distance,other));
    }
    Collections.sort(data.nearbyStops[i],new Comparator<T2<Double,RaptorStop>>(){
      @Override public int compare(      T2<Double,RaptorStop> arg0,      T2<Double,RaptorStop> arg1){
        return (int)Math.signum(arg0.getFirst() - arg1.getFirst());
      }
    }
);
  }
}
