{
  Queue<AutomatonState> q=new LinkedList<AutomatonState>();
  Map<AutomatonState,String> names=new HashMap<AutomatonState,String>();
  q.add(start);
  names.put(start,"START");
  char counter='A';
  while (!q.isEmpty()) {
    AutomatonState s=q.poll();
    for (    Transition e : s) {
      if (!names.containsKey(e.target)) {
        names.put(e.target,Character.toString(counter++));
        q.add(e.target);
      }
    }
  }
  StringBuilder sb=new StringBuilder();
  sb.append("digraph automaton { \n");
  sb.append("  rankdir=LR; \n");
  sb.append("  node [shape = doublecircle]; \n");
  for (  AutomatonState as : names.keySet())   if (as.accept)   sb.append(String.format("  %s; \n",names.get(as)));
  sb.append("  node [shape = circle]; \n");
  for (  AutomatonState as : names.keySet()) {
    for (    Transition e : as) {
      sb.append("  ");
      sb.append(names.get(as));
      sb.append("->");
      sb.append(names.get(e.target));
      String label=Integer.toString(e.token);
      if (e.token == Transition.EPSILON)       label="e";
      sb.append(String.format(" [label=%s];\n",label));
    }
  }
  sb.append("}\n");
  return sb.toString();
}
