{
  if (!options.getModes().get(modeMask)) {
    return null;
  }
  long current_time=state0.getTime();
  int bestWait=-1;
  int bestPatternIndex=-1;
  AgencyAndId serviceId=getPattern().getExemplar().getServiceId();
  for (  ServiceDay sd : options.serviceDays) {
    int secondsSinceMidnight=sd.secondsSinceMidnight(current_time);
    if (secondsSinceMidnight < 0)     continue;
    if (sd.serviceIdRunning(serviceId)) {
      int patternIndex=pattern.getPreviousTrip(stopIndex,secondsSinceMidnight,options.wheelchairAccessible,options.getModes().getBicycle(),false);
      if (patternIndex >= 0) {
        int wait=(int)((current_time - sd.time(pattern.getArrivalTime(stopIndex,patternIndex))) / 1000);
        if (wait < 0)         _log.error("negative wait time on alight");
        if (bestWait < 0 || wait < bestWait) {
          bestWait=wait;
          bestPatternIndex=patternIndex;
        }
      }
    }
  }
  if (bestWait < 0) {
    return null;
  }
  Trip trip=getPattern().getTrip(bestPatternIndex);
  if (options.bannedRoutes != null) {
    Route route=trip.getRoute();
    RouteSpec spec=new RouteSpec(route.getId().getAgencyId(),GtfsLibrary.getRouteName(route));
    if (options.bannedRoutes.contains(spec)) {
      return null;
    }
  }
  Editor editor=state0.edit();
  editor.setTrip(bestPatternIndex);
  editor.incrementTimeInSeconds(-bestWait);
  editor.incrementNumBoardings();
  editor.setTripId(trip.getId());
  editor.setZone(pattern.getZone(stopIndex));
  editor.setRoute(pattern.getExemplar().getRoute().getId());
  editor.setFareContext(pattern.getFareContext());
  long wait_cost=bestWait;
  if (state0.getData().getNumBoardings() == 0) {
    wait_cost*=options.waitAtBeginningFactor;
  }
 else {
    wait_cost*=options.waitReluctance;
  }
  return new TraverseResult(wait_cost,editor.createState(),this);
}
