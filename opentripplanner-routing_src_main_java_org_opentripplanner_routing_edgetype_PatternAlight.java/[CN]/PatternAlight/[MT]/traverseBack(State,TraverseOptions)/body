{
  if (!options.getModes().get(modeMask)) {
    return null;
  }
  long current_time=state0.getTime();
  long transfer_penalty=0;
  StateData data=state0.getData();
  if (data.getLastAlightedTime() != 0) {
    TransferTable transferTable=options.getTransferTable();
    if (transferTable.hasPreferredTransfers()) {
      transfer_penalty=options.baseTransferPenalty;
    }
    int transfer_time=transferTable.getTransferTime(getToVertex(),data.getPreviousStop());
    if (transfer_time == TransferTable.UNKNOWN_TRANSFER) {
      transfer_time=options.minTransferTime;
    }
    if (transfer_time > 0 && transfer_time > (current_time + data.getLastAlightedTime()) * 1000) {
      current_time+=data.getLastAlightedTime() - transfer_time * 1000;
    }
 else     if (transfer_time == TransferTable.FORBIDDEN_TRANSFER) {
      return null;
    }
 else     if (transfer_time == TransferTable.PREFERRED_TRANSFER) {
      transfer_penalty=0;
    }
  }
  ServiceDate service_date=getServiceDate(current_time,options.calendar);
  ServiceDate service_date_testerday=getServiceDate(current_time - MILLI_IN_DAY,options.calendar);
  int secondsSinceMidnight=(int)((current_time - service_date.getAsDate().getTime()) / 1000);
  int wait=1;
  int patternIndex=-1;
  AgencyAndId service=pattern.getExemplar().getServiceId();
  if (options.serviceOn(service,service_date)) {
    patternIndex=pattern.getPreviousTrip(stopIndex,secondsSinceMidnight,options.wheelchairAccessible,false);
    if (patternIndex >= 0) {
      wait=pattern.getArrivalTime(stopIndex,patternIndex) - secondsSinceMidnight;
    }
  }
  if (options.serviceOn(service,service_date_testerday)) {
    int yesterday_pattern_index=pattern.getPreviousTrip(stopIndex,secondsSinceMidnight + SEC_IN_DAY,options.wheelchairAccessible,false);
    if (yesterday_pattern_index >= 0) {
      int wait_yesterday=pattern.getArrivalTime(stopIndex,yesterday_pattern_index) - secondsSinceMidnight - SEC_IN_DAY;
      if (wait > 0 || wait_yesterday > wait) {
        wait=wait_yesterday;
        patternIndex=yesterday_pattern_index;
      }
    }
  }
  if (wait > 0) {
    return null;
  }
  Trip trip=getPattern().getTrip(patternIndex);
  if (options.bannedRoutes != null) {
    Route route=trip.getRoute();
    RouteSpec spec=new RouteSpec(route.getId().getAgencyId(),GtfsLibrary.getRouteName(route));
    if (options.bannedRoutes.contains(spec)) {
      return null;
    }
  }
  Editor editor=state0.edit();
  editor.setTrip(patternIndex);
  editor.incrementTimeInSeconds(wait);
  editor.incrementNumBoardings();
  editor.setTripId(trip.getId());
  editor.setZone(pattern.getZone(stopIndex));
  editor.setRoute(pattern.getExemplar().getRoute().getId());
  editor.setFareContext(pattern.getFareContext());
  if (options.optimizeFor == OptimizeType.TRANSFERS && state0.getData().getTrip() != -1) {
    transfer_penalty+=options.optimizeTransferPenalty;
  }
  long wait_cost=-wait;
  if (state0.getData().getNumBoardings() == 0) {
    wait_cost*=options.waitAtBeginningFactor;
  }
 else {
    wait_cost*=options.waitReluctance;
  }
  return new TraverseResult(wait_cost + options.boardCost + transfer_penalty,editor.createState(),this);
}
