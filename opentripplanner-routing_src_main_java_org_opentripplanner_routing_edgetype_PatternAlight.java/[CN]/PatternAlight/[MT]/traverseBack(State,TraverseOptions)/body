{
  if (!options.getModes().get(modeMask)) {
    return null;
  }
  long current_time=state0.getTime();
  int bestWait=-1;
  int bestPatternIndex=-1;
  AgencyAndId serviceId=getPattern().getExemplar().getServiceId();
  for (  ServiceDay sd : options.serviceDays) {
    int secondsSinceMidnight=sd.secondsSinceMidnight(current_time);
    if (secondsSinceMidnight < 0)     continue;
    if (sd.serviceIdRunning(serviceId)) {
      int patternIndex=pattern.getPreviousTrip(stopIndex,secondsSinceMidnight,options.wheelchairAccessible,false);
      if (patternIndex >= 0) {
        int wait=(int)((current_time - sd.time(pattern.getArrivalTime(stopIndex,patternIndex))) / 1000);
        if (wait < 0)         _log.error("negative wait time on alight");
        if (bestWait < 0 || wait < bestWait) {
          bestWait=wait;
          bestPatternIndex=patternIndex;
        }
      }
    }
  }
  if (bestWait < 0) {
    return null;
  }
  Trip trip=getPattern().getTrip(bestPatternIndex);
  if (options.bannedRoutes != null) {
    Route route=trip.getRoute();
    RouteSpec spec=new RouteSpec(route.getId().getAgencyId(),GtfsLibrary.getRouteName(route));
    if (options.bannedRoutes.contains(spec)) {
      return null;
    }
  }
  long transfer_penalty=0;
  StateData data=state0.getData();
  if (data.getLastAlightedTime() != 0) {
    TransferTable transferTable=options.getTransferTable();
    if (transferTable.hasPreferredTransfers()) {
      transfer_penalty=options.baseTransferPenalty;
    }
    int transfer_time=transferTable.getTransferTime(getToVertex(),data.getPreviousStop());
    if (transfer_time == TransferTable.UNKNOWN_TRANSFER) {
      transfer_time=options.minTransferTime;
    }
    if (transfer_time > 0 && transfer_time > (current_time + data.getLastAlightedTime()) * 1000) {
      current_time+=data.getLastAlightedTime() - transfer_time * 1000;
    }
 else     if (transfer_time == TransferTable.FORBIDDEN_TRANSFER) {
      return null;
    }
 else     if (transfer_time == TransferTable.PREFERRED_TRANSFER) {
      transfer_penalty=0;
    }
  }
  Editor editor=state0.edit();
  editor.setTrip(bestPatternIndex);
  editor.incrementTimeInSeconds(-bestWait);
  editor.incrementNumBoardings();
  editor.setTripId(trip.getId());
  editor.setZone(pattern.getZone(stopIndex));
  editor.setRoute(pattern.getExemplar().getRoute().getId());
  editor.setFareContext(pattern.getFareContext());
  if (options.optimizeFor == OptimizeType.TRANSFERS && state0.getData().getTrip() != -1) {
    transfer_penalty+=options.optimizeTransferPenalty;
  }
  long wait_cost=bestWait;
  if (state0.getData().getNumBoardings() == 0) {
    wait_cost*=options.waitAtBeginningFactor;
  }
 else {
    wait_cost*=options.waitReluctance;
  }
  return new TraverseResult(wait_cost + options.boardCost + transfer_penalty,editor.createState(),this);
}
