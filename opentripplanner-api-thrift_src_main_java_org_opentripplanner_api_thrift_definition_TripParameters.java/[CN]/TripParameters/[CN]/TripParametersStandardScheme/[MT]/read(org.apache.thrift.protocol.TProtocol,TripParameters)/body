{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
        struct.origin=new Location();
        struct.origin.read(iprot);
        struct.setOriginIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.destination=new Location();
    struct.destination.read(iprot);
    struct.setDestinationIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
{
  org.apache.thrift.protocol.TSet _set16=iprot.readSetBegin();
  struct.allowed_modes=new HashSet<TravelMode>(2 * _set16.size);
  for (int _i17=0; _i17 < _set16.size; ++_i17) {
    TravelMode _elem18;
    _elem18=TravelMode.findByValue(iprot.readI32());
    struct.allowed_modes.add(_elem18);
  }
  iprot.readSetEnd();
}
struct.setAllowed_modesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
