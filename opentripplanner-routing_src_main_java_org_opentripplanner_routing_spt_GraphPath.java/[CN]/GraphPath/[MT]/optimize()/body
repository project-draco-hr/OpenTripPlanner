{
  State state=vertices.lastElement().state.clone();
  State state0=vertices.firstElement().state;
  state.alightedLocal=false;
  state.everBoarded=false;
  if (edges.isEmpty()) {
    return;
  }
  if (state0.getTime() >= state.getTime()) {
    TraverseOptions options=vertices.lastElement().options;
    ListIterator<SPTEdge> iterator=edges.listIterator(vertices.size() - 1);
    while (iterator.hasPrevious()) {
      SPTEdge edge=iterator.previous();
      TraverseResult result=edge.payload.traverse(state,options);
      assert(result != null);
      state=result.state;
      edge.fromv.state=state;
      edge.narrative=result.getEdgeNarrative();
    }
  }
 else {
    TraverseOptions options=vertices.lastElement().options;
    ListIterator<SPTEdge> iterator=edges.listIterator(vertices.size() - 1);
    while (iterator.hasPrevious()) {
      SPTEdge edge=iterator.previous();
      TraverseResult result=edge.payload.traverseBack(state,options);
      state=result.state;
      edge.fromv.state=state;
      edge.narrative=result.getEdgeNarrative();
    }
  }
}
