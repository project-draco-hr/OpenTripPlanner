{
  State state=vertices.lastElement().state;
  StateData.Editor edit=state.edit();
  edit.resetForReverseOptimization();
  state=edit.createState();
  if (edges.isEmpty()) {
    return;
  }
  TraverseOptions options=vertices.lastElement().options;
  if (options.isArriveBy()) {
    ListIterator<SPTEdge> iterator=edges.listIterator(vertices.size() - 1);
    while (iterator.hasPrevious()) {
      SPTEdge edge=iterator.previous();
      EdgeNarrative existingNarrative=edge.narrative;
      TraverseResult result=edge.payload.traverse(state,options);
      assert(result != null);
      state=result.state;
      edge.fromv.state=state;
      edge.narrative=result.getEdgeNarrative();
      copyExistingNarrativeToNewNarrativeAsAppropriate(existingNarrative,edge.narrative);
    }
  }
 else {
    ListIterator<SPTEdge> iterator=edges.listIterator(vertices.size() - 1);
    while (iterator.hasPrevious()) {
      SPTEdge edge=iterator.previous();
      EdgeNarrative existingNarrative=edge.narrative;
      TraverseResult result=edge.payload.traverseBack(state,options);
      state=result.state;
      edge.fromv.state=state;
      edge.narrative=result.getEdgeNarrative();
      copyExistingNarrativeToNewNarrativeAsAppropriate(existingNarrative,edge.narrative);
    }
  }
}
