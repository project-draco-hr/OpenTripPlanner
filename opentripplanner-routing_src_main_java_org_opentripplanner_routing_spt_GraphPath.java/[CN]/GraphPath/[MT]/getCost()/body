{
  State state=vertices.lastElement().state;
  FareContext fareContext=state.fareContext;
  if (fareContext == null) {
    return null;
  }
  Currency currency=null;
  HashMap<AgencyAndId,FareRuleSet> fareRules=fareContext.getFareRules();
  HashMap<AgencyAndId,FareAttribute> fareAttributes=fareContext.getFareAttributes();
  List<Ride> rides=new ArrayList<Ride>();
  Ride newRide=null;
  for (  SPTVertex vertex : vertices) {
    String zone=vertex.state.zone;
    AgencyAndId route=vertex.state.route;
    if (zone == null) {
      newRide=null;
    }
 else {
      if (newRide == null || !route.equals(newRide.route)) {
        newRide=new Ride();
        rides.add(newRide);
        newRide.startZone=zone;
        newRide.route=route;
      }
      newRide.zones.add(zone);
      newRide.endZone=zone;
    }
  }
  Set<String> zones=new HashSet<String>();
  Set<AgencyAndId> routes=new HashSet<AgencyAndId>();
  String startZone=null;
  int transfersUsed=-1;
  float totalFare=0, currentFare=-1;
  for (int i=0; i < rides.size(); ++i) {
    Ride ride=rides.get(i);
    System.out.println("considering ride : " + ride);
    if (startZone == null) {
      startZone=ride.startZone;
    }
    float bestFare=Float.MAX_VALUE;
    routes.add(ride.route);
    zones.addAll(ride.zones);
    transfersUsed+=1;
    for (    AgencyAndId fareId : fareRules.keySet()) {
      FareRuleSet ruleSet=fareRules.get(fareId);
      if (ruleSet.matches(startZone,ride.endZone,zones,routes)) {
        FareAttribute attribute=fareAttributes.get(fareId);
        if (attribute.isTransfersSet() && attribute.getTransfers() < transfersUsed) {
          continue;
        }
        float newFare=attribute.getPrice();
        if (newFare < bestFare) {
          bestFare=newFare;
          currency=Currency.getInstance(attribute.getCurrencyType());
        }
      }
    }
    if (bestFare == Float.MAX_VALUE) {
      if (currentFare == -1) {
        throw new RuntimeException("No fare for a perfectly good ride: " + ride);
      }
      totalFare+=currentFare;
      currentFare=0;
      transfersUsed=-1;
      --i;
      zones=new HashSet<String>();
      startZone=ride.startZone;
      routes=new HashSet<AgencyAndId>();
    }
 else {
      currentFare=bestFare;
    }
  }
  totalFare+=currentFare;
  Fare fare=new Fare();
  fare.addFare(FareType.regular,new WrappedCurrency(currency),(int)(totalFare * Math.pow(10,currency.getDefaultFractionDigits())));
  return fare;
}
