{
  TraverseModeSet modeSet=request.getModeSet();
  assert(modeSet.isValid());
  TraverseOptions options=new TraverseOptions(modeSet);
  options.optimizeFor=request.getOptimize();
  options.back=request.isArriveBy();
  options.wheelchairAccessible=request.getWheelchair();
  options.maxWalkDistance=request.getWalk();
  if (request.getMaxSlope() > 0) {
    options.maxSlope=request.getMaxSlope();
  }
  if (request.getWheelchair()) {
    if (!pathservice.isAccessible(request.getFrom(),options.maxSlope) || !pathservice.isAccessible(request.getTo(),options.maxSlope)) {
      throw new LocationNotAccessible();
    }
  }
  List<GraphPath> paths=null;
  boolean tooSloped=false;
  try {
    List<String> intermediates=request.getIntermediatePlaces();
    if (intermediates.size() == 0) {
      paths=pathservice.plan(request.getFrom(),request.getTo(),request.getDateTime(),options);
      if (paths == null && request.getWheelchair()) {
        options.maxSlope=Double.MAX_VALUE;
        paths=pathservice.plan(request.getFrom(),request.getTo(),request.getDateTime(),options);
        tooSloped=true;
      }
    }
 else {
      paths=pathservice.plan(request.getFrom(),request.getTo(),intermediates,request.getDateTime(),options);
    }
  }
 catch (  VertexNotFoundException e) {
    LOGGER.log(Level.INFO,"Vertex not found: " + request.getFrom() + " : "+ request.getTo(),e);
    throw e;
  }
  if (paths == null || paths.size() == 0) {
    LOGGER.log(Level.INFO,"Path not found: " + request.getFrom() + " : "+ request.getTo());
    throw new PathNotFoundException();
  }
  Vector<SPTVertex> vertices=paths.get(0).vertices;
  SPTVertex tripStartVertex=vertices.firstElement();
  SPTVertex tripEndVertex=vertices.lastElement();
  String startName=tripStartVertex.getName();
  String endName=tripEndVertex.getName();
  if (startName == null) {
    startName=tripStartVertex.getLabel();
  }
  if (endName == null) {
    endName=tripEndVertex.getLabel();
  }
  Place from=new Place(tripStartVertex.getX(),tripStartVertex.getY(),startName);
  Place to=new Place(tripEndVertex.getX(),tripEndVertex.getY(),endName);
  TripPlan plan=new TripPlan(from,to,request.getDateTime());
  GeometryFactory geometryFactory=new GeometryFactory();
  for (  GraphPath path : paths) {
    Itinerary itinerary=new Itinerary();
    plan.addItinerary(itinerary);
    SPTVertex startVertex=path.vertices.firstElement();
    State startState=startVertex.state;
    SPTVertex endVertex=path.vertices.lastElement();
    State endState=endVertex.state;
    itinerary.startTime=new Date(startState.getTime());
    itinerary.endTime=new Date(endState.getTime());
    itinerary.duration=endState.getTime() - startState.getTime();
    itinerary.fare=path.getCost();
    itinerary.transfers=-1;
    itinerary.tooSloped=tooSloped;
    Leg leg=null;
    TraverseMode mode=null;
    CoordinateArrayListSequence coordinates=new CoordinateArrayListSequence();
    String name=null;
    int startWalk=-1;
    int i=-1;
    SPTEdge lastEdge=null;
    double lastElevation=Double.MAX_VALUE;
    for (    SPTEdge edge : path.edges) {
      i++;
      Edge graphEdge=edge.payload;
      if (graphEdge instanceof Turn) {
        continue;
      }
      lastEdge=edge;
      TraverseMode edgeMode=graphEdge.getMode();
      if (graphEdge instanceof Street && modeSet.contains(TraverseMode.BICYCLE)) {
        edgeMode=TraverseMode.BICYCLE;
      }
      double edgeTime=edge.tov.state.getTime() - edge.fromv.state.getTime();
      if (!edgeMode.isTransit() && edgeMode != TraverseMode.ALIGHTING) {
        if (edgeMode != mode || (!mode.isOnStreetNonTransit() && graphEdge.getName() != name)) {
          name=graphEdge.getName();
          if (leg != null) {
            if (startWalk != -1) {
              leg.walkSteps=getWalkSteps(path.edges.subList(startWalk,i));
            }
            Vertex fromv=graphEdge.getFromVertex();
            Coordinate endCoord=fromv.getCoordinate();
            leg.to=new Place(endCoord.x,endCoord.y,fromv.getName());
            leg.to.stopId=fromv.getStopId();
            leg.endTime=new Date(edge.tov.state.getTime());
            Geometry geometry=geometryFactory.createLineString(coordinates);
            leg.legGeometry=PolylineEncoder.createEncodings(geometry);
            leg.duration=edge.tov.state.getTime() - leg.startTime.getTime();
            if (leg.isBogusWalkLeg()) {
              itinerary.removeLeg(leg);
            }
            leg=null;
            coordinates=new CoordinateArrayListSequence();
          }
          if (leg != null && leg.isBogusWalkLeg()) {
            itinerary.removeLeg(leg);
          }
          leg=new Leg();
          itinerary.addLeg(leg);
          leg.startTime=new Date(edge.fromv.state.getTime());
          leg.route=graphEdge.getName();
          Trip trip=edge.getTrip();
          if (trip != null) {
            leg.headsign=trip.getTripHeadsign();
            leg.agencyId=trip.getId().getAgencyId();
          }
          mode=edgeMode;
          leg.mode=mode.toString();
          if (mode == TraverseMode.WALK || mode == TraverseMode.BICYCLE) {
            startWalk=i;
          }
 else {
            startWalk=-1;
          }
          leg.distance=0.0;
          Vertex fromv=graphEdge.getFromVertex();
          Coordinate endCoord=fromv.getCoordinate();
          leg.from=new Place(endCoord.x,endCoord.y,fromv.getName());
          leg.from.stopId=fromv.getStopId();
        }
      }
      Geometry edgeGeometry=graphEdge.getGeometry();
      if (edgeGeometry != null) {
        coordinates.extend(edgeGeometry.getCoordinates());
      }
      leg.distance+=edge.getDistance();
      if (edgeMode == TraverseMode.TRANSFER) {
        itinerary.walkTime+=edgeTime;
        itinerary.walkDistance+=graphEdge.getDistance();
        continue;
      }
      if (edgeMode == TraverseMode.BOARDING) {
        itinerary.transfers++;
        itinerary.waitingTime+=edgeTime;
        continue;
      }
      if (edgeMode == TraverseMode.WALK || edgeMode == TraverseMode.BICYCLE) {
        itinerary.walkTime+=edgeTime;
        itinerary.walkDistance+=graphEdge.getDistance();
        if (graphEdge instanceof Street) {
          PackedCoordinateSequence profile=((Street)graphEdge).getElevationProfile();
          if (profile != null) {
            for (            Coordinate coordinate : profile.toCoordinateArray()) {
              if (lastElevation == Double.MAX_VALUE) {
                lastElevation=coordinate.y;
                continue;
              }
              double elevationChange=lastElevation - coordinate.y;
              if (elevationChange > 0) {
                itinerary.elevationGained+=elevationChange;
              }
 else {
                itinerary.elevationLost-=elevationChange;
              }
              lastElevation=coordinate.y;
            }
          }
        }
      }
      if (edgeMode.isTransit()) {
        itinerary.transitTime+=edgeTime;
        mode=graphEdge.getMode();
        leg.mode=mode.toString();
        leg.route=graphEdge.getName();
        if (request.getShowIntermediateStops()) {
          if (leg.stop == null) {
            leg.stop=new ArrayList<Place>();
          }
 else {
            Place stop=new Place(edge.fromv.getX(),edge.fromv.getY(),edge.fromv.getName());
            stop.stopId=edge.fromv.getStopId();
            leg.stop.add(stop);
          }
        }
      }
    }
    Edge graphEdge=lastEdge.payload;
    if (leg != null) {
      Vertex tov=graphEdge.getToVertex();
      Coordinate endCoord=tov.getCoordinate();
      leg.to=new Place(endCoord.x,endCoord.y,tov.getName());
      leg.to.stopId=tov.getStopId();
      leg.endTime=new Date(lastEdge.tov.state.getTime());
      Geometry geometry=geometryFactory.createLineString(coordinates);
      leg.legGeometry=PolylineEncoder.createEncodings(geometry);
      leg.duration=lastEdge.tov.state.getTime() - leg.startTime.getTime();
      if (startWalk != -1) {
        leg.walkSteps=getWalkSteps(path.edges.subList(startWalk,i + 1));
      }
      if (leg.isBogusWalkLeg()) {
        itinerary.removeLeg(leg);
      }
      leg=null;
    }
    if (itinerary.transfers == -1) {
      itinerary.transfers=0;
    }
  }
  return plan;
}
