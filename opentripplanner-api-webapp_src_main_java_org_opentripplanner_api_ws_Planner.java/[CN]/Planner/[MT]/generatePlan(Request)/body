{
  TraverseModeSet modeSet=request.getModeSet();
  assert(modeSet.isValid());
  TraverseOptions options=new TraverseOptions(modeSet);
  options.back=request.isArriveBy();
  List<GraphPath> paths=pathservice.plan(request.getFrom(),request.getTo(),request.getDateTime(),options);
  Vector<SPTVertex> vertices=paths.get(0).vertices;
  SPTVertex tripStartVertex=vertices.firstElement();
  SPTVertex tripEndVertex=vertices.lastElement();
  Place from=new Place(tripStartVertex.getX(),tripStartVertex.getY(),request.getFrom());
  Place to=new Place(tripEndVertex.getX(),tripEndVertex.getY(),request.getTo());
  TripPlan plan=new TripPlan(from,to,request.getDateTime());
  for (  GraphPath path : paths) {
    Itinerary itinerary=new Itinerary();
    plan.addItinerary(itinerary);
    SPTVertex startVertex=path.vertices.firstElement();
    State startState=startVertex.state;
    SPTVertex endVertex=path.vertices.lastElement();
    State endState=endVertex.state;
    itinerary.startTime=new Date(startState.getTime());
    itinerary.endTime=new Date(endState.getTime());
    itinerary.duration=endState.getTime() - startState.getTime();
    itinerary.fare=new Fare();
    itinerary.fare.addFare(Fare.FareType.regular,Currency.getInstance("USD"),225);
    Leg leg=null;
    TraverseMode mode=null;
    Geometry geometry=null;
    String name=null;
    for (    SPTEdge edge : path.edges) {
      Edge graphEdge=edge.payload;
      TraverseMode edgeMode=graphEdge.getMode();
      double edgeTime=edge.tov.state.getTime() - edge.fromv.state.getTime();
      if (!edgeMode.isTransit() && edgeMode != TraverseMode.ALIGHTING) {
        if (edgeMode != mode || (!mode.isOnStreetNonTransit() && graphEdge.getName() != name)) {
          name=graphEdge.getName();
          if (leg != null) {
            Vertex fromv=graphEdge.getFromVertex();
            Coordinate endCoord=fromv.getCoordinate();
            leg.to=new Place(endCoord.x,endCoord.y,fromv.getName());
            leg.end=new Date(edge.tov.state.getTime());
            leg.legGeometry=PolylineEncoder.createEncodings(geometry);
            leg.duration=edge.tov.state.getTime() - leg.start.getTime();
            leg=null;
          }
          leg=new Leg();
          itinerary.addLeg(leg);
          leg.start=new Date(edge.fromv.state.getTime());
          leg.route=graphEdge.getName();
          mode=graphEdge.getMode();
          leg.mode=mode.toString();
          leg.distance=edge.getDistance();
          Vertex fromv=graphEdge.getFromVertex();
          Coordinate endCoord=fromv.getCoordinate();
          leg.from=new Place(endCoord.x,endCoord.y,fromv.getName());
        }
      }
      Geometry edgeGeometry=graphEdge.getGeometry();
      if (geometry == null) {
        geometry=edgeGeometry;
      }
 else {
        if (edgeGeometry != null) {
          geometry=geometry.union(edgeGeometry);
        }
      }
      if (edgeMode == TraverseMode.TRANSFER) {
        itinerary.transfers++;
        itinerary.walkTime+=edgeTime;
        itinerary.walkDistance+=graphEdge.getDistance();
        continue;
      }
      if (edgeMode == TraverseMode.BOARDING) {
        itinerary.waitingTime+=edgeTime;
        continue;
      }
      if (edgeMode == TraverseMode.WALK) {
        itinerary.walkTime+=edgeTime;
        itinerary.walkDistance+=graphEdge.getDistance();
      }
      if (edgeMode.isTransit()) {
        itinerary.transitTime+=edgeTime;
        mode=graphEdge.getMode();
        leg.mode=mode.toString();
        leg.route=graphEdge.getName();
      }
    }
    SPTEdge edge=path.edges.lastElement();
    Edge graphEdge=edge.payload;
    if (leg != null) {
      Vertex tov=graphEdge.getToVertex();
      Coordinate endCoord=tov.getCoordinate();
      leg.to=new Place(endCoord.x,endCoord.y,tov.getName());
      leg.end=new Date(edge.tov.state.getTime());
      leg.legGeometry=PolylineEncoder.createEncodings(geometry);
      leg.duration=edge.tov.state.getTime() - leg.start.getTime();
      leg=null;
    }
  }
  return plan;
}
