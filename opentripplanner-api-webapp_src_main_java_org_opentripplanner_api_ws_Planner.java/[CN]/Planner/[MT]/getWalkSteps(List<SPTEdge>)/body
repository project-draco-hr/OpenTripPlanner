{
  List<WalkStep> steps=new ArrayList<WalkStep>();
  WalkStep step=null;
  double lastAngle=0;
  for (  SPTEdge sptEdge : edges) {
    Edge edge=sptEdge.payload;
    String streetName=edge.getName();
    if (step == null) {
      step=new WalkStep();
      steps.add(step);
      step.streetName=streetName;
      step.lon=edge.getFromVertex().getX();
      step.lat=edge.getFromVertex().getY();
      double thisAngle=getFirstAngle(edge.getGeometry());
      step.setAbsoluteDirection(thisAngle);
    }
 else     if (!step.streetName.equals(streetName)) {
      step=new WalkStep();
      steps.add(step);
      step.streetName=streetName;
      double thisAngle=getFirstAngle(edge.getGeometry());
      step.setDirections(lastAngle,thisAngle);
      step.lon=edge.getFromVertex().getX();
      step.lat=edge.getFromVertex().getY();
      step.becomes=!multipleOptionsbefore(edge);
    }
 else {
      double thisAngle=getFirstAngle(edge.getGeometry());
      RelativeDirection direction=WalkStep.getRelativeDirection(lastAngle,thisAngle);
      if (direction != RelativeDirection.CONTINUE) {
        boolean optionsBefore=multipleOptionsbefore(edge);
        if (optionsBefore) {
          step=new WalkStep();
          steps.add(step);
          step.streetName=streetName;
          step.setDirections(lastAngle,thisAngle);
          step.stayOn=true;
          step.lon=edge.getFromVertex().getX();
          step.lat=edge.getFromVertex().getY();
        }
      }
    }
    step.distance+=edge.getDistance();
    lastAngle=getLastAngle(edge.getGeometry());
  }
  return steps;
}
