{
  List<WalkStep> steps=new ArrayList<WalkStep>();
  WalkStep step=null;
  double lastAngle=0, distance=0;
  for (  SPTEdge sptEdge : edges) {
    Edge edge=sptEdge.payload;
    EdgeNarrative edgeResult=sptEdge.narrative;
    if (edge instanceof FreeEdge) {
      continue;
    }
    Geometry geom=edgeResult.getGeometry();
    if (geom == null) {
      continue;
    }
    String streetName=edgeResult.getName();
    if (step == null) {
      step=createWalkStep(sptEdge);
      steps.add(step);
      double thisAngle=DirectionUtils.getFirstAngle(geom);
      step.setAbsoluteDirection(thisAngle);
      distance=edgeResult.getDistance();
    }
 else     if (step.streetName != streetName && (step.streetName != null && !step.streetName.equals(streetName))) {
      step=createWalkStep(sptEdge);
      steps.add(step);
      double thisAngle=DirectionUtils.getFirstAngle(geom);
      step.setDirections(lastAngle,thisAngle);
      step.becomes=!pathservice.multipleOptionsBefore(edge);
      if (edgeResult.isRoundabout()) {
        step=createWalkStep(sptEdge);
        steps.add(step);
        step.relativeDirection=RelativeDirection.CIRCLE_COUNTERCLOCKWISE;
      }
      distance=edgeResult.getDistance();
    }
 else {
      double thisAngle=DirectionUtils.getFirstAngle(geom);
      RelativeDirection direction=WalkStep.getRelativeDirection(lastAngle,thisAngle);
      if (direction == RelativeDirection.CONTINUE) {
        if (step.elevation != null) {
          String s=encodeElevationProfile(edge,distance);
          if (step.elevation.length() > 0 && s != null && s.length() > 0)           step.elevation+=",";
          step.elevation+=s;
        }
        distance+=edgeResult.getDistance();
      }
 else {
        boolean optionsBefore=pathservice.multipleOptionsBefore(edge);
        if (optionsBefore) {
          step=createWalkStep(sptEdge);
          steps.add(step);
          step.setDirections(lastAngle,thisAngle);
          step.stayOn=true;
          distance=edgeResult.getDistance();
        }
      }
    }
    step.distance+=edgeResult.getDistance();
    lastAngle=DirectionUtils.getLastAngle(geom);
  }
  return steps;
}
