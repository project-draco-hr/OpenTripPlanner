{
  Request request=new Request();
  request.setFrom(fromPlace);
  request.setTo(toPlace);
  request.setDateTime(date,time);
  if (max != null)   request.setNumItineraries(max);
  if (walk != null)   request.setWalk(walk);
  if (arriveBy != null && arriveBy)   request.setArriveBy(true);
  if (optList != null && optList.size() > 0)   request.addOptimize(optList);
  if (modeList != null && modeList.size() > 0)   request.addMode(modeList);
  request.setOutputFormat(MediaType.valueOf(of));
  List<GraphPath> paths=pathservice.plan(request.getFrom(),request.getTo(),request.getDateTime(),request.isArriveBy());
  Vector<SPTVertex> vertices=paths.get(0).vertices;
  SPTVertex tripStartVertex=vertices.firstElement();
  SPTVertex tripEndVertex=vertices.lastElement();
  Place from=new Place(tripStartVertex.getX(),tripStartVertex.getY(),request.getFrom());
  Place to=new Place(tripEndVertex.getX(),tripEndVertex.getY(),request.getTo());
  TripPlan plan=new TripPlan(from,to,request.getDateTime());
  for (  GraphPath path : paths) {
    Itinerary itinerary=new Itinerary();
    plan.addItinerary(itinerary);
    SPTVertex startVertex=path.vertices.firstElement();
    State startState=startVertex.state;
    SPTVertex endVertex=path.vertices.lastElement();
    State endState=endVertex.state;
    itinerary.startTime=new Date(startState.getTime());
    itinerary.endTime=new Date(endState.getTime());
    itinerary.duration=endState.getTime() - startState.getTime();
    itinerary.fare=new Fare();
    itinerary.fare.addFare(Fare.FareType.regular,Currency.getInstance("USD"),225);
    Leg leg=null;
    TransportationMode mode=null;
    Geometry geometry=null;
    String name=null;
    for (    SPTEdge edge : path.edges) {
      Edge graphEdge=edge.payload;
      TransportationMode edgeMode=graphEdge.getMode();
      double edgeTime=edge.tov.state.getTime() - edge.fromv.state.getTime();
      if (!edgeMode.isTransitMode() && edgeMode != TransportationMode.ALIGHTING) {
        if (edgeMode != mode || (mode != TransportationMode.WALK && graphEdge.getName() != name)) {
          name=graphEdge.getName();
          if (leg != null) {
            Vertex fromv=graphEdge.getFromVertex();
            Coordinate endCoord=fromv.getCoordinate();
            leg.to=new Place(endCoord.x,endCoord.y,fromv.getName());
            leg.end=new Date(edge.tov.state.getTime());
            leg.legGeometry=PolylineEncoder.createEncodings(geometry);
            leg.duration=edge.tov.state.getTime() - leg.start.getTime();
            leg=null;
          }
          leg=new Leg();
          itinerary.addLeg(leg);
          leg.start=new Date(edge.fromv.state.getTime());
          leg.route=graphEdge.getName();
          mode=graphEdge.getMode();
          leg.mode=mode.toString();
          leg.distance=edge.getDistance();
          Vertex fromv=graphEdge.getFromVertex();
          Coordinate endCoord=fromv.getCoordinate();
          leg.from=new Place(endCoord.x,endCoord.y,fromv.getName());
        }
      }
      Geometry edgeGeometry=graphEdge.getGeometry();
      if (geometry == null) {
        geometry=edgeGeometry;
      }
 else {
        if (edgeGeometry != null) {
          geometry=geometry.union(edgeGeometry);
        }
      }
      if (edgeMode == TransportationMode.TRANSFER) {
        itinerary.transfers++;
        itinerary.walkTime+=edgeTime;
        itinerary.walkDistance+=graphEdge.getDistance();
        continue;
      }
      if (edgeMode == TransportationMode.BOARDING) {
        itinerary.waitingTime+=edgeTime;
        continue;
      }
      if (edgeMode == TransportationMode.WALK) {
        itinerary.walkTime+=edgeTime;
        itinerary.walkDistance+=graphEdge.getDistance();
      }
      if (edgeMode.isTransitMode()) {
        itinerary.transitTime+=edgeTime;
        mode=graphEdge.getMode();
        leg.mode=mode.toString();
        leg.route=graphEdge.getName();
      }
    }
    SPTEdge edge=path.edges.lastElement();
    Edge graphEdge=edge.payload;
    if (leg != null) {
      Vertex tov=graphEdge.getToVertex();
      Coordinate endCoord=tov.getCoordinate();
      leg.to=new Place(endCoord.x,endCoord.y,tov.getName());
      leg.end=new Date(edge.tov.state.getTime());
      leg.legGeometry=PolylineEncoder.createEncodings(geometry);
      leg.duration=edge.tov.state.getTime() - leg.start.getTime();
      leg=null;
    }
  }
  Response response=new Response(request,plan);
  return response;
}
