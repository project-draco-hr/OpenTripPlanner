{
  Vertex stop_i=graph.getVertex("agency_I_depart");
  Vertex stop_k=graph.getVertex("agency_K_arrive");
  long startTime=TestUtils.dateInSeconds("America/New_York",2009,8,19,12,0,0);
  RoutingRequest options=new RoutingRequest();
  options.dateTime=startTime;
  options.setRoutingContext(graph,stop_i,stop_k);
  ShortestPathTree spt=aStar.getShortestPathTree(options);
  GraphPath path=spt.getPath(stop_k,false);
  int num_alights=0;
  for (  State s : path.states) {
    if (s.getBackEdge() instanceof PatternAlight || s.getBackEdge() instanceof Alight) {
      num_alights+=1;
    }
    if (s.getBackEdge() instanceof PatternDwell) {
      assertEquals(10 * 60,s.getTimeDeltaSec());
    }
  }
  assertEquals(1,num_alights);
  options.setArriveBy(true);
  options.setRoutingContext(graph,stop_i,stop_k);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(stop_i,false);
  num_alights=0;
  for (  State s : path.states) {
    if (s.getBackEdge() instanceof PatternAlight || s.getBackEdge() instanceof Alight) {
      num_alights+=1;
    }
    if (s.getBackEdge() instanceof PatternDwell) {
      assertEquals(10 * 60,s.getTimeDeltaSec());
    }
  }
  assertEquals(1,num_alights);
}
