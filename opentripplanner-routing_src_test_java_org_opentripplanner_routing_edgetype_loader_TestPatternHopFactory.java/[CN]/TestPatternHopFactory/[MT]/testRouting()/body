{
  Vertex stop_a=graph.getVertex("agency_A");
  Vertex stop_b=graph.getVertex("agency_B");
  Vertex stop_c=graph.getVertex("agency_C");
  Vertex stop_d=graph.getVertex("agency_D");
  Vertex stop_e=graph.getVertex("agency_E");
  TraverseOptions options=new TraverseOptions();
  options.setGtfsContext(context);
  options.minTransferTime=0;
  ShortestPathTree spt;
  GraphPath path;
  spt=AStar.getShortestPathTree(graph,stop_a.getLabel(),stop_b.getLabel(),new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis(),options);
  path=spt.getPath(stop_b,false);
  assertNotNull(path);
  assertEquals(6,path.states.size());
  spt=AStar.getShortestPathTree(graph,stop_a.getLabel(),stop_c.getLabel(),new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis(),options);
  path=spt.getPath(stop_c,false);
  assertNotNull(path);
  assertEquals(8,path.states.size());
  spt=AStar.getShortestPathTree(graph,stop_a.getLabel(),stop_d.getLabel(),new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis(),options);
  path=spt.getPath(stop_d,false);
  assertNotNull(path);
  long endTime=new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis() + 40 * 60 * 1000;
  assertEquals(endTime,path.getEndTime());
  spt=AStar.getShortestPathTree(graph,stop_a.getLabel(),stop_e.getLabel(),new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis(),options);
  path=spt.getPath(stop_e,false);
  assertNotNull(path);
  assertTrue(path.states.size() == 14);
  endTime=new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis() + 70 * 60 * 1000;
  assertEquals(endTime,path.getEndTime());
}
