{
  Vertex near_a=graph.getVertex("near_A");
  Vertex near_b=graph.getVertex("near_B");
  Vertex near_c=graph.getVertex("near_C");
  Vertex stop_d=graph.getVertex("agency_D");
  Vertex split_d=null;
  for (  Edge e : graph.getOutgoing(stop_d)) {
    if (e instanceof StreetTransitLink) {
      split_d=e.getToVertex();
    }
  }
  TraverseOptions options=new TraverseOptions(context);
  options.wheelchairAccessible=true;
  ShortestPathTree spt;
  GraphPath path;
  spt=AStar.getShortestPathTree(graph,near_a,near_b,new State(new GregorianCalendar(2009,8,18,0,0,0).getTimeInMillis()),options);
  path=spt.getPath(near_b);
  assertNotNull(path);
  spt=AStar.getShortestPathTree(graph,near_a,near_c,new State(new GregorianCalendar(2009,8,18,0,0,0).getTimeInMillis()),options);
  path=spt.getPath(near_c);
  assertNull(path);
  GregorianCalendar time=new GregorianCalendar(2009,8,18,0,0,0);
  spt=AStar.getShortestPathTree(graph,near_a,split_d,new State(time.getTimeInMillis()),options);
  time.add(Calendar.HOUR,1);
  time.add(Calendar.SECOND,1);
  path=spt.getPath(split_d);
  assertNotNull(path);
  assertEquals(time.getTimeInMillis(),path.vertices.lastElement().state.getTime());
}
