{
  Vertex near_a=graph.getVertex("near_agency_A");
  Vertex near_b=graph.getVertex("near_agency_B");
  Vertex near_c=graph.getVertex("near_agency_C");
  Vertex stop_d=graph.getVertex("agency_D");
  Vertex split_d=null;
  for (  StreetTransitLink e : filter(graph.getOutgoing(stop_d),StreetTransitLink.class)) {
    split_d=e.getToVertex();
  }
  TraverseOptions options=new TraverseOptions(context);
  options.wheelchairAccessible=true;
  ShortestPathTree spt;
  GraphPath path;
  spt=AStar.getShortestPathTree(graph,near_a,near_b,TestUtils.dateInSeconds(2009,8,18,0,0,0),options);
  path=spt.getPath(near_b,false);
  assertNotNull(path);
  spt=AStar.getShortestPathTree(graph,near_a,near_c,TestUtils.dateInSeconds(2009,8,18,0,0,0),options);
  path=spt.getPath(near_c,false);
  assertNull(path);
  GregorianCalendar time=new GregorianCalendar(2009,8,18,0,0,0);
  spt=AStar.getShortestPathTree(graph,near_a,split_d,TestUtils.toSeconds(time),options);
  time.add(Calendar.HOUR,1);
  time.add(Calendar.SECOND,1);
  path=spt.getPath(split_d,false);
  assertNotNull(path);
  assertEquals(TestUtils.toSeconds(time),path.getEndTime());
}
