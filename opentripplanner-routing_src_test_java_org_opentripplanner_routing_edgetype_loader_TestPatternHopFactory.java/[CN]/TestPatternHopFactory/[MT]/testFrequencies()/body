{
  Vertex stop_u=graph.getVertex("agency_U_depart");
  Vertex stop_v=graph.getVertex("agency_V_arrive");
  ShortestPathTree spt;
  GraphPath path;
  TraverseOptions options=new TraverseOptions(context);
  options.setModes(new TraverseModeSet("TRANSIT"));
  spt=AStar.getShortestPathTree(graph,stop_u,stop_v,new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis(),options);
  path=spt.getPath(stop_v,false);
  assertNotNull(path);
  assertEquals(4,path.states.size());
  long endTime=new GregorianCalendar(2009,8,7,6,40,0).getTimeInMillis();
  assertEquals(endTime,path.getEndTime());
  spt=AStar.getShortestPathTree(graph,stop_u.getLabel(),stop_v.getLabel(),new GregorianCalendar(2009,8,7,7,0,0).getTimeInMillis(),options);
  path=spt.getPath(stop_v,false);
  assertNotNull(path);
  assertEquals(4,path.states.size());
  endTime=new GregorianCalendar(2009,8,7,7,40,0).getTimeInMillis();
  assertEquals(endTime,path.getEndTime());
  spt=AStar.getShortestPathTree(graph,stop_u.getLabel(),stop_v.getLabel(),new GregorianCalendar(2009,8,7,14,0,0).getTimeInMillis(),options);
  path=spt.getPath(stop_v,false);
  assertNotNull(path);
  assertEquals(4,path.states.size());
  endTime=new GregorianCalendar(2009,8,7,14,40,0).getTimeInMillis();
  assertEquals(endTime,path.getEndTime());
}
