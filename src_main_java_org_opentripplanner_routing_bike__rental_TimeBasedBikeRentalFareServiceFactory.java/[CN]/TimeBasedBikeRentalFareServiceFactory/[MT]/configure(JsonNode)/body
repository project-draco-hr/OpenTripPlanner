{
  String currencyStr=config.path("currency").asText(null);
  if (currencyStr == null)   throw new IllegalArgumentException("Missing mandatory 'currency' configuration.");
  currency=Currency.getInstance(currencyStr);
  pricingBySecond=new ArrayList<>();
  for (Iterator<Map.Entry<String,JsonNode>> i=config.path("prices").fields(); i.hasNext(); ) {
    Map.Entry<String,JsonNode> kv=i.next();
    int maxTimeSec=hmToMinutes(kv.getKey()) * 60;
    int priceCent=(int)Math.round(kv.getValue().asDouble() * 100);
    pricingBySecond.add(new P2<>(maxTimeSec,priceCent));
  }
  if (pricingBySecond.isEmpty())   throw new IllegalArgumentException("Missing or empty mandatory 'prices' array.");
  Collections.sort(pricingBySecond,new Comparator<P2<Integer>>(){
    @Override public int compare(    P2<Integer> o1,    P2<Integer> o2){
      return o1.first - o2.first;
    }
  }
);
  int seconds=-1;
  int lastCost=0;
  for (  P2<Integer> bracket : pricingBySecond) {
    int maxTime=bracket.first;
    int cost=bracket.second;
    if (maxTime == seconds) {
      throw new IllegalArgumentException("Bike share pricing has two entries for " + maxTime);
    }
    if (cost < lastCost) {
      log.warn("Bike share pricing has pathological pricing; keeping the bike for a " + maxTime + "  is cheaper than keeping it for "+ seconds);
    }
    seconds=maxTime;
    lastCost=cost;
  }
}
