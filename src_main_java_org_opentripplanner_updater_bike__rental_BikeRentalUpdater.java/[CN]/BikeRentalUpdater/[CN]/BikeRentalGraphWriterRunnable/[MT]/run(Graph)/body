{
  Set<BikeRentalStation> stationSet=new HashSet<BikeRentalStation>();
  Set<String> defaultNetworks=new HashSet<String>(Arrays.asList(network));
  for (  BikeRentalStation station : stations) {
    if (station.networks == null) {
      station.networks=defaultNetworks;
    }
    service.addBikeRentalStation(station);
    stationSet.add(station);
    BikeRentalStationVertex vertex=verticesByStation.get(station);
    if (vertex == null) {
      vertex=new BikeRentalStationVertex(graph,station);
      LinkRequest request=networkLinkerLibrary.connectVertexToStreets(vertex);
      for (      Edge e : request.getEdgesAdded()) {
        graph.addTemporaryEdge(e);
      }
      verticesByStation.put(station,vertex);
      new RentABikeOnEdge(vertex,vertex,station.networks);
      new RentABikeOffEdge(vertex,vertex,station.networks);
    }
 else {
      vertex.setBikesAvailable(station.bikesAvailable);
      vertex.setSpacesAvailable(station.spacesAvailable);
    }
  }
  List<BikeRentalStation> toRemove=new ArrayList<BikeRentalStation>();
  for (  Entry<BikeRentalStation,BikeRentalStationVertex> entry : verticesByStation.entrySet()) {
    BikeRentalStation station=entry.getKey();
    if (stationSet.contains(station))     continue;
    BikeRentalStationVertex vertex=entry.getValue();
    if (graph.containsVertex(vertex)) {
      graph.removeVertexAndEdges(vertex);
    }
    toRemove.add(station);
    service.removeBikeRentalStation(station);
  }
  for (  BikeRentalStation station : toRemove) {
    verticesByStation.remove(station);
  }
}
