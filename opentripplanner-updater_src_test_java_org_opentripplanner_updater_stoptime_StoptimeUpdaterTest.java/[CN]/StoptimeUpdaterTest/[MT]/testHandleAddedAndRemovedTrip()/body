{
  AgencyAndId routeId=new AgencyAndId("agency","1");
  AgencyAndId tripId=new AgencyAndId("agency","1.A");
  AgencyAndId stop_a_id=new AgencyAndId("agency","A");
  AgencyAndId stop_b_id=new AgencyAndId("agency","B");
  AgencyAndId stop_c_id=new AgencyAndId("agency","C");
  ServiceDate today=new ServiceDate();
  Trip trip=new Trip();
  trip.setId(tripId);
  trip.setRoute(transitIndexService.getAllRoutes().get(routeId));
  List<Update> updates=new LinkedList<Update>();
  updates.add(new Update(tripId,stop_a_id,0,0 * 60 + 120,0 * 60 + 120,Status.PREDICTION,0,new ServiceDate()));
  updates.add(new Update(tripId,stop_b_id,1,10 * 60 + 120,10 * 60 + 120,Status.PREDICTION,0,new ServiceDate()));
  updates.add(new Update(tripId,stop_c_id,2,20 * 60 + 120,20 * 60 + 120,Status.PREDICTION,0,new ServiceDate()));
  tripUpdate=TripUpdate.forAddedTrip(trip,0,new ServiceDate(),updates);
  updater.run();
  TimetableResolver resolver=updater.getSnapshot(true);
  TableTripPattern pattern=transitIndexService.getTripPatternForTrip(tripId);
  RouteVariant variant=transitIndexService.getVariantForTrip(tripId);
  assertNotNull(pattern);
  assertNotNull(variant);
  Timetable forToday=resolver.resolve(pattern,today);
  Timetable schedule=resolver.resolve(pattern,null);
  assertSame(forToday,schedule);
  assertEquals(3,variant.getStops().size());
  tripUpdate=TripUpdate.forRemovedTrip(tripId,0,new ServiceDate());
  updater.run();
  pattern=transitIndexService.getTripPatternForTrip(tripId);
  variant=transitIndexService.getVariantForTrip(tripId);
  assertNull(pattern);
  assertNull(variant);
}
