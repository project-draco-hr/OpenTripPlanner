{
  if (type == Type.FORWARD || type == Type.BACKWARD) {
    assertEquals(1,steps[0].length);
  }
 else   if (type == Type.ONBOARD) {
    assertEquals(0,steps[0].length);
  }
  assertEquals(0,steps[1].length);
  assertEquals(0,steps[2].length);
  assertEquals(1,steps[3].length);
  assertEquals(0,steps[4].length);
  assertEquals(2,steps[5].length);
  assertEquals(1,steps[6].length);
  assertEquals(1,steps[7].length);
  assertEquals(0,steps[8].length);
  if (type == Type.FORWARD || type == Type.BACKWARD) {
    assertEquals(AbsoluteDirection.NORTHEAST,steps[0][0].absoluteDirection);
    assertEquals(RelativeDirection.DEPART,steps[0][0].relativeDirection);
    assertEquals(NORTHEAST,steps[0][0].angle,EPSILON);
    assertEquals("Edge 3",steps[0][0].streetName);
    assertEquals(3.0,steps[0][0].distance,0.0);
    assertFalse(steps[0][0].bogusName);
    assertFalse(steps[0][0].stayOn);
    assertEquals(0,steps[0][0].lon,0.0);
    assertEquals(0,steps[0][0].lat,0.0);
    assertNull(steps[0][0].alerts);
    assertFalse(steps[0][0].area);
    assertEquals("Ausfahrt",steps[0][0].exit);
  }
  assertEquals(AbsoluteDirection.EAST,steps[3][0].absoluteDirection);
  assertEquals(RelativeDirection.DEPART,steps[3][0].relativeDirection);
  assertEquals(EAST,steps[3][0].angle,EPSILON);
  assertEquals("Train stop arrive => Ferry stop depart",steps[3][0].streetName);
  assertEquals(7.0,steps[3][0].distance,0.0);
  assertFalse(steps[3][0].bogusName);
  assertFalse(steps[3][0].stayOn);
  assertEquals(133,steps[3][0].lon,0.0);
  assertEquals(67,steps[3][0].lat,0.0);
  assertNull(steps[3][0].alerts);
  assertFalse(steps[3][0].area);
  assertNull(steps[3][0].exit);
  assertEquals(AbsoluteDirection.EAST,steps[5][0].absoluteDirection);
  assertEquals(RelativeDirection.DEPART,steps[5][0].relativeDirection);
  assertEquals(EAST,steps[5][0].angle,EPSILON);
  assertEquals("Edge 39 / 41",steps[5][0].streetName);
  assertEquals(2.1,steps[5][0].distance,0.0);
  assertFalse(steps[5][0].bogusName);
  assertFalse(steps[5][0].stayOn);
  assertEquals(179,steps[5][0].lon,0.0);
  assertEquals(89,steps[5][0].lat,0.0);
  assertNull(steps[5][0].alerts);
  assertTrue(steps[5][0].area);
  assertNull(steps[5][0].exit);
  assertEquals(AbsoluteDirection.NORTH,steps[5][1].absoluteDirection);
  assertEquals(RelativeDirection.LEFT,steps[5][1].relativeDirection);
  assertEquals(NORTH,steps[5][1].angle,EPSILON);
  assertEquals("Edge 39 / 41",steps[5][1].streetName);
  assertEquals(1.9,steps[5][1].distance,0.0);
  assertTrue(steps[5][1].bogusName);
  assertTrue(steps[5][1].stayOn);
  assertEquals(180,steps[5][1].lon,0.0);
  assertEquals(89,steps[5][1].lat,0.0);
  assertNull(steps[5][1].alerts);
  assertFalse(steps[5][1].area);
  assertNull(steps[5][1].exit);
  assertEquals(AbsoluteDirection.SOUTH,steps[6][0].absoluteDirection);
  assertEquals(RelativeDirection.HARD_LEFT,steps[6][0].relativeDirection);
  assertEquals(SOUTH,steps[6][0].angle,EPSILON);
  assertEquals("Edge 49",steps[6][0].streetName);
  assertEquals(2.0,steps[6][0].distance,0.0);
  assertFalse(steps[6][0].bogusName);
  assertFalse(steps[6][0].stayOn);
  assertEquals(180,steps[6][0].lon,0.0);
  assertEquals(90,steps[6][0].lat,0.0);
  assertNull(steps[6][0].alerts);
  assertFalse(steps[6][0].area);
  assertNull(steps[6][0].exit);
  assertEquals(alertsExample,steps[7][0].alerts.get(0).getAlertHeaderText());
  assertEquals(AbsoluteDirection.SOUTH,steps[7][0].absoluteDirection);
  assertEquals(RelativeDirection.CONTINUE,steps[7][0].relativeDirection);
  assertEquals(SOUTH,steps[7][0].angle,EPSILON);
  assertEquals("Edge 53",steps[7][0].streetName);
  assertEquals(1.0,steps[7][0].distance,0.0);
  assertEquals(1,steps[7][0].alerts.size());
  assertFalse(steps[7][0].bogusName);
  assertFalse(steps[7][0].stayOn);
  assertEquals(90,steps[7][0].lon,0.0);
  assertEquals(90,steps[7][0].lat,0.0);
  assertFalse(steps[7][0].area);
  assertNull(steps[7][0].exit);
}
