{
  int time=serviceDay.secondsSinceMidnight(s0.getTimeSeconds());
  boolean haveBicycle=s0.getNonTransitMode() == TraverseMode.BICYCLE;
  TripTimes bestTrip=null;
  int index;
  Stop currentStop=pattern.getStop(stopIndex);
  int bestTime=boarding ? Integer.MAX_VALUE : Integer.MIN_VALUE;
  for (  TripTimes tt : tripTimes) {
    if (!serviceDay.serviceRunning(tt.serviceCode))     continue;
    if (boarding) {
      int depTime=tt.getDepartureTime(stopIndex);
      if (depTime >= time && depTime < bestTime && tt.tripAcceptable(s0,currentStop,serviceDay,haveBicycle,stopIndex,boarding)) {
        bestTrip=tt;
        bestTime=depTime;
      }
    }
 else {
      int arvTime=tt.getArrivalTime(stopIndex - 1);
      if (arvTime <= time && arvTime > bestTime && tt.tripAcceptable(s0,currentStop,serviceDay,haveBicycle,stopIndex,boarding)) {
        bestTrip=tt;
        bestTime=arvTime;
      }
    }
  }
  return bestTrip;
}
