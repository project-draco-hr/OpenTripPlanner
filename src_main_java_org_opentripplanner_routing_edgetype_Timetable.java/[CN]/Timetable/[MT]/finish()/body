{
  int nStops=pattern.stopPattern.size;
  int nHops=nStops - 1;
  bestDwellTimes=new int[nHops];
  bestRunningTimes=new int[nHops];
  Arrays.fill(bestDwellTimes,Integer.MAX_VALUE);
  Arrays.fill(bestRunningTimes,Integer.MAX_VALUE);
  for (  TripTimes tt : tripTimes) {
    for (int h=0; h < nHops; ++h) {
      int dt=tt.getDwellTime(h);
      if (bestDwellTimes[h] > dt) {
        bestDwellTimes[h]=dt;
      }
      int rt=tt.getRunningTime(h);
      if (bestRunningTimes[h] > rt) {
        bestRunningTimes[h]=rt;
      }
    }
  }
  minDepart=Integer.MAX_VALUE;
  maxArrive=Integer.MIN_VALUE;
  for (  TripTimes tt : tripTimes) {
    int depart=tt.getDepartureTime(0);
    if (minDepart > depart) {
      minDepart=depart;
    }
    int arrive=tt.getArrivalTime(nStops - 1);
    if (maxArrive < arrive) {
      maxArrive=arrive;
    }
  }
}
