{
  int nHops=pattern.getHopCount();
  int nTrips=tripTimes.size();
  bestRunningTimes=new int[nHops];
  boolean nullArrivals=false;
  if (!nullArrivals) {
    bestDwellTimes=new int[nHops];
    for (int h=1; h < nHops; ++h) {
      bestDwellTimes[h]=Integer.MAX_VALUE;
      for (int t=0; t < nTrips; ++t) {
        int dt=this.getDwellTime(h,t);
        if (bestDwellTimes[h] > dt) {
          bestDwellTimes[h]=dt;
        }
      }
    }
  }
  for (int h=0; h < nHops; ++h) {
    bestRunningTimes[h]=Integer.MAX_VALUE;
    for (int t=0; t < nTrips; ++t) {
      int rt=this.getRunningTime(h,t);
      if (bestRunningTimes[h] > rt) {
        bestRunningTimes[h]=rt;
      }
    }
  }
  minDepart=Integer.MAX_VALUE;
  maxArrive=Integer.MIN_VALUE;
  for (int t=0; t < nTrips; ++t) {
    int depart=getDepartureTime(0,t);
    int arrive=getArrivalTime(nHops - 1,t);
    if (minDepart > depart) {
      minDepart=depart;
    }
    if (maxArrive < arrive) {
      maxArrive=arrive;
    }
  }
}
