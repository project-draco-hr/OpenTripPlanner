{
  int nStops=pattern.stopPattern.size;
  int nHops=nStops - 1;
  minDwellTimes=new int[nHops];
  minRunningTimes=new int[nHops];
  Arrays.fill(minDwellTimes,Integer.MAX_VALUE);
  Arrays.fill(minRunningTimes,Integer.MAX_VALUE);
  List<TripTimes> allTripTimes=Lists.newArrayList(tripTimes);
  for (  FrequencyEntry freq : frequencyEntries)   allTripTimes.add(freq.tripTimes);
  for (  TripTimes tt : allTripTimes) {
    for (int h=0; h < nHops; ++h) {
      int dt=tt.getDwellTime(h);
      if (minDwellTimes[h] > dt) {
        minDwellTimes[h]=dt;
      }
      int rt=tt.getRunningTime(h);
      if (minRunningTimes[h] > rt) {
        minRunningTimes[h]=rt;
      }
    }
  }
  minTime=Integer.MAX_VALUE;
  maxTime=Integer.MIN_VALUE;
  for (  TripTimes tt : tripTimes) {
    minTime=Math.min(minTime,tt.getDepartureTime(0));
    maxTime=Math.max(maxTime,tt.getArrivalTime(nStops - 1));
  }
  for (  FrequencyEntry freq : frequencyEntries) {
    minTime=Math.min(minTime,freq.getMinDeparture());
    maxTime=Math.max(maxTime,freq.getMaxArrival());
  }
}
