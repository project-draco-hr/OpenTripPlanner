{
  List<Area> intersects=new ArrayList<Area>();
  Coordinate[] coordinates=new Coordinate[]{startEndpoint.getCoordinate(),endEndpoint.getCoordinate()};
  GeometryFactory geometryFactory=GeometryUtils.getGeometryFactory();
  LineString line=geometryFactory.createLineString(coordinates);
  for (  Area area : areas) {
    MultiPolygon polygon=area.toJTSMultiPolygon();
    Geometry intersection=polygon.intersection(line);
    if (intersection.getLength() > 0.000001) {
      intersects.add(area);
    }
  }
  if (intersects.size() == 0) {
    return;
  }
  if (intersects.size() == 1) {
    Area area=intersects.get(0);
    OSMWithTags areaEntity=area.parent;
    StreetTraversalPermission areaPermissions=OSMFilter.getPermissionsForEntity(areaEntity,StreetTraversalPermission.PEDESTRIAN_AND_BICYCLE);
    float carSpeed=wayPropertySet.getCarSpeedForWay(areaEntity,false);
    double length=SphericalDistanceLibrary.distance(startEndpoint.getCoordinate(),endEndpoint.getCoordinate());
    int cls=StreetEdge.CLASS_OTHERPATH;
    cls|=OSMFilter.getStreetClasses(areaEntity);
    String label="way (area) " + areaEntity.getId() + " from "+ startEndpoint.getLabel()+ " to "+ endEndpoint.getLabel();
    String name=__handler.getNameForWay(areaEntity,label);
    AreaEdge street=edgeFactory.createAreaEdge(startEndpoint,endEndpoint,line,name,length,areaPermissions,false,edgeList);
    street.setCarSpeed(carSpeed);
    if (!areaEntity.hasTag("name") && !areaEntity.hasTag("ref")) {
      street.setHasBogusName(true);
    }
    if (areaEntity.isTagFalse("wheelchair")) {
      street.setWheelchairAccessible(false);
    }
    street.setStreetClass(cls);
    edges.add(street);
    label="way (area) " + areaEntity.getId() + " from "+ endEndpoint.getLabel()+ " to "+ startEndpoint.getLabel();
    name=__handler.getNameForWay(areaEntity,label);
    AreaEdge backStreet=edgeFactory.createAreaEdge(endEndpoint,startEndpoint,(LineString)line.reverse(),name,length,areaPermissions,true,edgeList);
    backStreet.setCarSpeed(carSpeed);
    if (!areaEntity.hasTag("name") && !areaEntity.hasTag("ref")) {
      backStreet.setHasBogusName(true);
    }
    if (areaEntity.isTagFalse("wheelchair")) {
      street.setWheelchairAccessible(false);
    }
    backStreet.setStreetClass(cls);
    edges.add(backStreet);
    WayProperties wayData=wayPropertySet.getDataForWay(areaEntity);
    __handler.applyWayProperties(street,backStreet,wayData,areaEntity);
  }
 else {
    Coordinate startCoordinate=startEndpoint.getCoordinate();
    Point startPoint=geometryFactory.createPoint(startCoordinate);
    for (    Area area : intersects) {
      MultiPolygon polygon=area.toJTSMultiPolygon();
      if (!(polygon.intersects(startPoint) || polygon.getBoundary().intersects(startPoint)))       continue;
      Geometry lineParts=line.intersection(polygon);
      if (lineParts.getLength() > 0.000001) {
        Coordinate edgeCoordinate=null;
        if (lineParts instanceof MultiLineString) {
          MultiLineString mls=(MultiLineString)lineParts;
          boolean found=false;
          for (int i=0; i < mls.getNumGeometries(); ++i) {
            LineString segment=(LineString)mls.getGeometryN(i);
            if (found) {
              edgeCoordinate=segment.getEndPoint().getCoordinate();
              break;
            }
            if (segment.contains(startPoint) || segment.getBoundary().contains(startPoint)) {
              found=true;
              if (segment.getLength() > 0.000001) {
                edgeCoordinate=segment.getEndPoint().getCoordinate();
                break;
              }
            }
          }
        }
 else         if (lineParts instanceof LineString) {
          edgeCoordinate=((LineString)lineParts).getEndPoint().getCoordinate();
        }
 else {
          continue;
        }
        IntersectionVertex newEndpoint=areaBoundaryVertexForCoordinate.get(edgeCoordinate);
        if (newEndpoint == null) {
          newEndpoint=new IntersectionVertex(graph,"area splitter at " + edgeCoordinate,edgeCoordinate.x,edgeCoordinate.y);
          areaBoundaryVertexForCoordinate.put(edgeCoordinate,newEndpoint);
        }
        createSegments(fromNode,toNode,startEndpoint,newEndpoint,Arrays.asList(area),edgeList,edges);
        createSegments(fromNode,toNode,newEndpoint,endEndpoint,intersects,edgeList,edges);
        break;
      }
    }
  }
}
