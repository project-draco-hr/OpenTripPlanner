{
  if (edges.size() == 0)   return;
  TraverseMode mode;
  StreetEdge firstEdge=(StreetEdge)edges.iterator().next();
  if (firstEdge.getPermission().allows(StreetTraversalPermission.PEDESTRIAN)) {
    mode=TraverseMode.WALK;
  }
 else   if (firstEdge.getPermission().allows(StreetTraversalPermission.BICYCLE)) {
    mode=TraverseMode.BICYCLE;
  }
 else {
    mode=TraverseMode.CAR;
  }
  RoutingRequest options=new RoutingRequest(mode);
  options.setDummyRoutingContext(graph);
  GenericDijkstra search=new GenericDijkstra(options);
  search.setSkipEdgeStrategy(new ListedEdgesOnly(edges));
  Set<Edge> usedEdges=new HashSet<Edge>();
  for (  Vertex vertex : startingVertices) {
    State state=new State(vertex,options);
    ShortestPathTree spt=search.getShortestPathTree(state);
    for (    Vertex endVertex : startingVertices) {
      GraphPath path=spt.getPath(endVertex,false);
      if (path != null) {
        for (        Edge edge : path.edges) {
          usedEdges.add(edge);
        }
      }
    }
  }
  for (  Edge edge : edges) {
    if (!usedEdges.contains(edge)) {
      graph.removeEdge(edge);
    }
  }
}
