{
  Color[] palette=new Color[256];
  final int ALPHA=0x60FFFFFF;
  for (int i=0; i < 28; i++) {
    palette[i + 00]=new Color(ALPHA & Color.HSBtoRGB(0.333f,i * 0.037f,0.8f),true);
    palette[i + 30]=new Color(ALPHA & Color.HSBtoRGB(0.666f,i * 0.037f,0.8f),true);
    palette[i + 60]=new Color(ALPHA & Color.HSBtoRGB(0.144f,i * 0.037f,0.8f),true);
    palette[i + 90]=new Color(ALPHA & Color.HSBtoRGB(0.000f,i * 0.037f,0.8f),true);
    palette[i + 120]=new Color(ALPHA & Color.HSBtoRGB(0.000f,0.000f,(29 - i) * 0.0172f),true);
  }
  for (int i=28; i < 30; i++) {
    palette[i + 00]=new Color(ALPHA & Color.HSBtoRGB(0.333f,(30 - i) * 0.333f,0.8f),true);
    palette[i + 30]=new Color(ALPHA & Color.HSBtoRGB(0.666f,(30 - i) * 0.333f,0.8f),true);
    palette[i + 60]=new Color(ALPHA & Color.HSBtoRGB(0.144f,(30 - i) * 0.333f,0.8f),true);
    palette[i + 90]=new Color(ALPHA & Color.HSBtoRGB(0.000f,(30 - i) * 0.333f,0.8f),true);
    palette[i + 120]=new Color(ALPHA & Color.HSBtoRGB(0.000f,0.000f,(29 - i) * 0.0172f),true);
  }
  for (int i=150; i < palette.length; i++) {
    palette[i]=new Color(0x00000000,true);
  }
  byte[] r=new byte[256];
  byte[] g=new byte[256];
  byte[] b=new byte[256];
  byte[] a=new byte[256];
  for (int i=0; i < palette.length; i++) {
    r[i]=(byte)palette[i].getRed();
    g[i]=(byte)palette[i].getGreen();
    b[i]=(byte)palette[i].getBlue();
    a[i]=(byte)palette[i].getAlpha();
  }
  return new IndexColorModel(8,256,r,g,b,a);
}
