{
  compareItinerary(itinerary);
  compareFare(itinerary.fare);
  Leg[] legs=itinerary.legs.toArray(new Leg[9]);
  compareLegs(legs);
  WalkStep[][] steps=new WalkStep[9][0];
  for (int i=0; i < steps.length; i++) {
    steps[i]=legs[i].walkSteps.toArray(steps[i]);
  }
  compareSteps(steps);
  EncodedPolylineBean[] geometries=new EncodedPolylineBean[9];
  for (int i=0; i < geometries.length; i++) {
    geometries[i]=legs[i].legGeometry;
  }
  compareGeometries(geometries);
  Place[][] places=new Place[9][2];
  for (int i=0; i < places.length; i++) {
    if (legs[i].stop == null) {
      places[i][0]=legs[i].from;
      places[i][1]=legs[i].to;
    }
 else {
      List<Place> allStops=new ArrayList<Place>(legs[i].stop.size() + 2);
      allStops.add(legs[i].from);
      allStops.addAll(legs[i].stop);
      allStops.add(legs[i].to);
      places[i]=allStops.toArray(places[i]);
    }
  }
  comparePlaces(places);
  AgencyAndId[][] stopIds=new AgencyAndId[9][2];
  for (int i=0; i < stopIds.length; i++) {
    if (places[i].length > 2) {
      stopIds[i]=new AgencyAndId[places[i].length];
    }
    for (int j=0; j < stopIds[i].length; j++) {
      stopIds[i][j]=places[i][j].stopId;
    }
  }
  compareStopIds(stopIds);
  Double[][][][] elevations=new Double[9][2][2][2];
  for (int i=0; i < elevations.length; i++) {
    for (int j=0; j < elevations[i].length; j++) {
      if (steps[i].length <= j)       break;
      for (int k=0; k < elevations[i][j].length; k++) {
        if (steps[i][j].elevation.size() <= k)         break;
        elevations[i][j][k][0]=steps[i][j].elevation.get(k).getFirst();
        elevations[i][j][k][1]=steps[i][j].elevation.get(k).getSecond();
      }
    }
  }
  compareElevations(elevations);
}
