{
  RoutingRequest options=new RoutingRequest(new TraverseModeSet(TraverseMode.WALK,TraverseMode.BICYCLE,TraverseMode.TRANSIT));
  Graph graph=new Graph();
  ExitVertex v0=new ExitVertex(graph,"Vertex 0",0,0);
  IntersectionVertex v2=new IntersectionVertex(graph,"Vertex 2",0,0);
  IntersectionVertex v4=new IntersectionVertex(graph,"Vertex 4",1,1);
  Stop trainStopDepart=new Stop();
  Stop trainStopDwell=new Stop();
  Stop trainStopInterline=new Stop();
  Stop trainStopArrive=new Stop();
  Stop ferryStopDepart=new Stop();
  Stop ferryStopArrive=new Stop();
  trainStopDepart.setId(new AgencyAndId("Train","Depart"));
  trainStopDepart.setName("Train stop depart");
  trainStopDepart.setLon(1);
  trainStopDepart.setLat(1);
  trainStopDepart.setCode("Train depart code");
  trainStopDepart.setPlatformCode("Train depart platform");
  trainStopDepart.setZoneId("Train depart zone");
  trainStopDwell.setId(new AgencyAndId("Train","Dwell"));
  trainStopDwell.setName("Train stop dwell");
  trainStopDwell.setLon(45);
  trainStopDwell.setLat(23);
  trainStopDwell.setCode("Train dwell code");
  trainStopDwell.setPlatformCode("Train dwell platform");
  trainStopDwell.setZoneId("Train dwell zone");
  trainStopInterline.setId(new AgencyAndId("Train","Interline"));
  trainStopInterline.setName("Train stop interline");
  trainStopInterline.setLon(89);
  trainStopInterline.setLat(45);
  trainStopInterline.setCode("Train interline code");
  trainStopInterline.setPlatformCode("Train interline platform");
  trainStopInterline.setZoneId("Train interline zone");
  trainStopArrive.setId(new AgencyAndId("Train","Arrive"));
  trainStopArrive.setName("Train stop arrive");
  trainStopArrive.setLon(133);
  trainStopArrive.setLat(67);
  trainStopArrive.setCode("Train arrive code");
  trainStopArrive.setPlatformCode("Train arrive platform");
  trainStopArrive.setZoneId("Train arrive zone");
  ferryStopDepart.setId(new AgencyAndId("Ferry","Depart"));
  ferryStopDepart.setName("Ferry stop depart");
  ferryStopDepart.setLon(135);
  ferryStopDepart.setLat(67);
  ferryStopDepart.setCode("Ferry depart code");
  ferryStopDepart.setPlatformCode("Ferry depart platform");
  ferryStopDepart.setZoneId("Ferry depart zone");
  ferryStopArrive.setId(new AgencyAndId("Ferry","Arrive"));
  ferryStopArrive.setName("Ferry stop arrive");
  ferryStopArrive.setLon(179);
  ferryStopArrive.setLat(89);
  ferryStopArrive.setCode("Ferry arrive code");
  ferryStopArrive.setPlatformCode("Ferry arrive platform");
  ferryStopArrive.setZoneId("Ferry arrive zone");
  ArrayList<Stop> firstStops=new ArrayList<Stop>();
  ArrayList<Stop> secondStops=new ArrayList<Stop>();
  ArrayList<Stop> thirdStops=new ArrayList<Stop>();
  firstStops.add(trainStopDepart);
  firstStops.add(trainStopDwell);
  firstStops.add(trainStopInterline);
  secondStops.add(trainStopInterline);
  secondStops.add(trainStopArrive);
  thirdStops.add(ferryStopDepart);
  thirdStops.add(ferryStopArrive);
  Route firstRoute=new Route();
  Route secondRoute=new Route();
  Route thirdRoute=new Route();
  firstRoute.setId(new AgencyAndId("Train","A"));
  firstRoute.setShortName("A");
  firstRoute.setLongName("'A' Train");
  firstRoute.setType(2);
  firstRoute.setColor("White");
  firstRoute.setTextColor("Black");
  secondRoute.setId(new AgencyAndId("Train","B"));
  secondRoute.setShortName("B");
  secondRoute.setLongName("Another Train");
  secondRoute.setType(2);
  secondRoute.setColor("Cyan");
  secondRoute.setTextColor("Yellow");
  thirdRoute.setId(new AgencyAndId("Ferry","C"));
  thirdRoute.setShortName("C");
  thirdRoute.setLongName("Ferry Cross the Mersey");
  thirdRoute.setType(4);
  thirdRoute.setColor("Black");
  thirdRoute.setTextColor("White");
  Trip firstTrip=new Trip();
  Trip secondTrip=new Trip();
  Trip thirdTrip=new Trip();
  firstTrip.setId(new AgencyAndId("Train","A"));
  firstTrip.setTripShortName("A");
  firstTrip.setBlockId("Alock");
  firstTrip.setRoute(firstRoute);
  firstTrip.setTripBikesAllowed(2);
  firstTrip.setTripHeadsign("Street Fighting Man");
  secondTrip.setId(new AgencyAndId("Train","B"));
  secondTrip.setTripShortName("B");
  secondTrip.setBlockId("Block");
  secondTrip.setRoute(secondRoute);
  secondTrip.setTripBikesAllowed(2);
  secondTrip.setTripHeadsign("No Expectations");
  thirdTrip.setId(new AgencyAndId("Ferry","C"));
  thirdTrip.setTripShortName("C");
  thirdTrip.setBlockId("Clock");
  thirdTrip.setRoute(thirdRoute);
  thirdTrip.setTripBikesAllowed(2);
  thirdTrip.setTripHeadsign("Handsome Molly");
  StopTime trainStopDepartTime=new StopTime();
  StopTime trainStopDwellTime=new StopTime();
  StopTime trainStopInterlineFirstTime=new StopTime();
  StopTime trainStopInterlineSecondTime=new StopTime();
  StopTime trainStopArriveTime=new StopTime();
  StopTime ferryStopDepartTime=new StopTime();
  StopTime ferryStopArriveTime=new StopTime();
  trainStopDepartTime.setTrip(firstTrip);
  trainStopDepartTime.setStop(trainStopDepart);
  trainStopDepartTime.setDepartureTime(4);
  trainStopDepartTime.setPickupType(3);
  trainStopDwellTime.setTrip(firstTrip);
  trainStopDwellTime.setStop(trainStopDwell);
  trainStopDwellTime.setArrivalTime(8);
  trainStopDwellTime.setDepartureTime(12);
  trainStopInterlineFirstTime.setTrip(firstTrip);
  trainStopInterlineFirstTime.setStop(trainStopInterline);
  trainStopInterlineFirstTime.setArrivalTime(16);
  trainStopInterlineSecondTime.setTrip(secondTrip);
  trainStopInterlineSecondTime.setStop(trainStopInterline);
  trainStopInterlineSecondTime.setDepartureTime(20);
  trainStopArriveTime.setTrip(secondTrip);
  trainStopArriveTime.setStop(trainStopArrive);
  trainStopArriveTime.setArrivalTime(24);
  trainStopArriveTime.setDropOffType(2);
  ferryStopDepartTime.setTrip(thirdTrip);
  ferryStopDepartTime.setStop(ferryStopDepart);
  ferryStopDepartTime.setDepartureTime(32);
  ferryStopDepartTime.setPickupType(2);
  ferryStopArriveTime.setTrip(thirdTrip);
  ferryStopArriveTime.setStop(ferryStopArrive);
  ferryStopArriveTime.setArrivalTime(36);
  ferryStopArriveTime.setDropOffType(3);
  ArrayList<StopTime> firstStopTimes=new ArrayList<StopTime>();
  ArrayList<StopTime> secondStopTimes=new ArrayList<StopTime>();
  ArrayList<StopTime> thirdStopTimes=new ArrayList<StopTime>();
  firstStopTimes.add(trainStopDepartTime);
  firstStopTimes.add(trainStopDwellTime);
  firstStopTimes.add(trainStopInterlineFirstTime);
  secondStopTimes.add(trainStopInterlineSecondTime);
  secondStopTimes.add(trainStopArriveTime);
  thirdStopTimes.add(ferryStopDepartTime);
  thirdStopTimes.add(ferryStopArriveTime);
  ScheduledStopPattern firstStopPattern=ScheduledStopPattern.fromTrip(firstTrip,firstStopTimes);
  ScheduledStopPattern secondStopPattern=ScheduledStopPattern.fromTrip(secondTrip,secondStopTimes);
  ScheduledStopPattern thirdStopPattern=ScheduledStopPattern.fromTrip(thirdTrip,thirdStopTimes);
  TableTripPattern firstTripPattern=new TableTripPattern(firstTrip,firstStopPattern,0);
  TableTripPattern secondTripPattern=new TableTripPattern(secondTrip,secondStopPattern,1);
  TableTripPattern thirdTripPattern=new TableTripPattern(thirdTrip,thirdStopPattern,2);
  firstTripPattern.addTrip(firstTrip,firstStopTimes);
  secondTripPattern.addTrip(secondTrip,secondStopTimes);
  thirdTripPattern.addTrip(thirdTrip,thirdStopTimes);
  TransitStop v6=new TransitStop(graph,trainStopDepart);
  TransitStopDepart v8=new TransitStopDepart(graph,trainStopDepart,v6);
  PatternDepartVertex v10=new PatternDepartVertex(graph,firstTripPattern,trainStopDepartTime);
  PatternArriveVertex v12=new PatternArriveVertex(graph,firstTripPattern,trainStopDwellTime);
  PatternDepartVertex v14=new PatternDepartVertex(graph,firstTripPattern,trainStopDwellTime);
  PatternArriveVertex v16=new PatternArriveVertex(graph,firstTripPattern,trainStopInterlineFirstTime);
  PatternDepartVertex v18=new PatternDepartVertex(graph,secondTripPattern,trainStopInterlineSecondTime);
  PatternArriveVertex v20=new PatternArriveVertex(graph,secondTripPattern,trainStopArriveTime);
  TransitStop v24=new TransitStop(graph,trainStopArrive);
  TransitStopArrive v22=new TransitStopArrive(graph,trainStopArrive,v24);
  TransitStop v26=new TransitStop(graph,ferryStopDepart);
  TransitStopDepart v28=new TransitStopDepart(graph,ferryStopDepart,v26);
  PatternDepartVertex v30=new PatternDepartVertex(graph,thirdTripPattern,ferryStopDepartTime);
  PatternArriveVertex v32=new PatternArriveVertex(graph,thirdTripPattern,ferryStopArriveTime);
  TransitStop v36=new TransitStop(graph,ferryStopArrive);
  TransitStopArrive v34=new TransitStopArrive(graph,ferryStopArrive,v36);
  IntersectionVertex v38=new IntersectionVertex(graph,"Vertex 38",179,89);
  IntersectionVertex v40=new IntersectionVertex(graph,"Vertex 40",180,89);
  IntersectionVertex v42=new IntersectionVertex(graph,"Vertex 42",180,90);
  BikeRentalStation enterPickupStation=new BikeRentalStation();
  BikeRentalStation exitPickupStation=new BikeRentalStation();
  BikeRentalStation enterDropoffStation=new BikeRentalStation();
  BikeRentalStation exitDropoffStation=new BikeRentalStation();
  enterPickupStation.id="Enter pickup";
  enterPickupStation.name="Enter pickup station";
  enterPickupStation.x=180;
  enterPickupStation.y=90;
  exitPickupStation.id="Exit pickup";
  exitPickupStation.name="Exit pickup station";
  exitPickupStation.x=180;
  exitPickupStation.y=90;
  enterDropoffStation.id="Enter dropoff";
  enterDropoffStation.name="Enter dropoff station";
  enterDropoffStation.x=0;
  enterDropoffStation.y=90;
  exitDropoffStation.id="Exit dropoff";
  exitDropoffStation.name="Exit dropoff station";
  exitDropoffStation.x=0;
  exitDropoffStation.y=90;
  BikeRentalStationVertex v44=new BikeRentalStationVertex(graph,enterPickupStation);
  BikeRentalStationVertex v46=new BikeRentalStationVertex(graph,exitPickupStation);
  IntersectionVertex v48=new IntersectionVertex(graph,"Vertex 48",180,90);
  IntersectionVertex v50=new IntersectionVertex(graph,"Vertex 50",90,90);
  IntersectionVertex v52=new IntersectionVertex(graph,"Vertex 52",90,90);
  IntersectionVertex v54=new IntersectionVertex(graph,"Vertex 54",0,90);
  BikeRentalStationVertex v56=new BikeRentalStationVertex(graph,enterDropoffStation);
  BikeRentalStationVertex v58=new BikeRentalStationVertex(graph,exitDropoffStation);
  StreetLocation v60=new StreetLocation(graph,"Vertex 60",new Coordinate(0,90),"Vertex 60");
  v0.setExitName("Ausfahrt");
  v2.setFreeFlowing(true);
  v4.setFreeFlowing(true);
  v38.setFreeFlowing(true);
  v40.setFreeFlowing(true);
  v42.setFreeFlowing(true);
  v48.setFreeFlowing(true);
  v50.setFreeFlowing(true);
  v52.setFreeFlowing(true);
  v54.setFreeFlowing(true);
  PackedCoordinateSequence elevation3=new PackedCoordinateSequence.Double(new double[]{0.0,0.0,3.0,9.9},2);
  PackedCoordinateSequence elevation39=new PackedCoordinateSequence.Double(new double[]{0.0,9.9,2.1,0.1},2);
  PackedCoordinateSequence elevation41=new PackedCoordinateSequence.Double(new double[]{0.0,0.1,1.9,2.8},2);
  PackedCoordinateSequence elevation49=new PackedCoordinateSequence.Double(new double[]{0.0,2.8,2.0,2.6},2);
  PackedCoordinateSequence elevation53=new PackedCoordinateSequence.Double(new double[]{0.0,2.6,1.0,6.0},2);
  PackedCoordinateSequence coordinates3=new PackedCoordinateSequence.Double(new double[]{0,0,1,1},2);
  PackedCoordinateSequence coordinates39=new PackedCoordinateSequence.Double(new double[]{179,89,180,89},2);
  PackedCoordinateSequence coordinates41=new PackedCoordinateSequence.Double(new double[]{180,89,180,90},2);
  PackedCoordinateSequence coordinates49=new PackedCoordinateSequence.Double(new double[]{180,90,90,90},2);
  PackedCoordinateSequence coordinates53=new PackedCoordinateSequence.Double(new double[]{90,90,0,90},2);
  GeometryFactory geometryFactory=new GeometryFactory();
  LineString l3=new LineString(coordinates3,geometryFactory);
  LineString l39=new LineString(coordinates39,geometryFactory);
  LineString l41=new LineString(coordinates41,geometryFactory);
  LineString l49=new LineString(coordinates49,geometryFactory);
  LineString l53=new LineString(coordinates53,geometryFactory);
  FreeEdge e1=new FreeEdge(v0,v2);
  PlainStreetEdge e3=new PlainStreetEdge(v2,v4,l3,"Edge 3",3.0,StreetTraversalPermission.ALL,false,0);
  StreetTransitLink e5=new StreetTransitLink(v4,v6,false);
  PreBoardEdge e7=new PreBoardEdge(v6,v8);
  TransitBoardAlight e9=new TransitBoardAlight(v8,v10,0,TraverseMode.RAIL);
  PatternHop e11=new PatternHop(v10,v12,trainStopDepart,trainStopDwell,0);
  PatternDwell e13=new PatternDwell(v12,v14,1,firstTripPattern);
  PatternHop e15=new PatternHop(v14,v16,trainStopDwell,trainStopInterline,1);
  PatternInterlineDwell e17=new PatternInterlineDwell(v16,v18,secondTrip);
  PatternHop e19=new PatternHop(v18,v20,trainStopInterline,trainStopArrive,0);
  TransitBoardAlight e21=new TransitBoardAlight(v20,v22,0,TraverseMode.RAIL);
  PreAlightEdge e23=new PreAlightEdge(v22,v24);
  SimpleTransfer e25=new SimpleTransfer(v24,v26,11);
  PreBoardEdge e27=new PreBoardEdge(v26,v28);
  TransitBoardAlight e29=new TransitBoardAlight(v28,v30,0,TraverseMode.FERRY);
  PatternHop e31=new PatternHop(v30,v32,ferryStopDepart,ferryStopArrive,0);
  TransitBoardAlight e33=new TransitBoardAlight(v32,v34,0,TraverseMode.FERRY);
  PreAlightEdge e35=new PreAlightEdge(v34,v36);
  StreetTransitLink e37=new StreetTransitLink(v36,v38,true);
  AreaEdge e39=new AreaEdge(v38,v40,l39,"Edge 39 / 41",2.1,StreetTraversalPermission.ALL,false,0,new AreaEdgeList());
  PlainStreetEdge e41=new PlainStreetEdge(v40,v42,l41,"Edge 39 / 41",1.9,StreetTraversalPermission.ALL,false,0);
  StreetBikeRentalLink e43=new StreetBikeRentalLink(v42,v44);
  RentABikeOnEdge e45=new RentABikeOnEdge(v44,v46,Collections.singleton(""));
  StreetBikeRentalLink e47=new StreetBikeRentalLink(v46,v48);
  PlainStreetEdge e49=new PlainStreetEdge(v48,v50,l49,"Edge 49",2.0,StreetTraversalPermission.ALL,false,0);
  LegSwitchingEdge e51=new LegSwitchingEdge(v50,v52);
  PartialPlainStreetEdge e53=new PartialPlainStreetEdge(new PlainStreetEdge(v52,v54,l53,"Edge 53",1.0,StreetTraversalPermission.ALL,false,0),v52,v54,l53,"Edge 53",1.0,StreetTraversalPermission.ALL,false);
  StreetBikeRentalLink e55=new StreetBikeRentalLink(v54,v56);
  RentABikeOffEdge e57=new RentABikeOffEdge(v56,v58,Collections.singleton(""));
  StreetBikeRentalLink e59=new StreetBikeRentalLink(v58,v60);
  e3.setElevationProfile(elevation3,false);
  e17.addTrip(firstTrip,secondTrip,4,0,0);
  e39.setElevationProfile(elevation39,false);
  e41.setElevationProfile(elevation41,false);
  e41.setHasBogusName(true);
  e49.setElevationProfile(elevation49,false);
  e53.setElevationProfile(elevation53,false);
  e53.setNote(Alert.newSimpleAlertSet(alertsExample));
  new PlainStreetEdge(v40,new IntersectionVertex(graph,"Extra vertex",180,88),new LineString(new PackedCoordinateSequence.Double(new double[]{180,89,180,88},2),geometryFactory),"Extra edge",1.9,StreetTraversalPermission.NONE,true,0);
  HashMap<AgencyAndId,Integer> serviceId=new HashMap<AgencyAndId,Integer>(3);
  serviceId.put(firstTrip.getId(),firstTripPattern.getServiceId());
  serviceId.put(secondTrip.getId(),secondTripPattern.getServiceId());
  serviceId.put(thirdTrip.getId(),thirdTripPattern.getServiceId());
  ServiceIdToNumberService serviceIdToNumberService=new ServiceIdToNumberService(serviceId);
  CalendarServiceData calendarServiceData=new CalendarServiceDataStub(serviceId.keySet());
  CalendarServiceImpl calendarServiceImpl=new CalendarServiceImpl(calendarServiceData);
  calendarServiceData.putTimeZoneForAgencyId("Train",timeZone);
  calendarServiceData.putTimeZoneForAgencyId("Ferry",timeZone);
  Agency trainAgency=new Agency();
  Agency ferryAgency=new Agency();
  trainAgency.setId("Train");
  trainAgency.setName("John Train");
  trainAgency.setUrl("http://www.train.org/");
  ferryAgency.setId("Ferry");
  ferryAgency.setName("Brian Ferry");
  ferryAgency.setUrl("http://www.ferry.org/");
  TransitIndexServiceStub transitIndexServiceStub=new TransitIndexServiceStub(trainAgency,ferryAgency);
  FareServiceStub fareServiceStub=new FareServiceStub();
  Update ferryStopDepartUpdate=new Update(thirdTrip.getId(),ferryStopDepart.getId().getId(),0,40,40,Status.PREDICTION,0L);
  Update ferryStopArriveUpdate=new Update(thirdTrip.getId(),ferryStopArrive.getId().getId(),1,43,43,Status.PREDICTION,0L);
  ArrayList<Update> updates=new ArrayList<Update>();
  updates.add(ferryStopDepartUpdate);
  updates.add(ferryStopArriveUpdate);
  UpdateBlock updateBlock=UpdateBlock.splitByTrip(updates).get(0);
  TimetableSnapshotSource timetableSnapshotSource=new TimetableSnapshotSourceStub();
  timetableSnapshotSource.getSnapshot().update(thirdTripPattern,updateBlock);
  graph.putService(ServiceIdToNumberService.class,serviceIdToNumberService);
  graph.putService(CalendarServiceData.class,calendarServiceData);
  graph.putService(TransitIndexService.class,transitIndexServiceStub);
  graph.putService(FareService.class,fareServiceStub);
  graph.addAgency(trainAgency);
  graph.addAgency(ferryAgency);
  graph.timetableSnapshotSource=timetableSnapshotSource;
  ServiceDay serviceDay=new ServiceDay(graph,0,calendarServiceImpl,null);
  RoutingContext routingContext=new RoutingContext(options,graph,v0,v60);
  routingContext.serviceDays=new ArrayList<ServiceDay>(1);
  routingContext.serviceDays.add(serviceDay);
  options.rctx=routingContext;
  options.dateTime=0;
  options.bikeRentalPickupTime=4;
  options.bikeRentalDropoffTime=2;
  State s0=new State(options);
  State s2=e1.traverse(s0);
  State s4=e3.traverse(s2);
  State s6=e5.traverse(s4);
  State s8=e7.traverse(s6);
  State s10=e9.traverse(s8);
  State s12=e11.traverse(s10);
  State s14=e13.traverse(s12);
  State s16=e15.traverse(s14);
  State s18=e17.traverse(s16);
  State s20=e19.traverse(s18);
  State s22=e21.traverse(s20);
  State s24=e23.traverse(s22);
  State s26=e25.traverse(s24);
  State s28=e27.traverse(s26);
  State s30=e29.traverse(s28);
  State s32=e31.traverse(s30);
  State s34=e33.traverse(s32);
  State s36=e35.traverse(s34);
  State s38=e37.traverse(s36);
  State s40=e39.traverse(s38);
  State s42=e41.traverse(s40);
  State s44=e43.traverse(s42);
  State s46=e45.traverse(s44);
  State s48=e47.traverse(s46);
  State s50=e49.traverse(s48);
  State s52=e51.traverse(s50);
  State s54=e53.traverse(s52);
  State s56=e55.traverse(s54);
  State s58=e57.traverse(s56);
  State s60=e59.traverse(s58);
  return new GraphPath(s60,false);
}
