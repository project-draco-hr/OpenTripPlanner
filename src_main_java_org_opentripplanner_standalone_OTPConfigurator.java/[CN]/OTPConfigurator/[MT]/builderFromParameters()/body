{
  if (params.build == null) {
    return null;
  }
  LOG.info("Wiring up and configuring graph builder task.");
  GraphBuilderTask graphBuilder=new GraphBuilderTask();
  List<File> gtfsFiles=Lists.newArrayList();
  List<File> osmFiles=Lists.newArrayList();
  JsonNode graphConfig=null;
  JsonNode routerConfig=null;
  File demFile=null;
  File dir=params.build;
  LOG.info("Searching for graph builder input files in {}",dir);
  if (!dir.isDirectory() && dir.canRead()) {
    LOG.error("'{}' is not a readable directory.",dir);
    return null;
  }
  graphBuilder.setPath(dir);
  graphConfig=loadJson(new File(dir,GRAPH_CONFIG_FILENAME));
  GraphBuilderParameters builderParams=new GraphBuilderParameters(graphConfig);
  routerConfig=loadJson(new File(dir,ROUTER_CONFIG_FILENAME));
  RouterParameters routerParams=new RouterParameters(routerConfig);
  LOG.info(dumpFields(builderParams));
  for (  File file : dir.listFiles()) {
switch (InputFileType.forFile(file)) {
case GTFS:
      LOG.info("Found GTFS file {}",file);
    gtfsFiles.add(file);
  break;
case OSM:
LOG.info("Found OSM file {}",file);
osmFiles.add(file);
break;
case DEM:
if (!builderParams.elevation && demFile == null) {
LOG.info("Found DEM file {}",file);
demFile=file;
}
 else {
LOG.info("Skipping DEM file {}",file);
}
break;
case OTHER:
LOG.debug("Skipping file '{}'",file);
}
}
boolean hasOSM=builderParams.streets && !osmFiles.isEmpty();
boolean hasGTFS=builderParams.transit && !gtfsFiles.isEmpty();
if (!(hasOSM || hasGTFS)) {
LOG.error("Found no input files from which to build a graph in {}",params.build.toString());
return null;
}
if (hasOSM) {
List<OpenStreetMapProvider> osmProviders=Lists.newArrayList();
for (File osmFile : osmFiles) {
OpenStreetMapProvider osmProvider=new AnyFileBasedOpenStreetMapProviderImpl(osmFile);
osmProviders.add(osmProvider);
}
OpenStreetMapGraphBuilderImpl osmBuilder=new OpenStreetMapGraphBuilderImpl(osmProviders);
DefaultStreetEdgeFactory streetEdgeFactory=new DefaultStreetEdgeFactory();
streetEdgeFactory.useElevationData=builderParams.elevation || (demFile != null);
osmBuilder.edgeFactory=streetEdgeFactory;
DefaultWayPropertySetSource defaultWayPropertySetSource=new DefaultWayPropertySetSource();
osmBuilder.setDefaultWayPropertySetSource(defaultWayPropertySetSource);
osmBuilder.skipVisibility=!builderParams.areaVisibility;
graphBuilder.addGraphBuilder(osmBuilder);
graphBuilder.addGraphBuilder(new PruneFloatingIslands());
}
if (hasGTFS) {
List<GtfsBundle> gtfsBundles=Lists.newArrayList();
for (File gtfsFile : gtfsFiles) {
GtfsBundle gtfsBundle=new GtfsBundle(gtfsFile);
gtfsBundle.setTransfersTxtDefinesStationPaths(builderParams.useTransfersTxt);
if (builderParams.parentStopLinking) {
gtfsBundle.linkStopsToParentStations=true;
}
gtfsBundle.parentStationTransfers=builderParams.parentStationTransfers;
gtfsBundles.add(gtfsBundle);
}
GtfsGraphBuilderImpl gtfsBuilder=new GtfsGraphBuilderImpl(gtfsBundles);
graphBuilder.addGraphBuilder(gtfsBuilder);
if (hasOSM) {
if (builderParams.matchBusRoutesToStreets) {
graphBuilder.addGraphBuilder(new BusRouteStreetMatcher());
}
graphBuilder.addGraphBuilder(new TransitToTaggedStopsGraphBuilderImpl());
graphBuilder.addGraphBuilder(new TransitToStreetNetworkGraphBuilderImpl());
}
if (!builderParams.useTransfersTxt) {
graphBuilder.addGraphBuilder(new DirectTransferGenerator());
}
gtfsBuilder.setFareServiceFactory(new DefaultFareServiceFactory());
}
if (builderParams.elevation) {
File cacheDirectory=new File(params.cacheDirectory,"ned");
ElevationGridCoverageFactory gcf=new NEDGridCoverageFactoryImpl(cacheDirectory);
GraphBuilder elevationBuilder=new ElevationGraphBuilderImpl(gcf);
graphBuilder.addGraphBuilder(elevationBuilder);
}
 else if (demFile != null) {
ElevationGridCoverageFactory gcf=new GeotiffGridCoverageFactoryImpl(demFile);
GraphBuilder elevationBuilder=new ElevationGraphBuilderImpl(gcf);
graphBuilder.addGraphBuilder(elevationBuilder);
}
graphBuilder.serializeGraph=(!params.inMemory) || params.preFlight;
if (builderParams.htmlAnnotations) {
AnnotationsToHTML annotationsToHTML=new AnnotationsToHTML(graphBuilder.getGraph(),new File(params.build,"report.html"));
}
return graphBuilder;
}
