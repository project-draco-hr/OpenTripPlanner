{
  if (origin == null || target == null) {
    return null;
  }
  State s0;
  if (options.isArriveBy()) {
    s0=new State(time,target,options);
    target=origin;
    origin=s0.getVertex();
  }
 else {
    s0=new State(time,origin,options);
  }
  ShortestPathTree spt=createShortestPathTree(s0,options);
  options.setTransferTable(graph.getTransferTable());
  final ExtraEdgesStrategy extraEdgesStrategy=options.extraEdgesStrategy;
  Map<Vertex,List<Edge>> extraEdges=new HashMap<Vertex,List<Edge>>();
  if (options.isArriveBy()) {
    extraEdgesStrategy.addIncomingEdgesForOrigin(extraEdges,origin);
    extraEdgesStrategy.addIncomingEdgesForTarget(extraEdges,target);
  }
 else {
    extraEdgesStrategy.addOutgoingEdgesForOrigin(extraEdges,origin);
    extraEdgesStrategy.addOutgoingEdgesForTarget(extraEdges,target);
  }
  if (extraEdges.isEmpty())   extraEdges=Collections.emptyMap();
  final RemainingWeightHeuristic heuristic=options.remainingWeightHeuristic;
  double initialWeight=heuristic.computeInitialWeight(s0,target);
  spt.add(s0);
  OTPPriorityQueueFactory factory=BinHeap.FACTORY;
  OTPPriorityQueue<State> pq=factory.create(graph.getVertices().size() + extraEdges.size());
  pq.insert(s0,s0.getWeight() + initialWeight);
  options=options.clone();
  double minWalkDistance=origin.getDistanceToNearestTransitStop() + target.getDistanceToNearestTransitStop();
  options.maxWalkDistance=Math.max(options.maxWalkDistance,minWalkDistance);
  long computationStartTime=System.currentTimeMillis();
  long maxComputationTime=options.maxComputationTime;
  boolean exit=false;
  while (!pq.empty()) {
    if (exit)     break;
    if (_verbose) {
      double w=pq.peek_min_key();
      System.out.println("pq min key = " + w);
    }
    if (maxComputationTime > 0) {
      if ((System.currentTimeMillis() - computationStartTime) > maxComputationTime) {
        break;
      }
    }
    State u=pq.extract_min();
    if (!spt.visit(u))     continue;
    Vertex u_vertex=u.getVertex();
    if (_verbose)     System.out.println("   vertex " + u_vertex);
    if (_searchTerminationStrategy != null) {
      if (!_searchTerminationStrategy.shouldSearchContinue(origin,target,u,spt,options))       break;
    }
 else     if (u_vertex == target) {
      return spt;
    }
    Collection<Edge> edges=getEdgesForVertex(graph,extraEdges,u_vertex,options);
    for (    Edge edge : edges) {
      if (edge instanceof PatternBoard && u.getNumBoardings() > options.maxTransfers)       continue;
      for (State v=edge.traverse(u); v != null; v=v.getNextResult()) {
        if (_skipTraversalResultStrategy != null && _skipTraversalResultStrategy.shouldSkipTraversalResult(origin,target,u,v,spt,options))         continue;
        double remaining_w=computeRemainingWeight(heuristic,v,target,options);
        double estimate=v.getWeight() + remaining_w;
        if (_verbose) {
          System.out.println("      edge " + edge);
          System.out.println("      " + u.getWeight() + " -> "+ v.getWeight()+ "(w) + "+ remaining_w+ "(heur) = "+ estimate+ " vert = "+ v.getVertex());
        }
        if (estimate > options.maxWeight || isWorstTimeExceeded(v,options)) {
        }
 else {
          if (spt.add(v)) {
            pq.insert(v,estimate);
          }
        }
      }
    }
  }
  return spt;
}
