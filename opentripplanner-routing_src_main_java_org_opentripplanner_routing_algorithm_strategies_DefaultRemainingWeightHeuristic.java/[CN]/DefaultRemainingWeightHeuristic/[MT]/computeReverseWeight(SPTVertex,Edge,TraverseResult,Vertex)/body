{
  EdgeNarrative narrative=traverseResult.getEdgeNarrative();
  Vertex fromv=narrative.getFromVertex();
  State fromState=from.state;
  StateData fromData=fromState.getData();
  double euclidianDistance=fromv.distance(target);
  if (useTransit) {
    if (fromData.isAlightedLocal()) {
      return options.walkReluctance * euclidianDistance / options.speed;
    }
 else {
      int boardCost;
      if (edge instanceof OnBoardReverseEdge) {
        boardCost=0;
      }
 else {
        boardCost=options.boardCost;
      }
      if (euclidianDistance < target.getDistanceToNearestTransitStop()) {
        return options.walkReluctance * euclidianDistance / options.speed;
      }
 else {
        double mandatoryWalkDistance=target.getDistanceToNearestTransitStop() + fromv.getDistanceToNearestTransitStop();
        double distance=(euclidianDistance - mandatoryWalkDistance) / maxSpeed + mandatoryWalkDistance * options.walkReluctance / options.speed + boardCost;
        return distance=Math.min(distance,options.walkReluctance * euclidianDistance / options.speed);
      }
    }
  }
 else {
    return options.walkReluctance * euclidianDistance / maxSpeed;
  }
}
