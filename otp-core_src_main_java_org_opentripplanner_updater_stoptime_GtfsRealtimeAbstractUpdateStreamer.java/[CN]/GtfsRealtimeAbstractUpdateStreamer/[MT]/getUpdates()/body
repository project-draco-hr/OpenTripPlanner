{
  GtfsRealtime.FeedMessage feed=getFeedMessage();
  if (feed == null)   return null;
  GtfsRealtime.FeedHeader header=feed.getHeader();
  long feedTimestamp=header.getTimestamp();
  if (feedTimestamp < lastTimestamp) {
    LOG.info("Ignoring feed with old timestamp.");
    return Collections.emptyList();
  }
  lastTimestamp=feedTimestamp;
  List<TripUpdateList> updates=new ArrayList<TripUpdateList>();
  for (  GtfsRealtime.FeedEntity entity : feed.getEntityList()) {
    if (!entity.hasTripUpdate()) {
      continue;
    }
    GtfsRealtime.TripUpdate rtTripUpdate=entity.getTripUpdate();
    GtfsRealtime.TripDescriptor descriptor=rtTripUpdate.getTrip();
    long timestamp=rtTripUpdate.hasTimestamp() ? rtTripUpdate.getTimestamp() : feedTimestamp;
    if (seenEntities.containsKey(entity.getId())) {
      TripUpdateList processed=seenEntities.get(entity.getId());
      if (timestamp <= processed.getTimestamp())       continue;
    }
    String trip=descriptor.getTripId();
    AgencyAndId tripId=new AgencyAndId(defaultAgencyId,trip);
    ServiceDate serviceDate=new ServiceDate();
    if (descriptor.hasStartDate()) {
      try {
        Date date=ymdParser.parse(descriptor.getStartDate());
        serviceDate=new ServiceDate(date);
      }
 catch (      ParseException e) {
        LOG.warn("Failed to parse startDate in gtfs-rt feed: \n{}",entity);
        continue;
      }
    }
    GtfsRealtime.TripDescriptor.ScheduleRelationship sr;
    if (rtTripUpdate.getTrip().hasScheduleRelationship()) {
      sr=rtTripUpdate.getTrip().getScheduleRelationship();
    }
 else {
      sr=GtfsRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED;
    }
    TripUpdateList tripUpdateList=null;
switch (sr) {
case SCHEDULED:
      tripUpdateList=getUpdateForScheduledTrip(tripId,rtTripUpdate,timestamp,serviceDate);
    break;
case CANCELED:
  tripUpdateList=getUpdateForCanceledTrip(tripId,rtTripUpdate,timestamp,serviceDate);
break;
case ADDED:
tripUpdateList=getUpdateForAddedTrip(tripId,rtTripUpdate,timestamp,serviceDate);
break;
case UNSCHEDULED:
tripUpdateList=getUpdateForUnscheduledTrip(tripId,rtTripUpdate,timestamp,serviceDate);
break;
case REPLACEMENT:
tripUpdateList=getUpdateForReplacementTrip(tripId,rtTripUpdate,timestamp,serviceDate);
break;
}
if (tripUpdateList != null) {
seenEntities.put(entity.getId(),tripUpdateList);
updates.add(tripUpdateList);
}
 else {
LOG.warn("Failed to parse tripUpdate: \n{}",entity);
}
}
return updates;
}
