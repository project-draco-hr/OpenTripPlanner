{
  Graph graph;
  GtfsContext context;
  graph=ConstantsForTests.getInstance().getPortlandGraph();
  context=ConstantsForTests.getInstance().getPortlandContext();
  Vertex airport=graph.getVertex("TriMet_10579");
  TraverseOptions wo=new TraverseOptions();
  wo.setGtfsContext(context);
  GregorianCalendar startTime=new GregorianCalendar(2009,11,1,12,34,25);
  long startClock, endClock;
  ShortestPathTree spt=null;
  startClock=System.nanoTime();
  for (int i=0; i < 20; ++i) {
    spt=Dijkstra.getShortestPathTree(graph,"TriMet_6876",airport.label,new State(startTime.getTimeInMillis()),wo);
  }
  endClock=System.nanoTime();
  long dijkstraTime=endClock - startClock;
  GraphPath path=spt.getPath(airport);
  assertNotNull(path);
  startClock=System.nanoTime();
  for (int i=0; i < 20; ++i) {
    spt=AStar.getShortestPathTree(graph,"TriMet_6876",airport.label,new State(startTime.getTimeInMillis()),wo);
  }
  endClock=System.nanoTime();
  long aStarTime=endClock - startClock;
  path=spt.getPath(airport);
  assertNotNull(path);
  System.out.println("A* took" + aStarTime / 1000000000.0);
  assertTrue(dijkstraTime >= aStarTime);
}
