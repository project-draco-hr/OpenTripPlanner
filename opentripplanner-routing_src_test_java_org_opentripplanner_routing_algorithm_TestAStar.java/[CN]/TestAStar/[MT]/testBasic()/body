{
  GtfsContext context=GtfsLibrary.readGtfs(new File(ConstantsForTests.CALTRAIN_GTFS));
  TraverseOptions options=new TraverseOptions();
  options.setGtfsContext(context);
  Graph gg=new Graph();
  GTFSPatternHopFactory factory=new GTFSPatternHopFactory(context);
  factory.run(gg);
  ShortestPathTree spt;
  GraphPath path=null;
  long startTime=new GregorianCalendar(2009,8,7,12,0,0).getTimeInMillis();
  spt=AStar.getShortestPathTree(gg,"Caltrain_Millbrae Caltrain","Caltrain_Mountain View Caltrain",new State(startTime),options);
  path=spt.getPath(gg.getVertex("Caltrain_Mountain View Caltrain"));
  long endTime=new GregorianCalendar(2009,8,7,13,29).getTimeInMillis();
  assertEquals(path.vertices.lastElement().state.getTime(),endTime);
  options.back=true;
  spt=AStar.getShortestPathTreeBack(gg,"Caltrain_Millbrae Caltrain","Caltrain_Mountain View Caltrain",new State(endTime),options);
  path=spt.getPath(gg.getVertex("Caltrain_Millbrae Caltrain"));
  long expectedStartTime=new GregorianCalendar(2009,8,7,12,39).getTimeInMillis();
  path.reverse();
  SPTVertex start=path.vertices.firstElement();
  assertEquals(start.state.getTime(),expectedStartTime);
  assertEquals(start,path.edges.firstElement().getFromVertex());
  assertEquals(start.mirror,path.edges.firstElement().payload.getFromVertex());
}
