{
  assertEquals(2,places[0].length);
  assertEquals(3,places[1].length);
  assertEquals(2,places[2].length);
  assertEquals(2,places[3].length);
  assertEquals(2,places[4].length);
  assertEquals(2,places[5].length);
  assertEquals(2,places[6].length);
  assertEquals(2,places[7].length);
  assertEquals(2,places[8].length);
  if (type == Type.FORWARD || type == Type.BACKWARD) {
    assertEquals("Vertex 0",places[0][0].name);
    assertEquals(0,places[0][0].lon,0.0);
    assertEquals(0,places[0][0].lat,0.0);
    assertNull(places[0][0].stopIndex);
    assertNull(places[0][0].stopCode);
    assertNull(places[0][0].platformCode);
    assertNull(places[0][0].zoneId);
    assertNull(places[0][0].orig);
    assertNull(places[0][0].arrival);
    assertEquals(0L,places[0][0].departure.getTimeInMillis());
    assertEquals("Train stop depart",places[0][1].name);
    assertEquals(1,places[0][1].lon,0.0);
    assertEquals(1,places[0][1].lat,0.0);
    assertNull(places[0][1].stopIndex);
    assertNull(places[0][1].stopCode);
    assertNull(places[0][1].platformCode);
    assertNull(places[0][1].zoneId);
    assertNull(places[0][1].orig);
    assertEquals(3000L,places[0][1].arrival.getTimeInMillis());
    assertEquals(4000L,places[0][1].departure.getTimeInMillis());
    assertEquals("Train stop depart",places[1][0].name);
    assertEquals(1,places[1][0].lon,0.0);
    assertEquals(1,places[1][0].lat,0.0);
    assertEquals(0,places[1][0].stopIndex.intValue());
    assertEquals("Train depart code",places[1][0].stopCode);
    assertEquals("Train depart platform",places[1][0].platformCode);
    assertEquals("Train depart zone",places[1][0].zoneId);
    assertNull(places[1][0].orig);
    assertEquals(3000L,places[1][0].arrival.getTimeInMillis());
    assertEquals(4000L,places[1][0].departure.getTimeInMillis());
  }
 else   if (type == Type.ONBOARD) {
    assertNull(places[0][0]);
    assertNull(places[0][1]);
    assertEquals("Onboard",places[1][0].name);
    assertEquals(23,places[1][0].lon,0.0);
    assertEquals(12,places[1][0].lat,0.0);
    assertNull(places[1][0].stopIndex);
    assertNull(places[1][0].stopCode);
    assertNull(places[1][0].platformCode);
    assertNull(places[1][0].zoneId);
    assertNull(places[1][0].orig);
    assertNull(places[1][0].arrival);
    assertEquals(6000L,places[1][0].departure.getTimeInMillis());
  }
  assertEquals("Train stop dwell",places[1][1].name);
  assertEquals(45,places[1][1].lon,0.0);
  assertEquals(23,places[1][1].lat,0.0);
  assertEquals(1,places[1][1].stopIndex.intValue());
  assertEquals("Train dwell code",places[1][1].stopCode);
  assertEquals("Train dwell platform",places[1][1].platformCode);
  assertEquals("Train dwell zone",places[1][1].zoneId);
  assertNull(places[1][1].orig);
  assertEquals(8000L,places[1][1].arrival.getTimeInMillis());
  assertEquals(12000L,places[1][1].departure.getTimeInMillis());
  assertEquals("Train stop interline",places[1][2].name);
  assertEquals(89,places[1][2].lon,0.0);
  assertEquals(45,places[1][2].lat,0.0);
  assertEquals(2,places[1][2].stopIndex.intValue());
  assertEquals("Train interline code",places[1][2].stopCode);
  assertEquals("Train interline platform",places[1][2].platformCode);
  assertEquals("Train interline zone",places[1][2].zoneId);
  assertNull(places[1][2].orig);
  assertEquals(16000L,places[1][2].arrival.getTimeInMillis());
  assertEquals(20000L,places[1][2].departure.getTimeInMillis());
  assertEquals("Train stop interline",places[2][0].name);
  assertEquals(89,places[2][0].lon,0.0);
  assertEquals(45,places[2][0].lat,0.0);
  assertEquals(0,places[2][0].stopIndex.intValue());
  assertEquals("Train interline code",places[2][0].stopCode);
  assertEquals("Train interline platform",places[2][0].platformCode);
  assertEquals("Train interline zone",places[2][0].zoneId);
  assertNull(places[2][0].orig);
  assertEquals(16000L,places[2][0].arrival.getTimeInMillis());
  assertEquals(20000L,places[2][0].departure.getTimeInMillis());
  assertEquals("Train stop arrive",places[2][1].name);
  assertEquals(133,places[2][1].lon,0.0);
  assertEquals(67,places[2][1].lat,0.0);
  assertEquals(1,places[2][1].stopIndex.intValue());
  assertEquals("Train arrive code",places[2][1].stopCode);
  assertEquals("Train arrive platform",places[2][1].platformCode);
  assertEquals("Train arrive zone",places[2][1].zoneId);
  assertNull(places[2][1].orig);
  assertEquals(24000L,places[2][1].arrival.getTimeInMillis());
  if (type == Type.FORWARD || type == Type.ONBOARD) {
    assertEquals(24000L,places[2][1].departure.getTimeInMillis());
  }
 else   if (type == Type.BACKWARD) {
    assertEquals(32000L,places[2][1].departure.getTimeInMillis());
  }
  assertEquals("Train stop arrive",places[3][0].name);
  assertEquals(133,places[3][0].lon,0.0);
  assertEquals(67,places[3][0].lat,0.0);
  assertNull(places[3][0].stopIndex);
  assertNull(places[3][0].stopCode);
  assertNull(places[3][0].platformCode);
  assertNull(places[3][0].zoneId);
  assertNull(places[3][0].orig);
  assertEquals(24000L,places[3][0].arrival.getTimeInMillis());
  if (type == Type.FORWARD || type == Type.ONBOARD) {
    assertEquals(24000L,places[3][0].departure.getTimeInMillis());
  }
 else   if (type == Type.BACKWARD) {
    assertEquals(32000L,places[3][0].departure.getTimeInMillis());
  }
  assertEquals("Ferry stop depart",places[3][1].name);
  assertEquals(135,places[3][1].lon,0.0);
  assertEquals(67,places[3][1].lat,0.0);
  assertNull(places[3][1].stopIndex);
  assertNull(places[3][1].stopCode);
  assertNull(places[3][1].platformCode);
  assertNull(places[3][1].zoneId);
  assertNull(places[3][1].orig);
  if (type == Type.FORWARD || type == Type.ONBOARD) {
    assertEquals(32000L,places[3][1].arrival.getTimeInMillis());
  }
 else   if (type == Type.BACKWARD) {
    assertEquals(40000L,places[3][1].arrival.getTimeInMillis());
  }
  assertEquals(40000L,places[3][1].departure.getTimeInMillis());
  assertEquals("Ferry stop depart",places[4][0].name);
  assertEquals(135,places[4][0].lon,0.0);
  assertEquals(67,places[4][0].lat,0.0);
  assertEquals(0,places[4][0].stopIndex.intValue());
  assertEquals("Ferry depart code",places[4][0].stopCode);
  assertEquals("Ferry depart platform",places[4][0].platformCode);
  assertEquals("Ferry depart zone",places[4][0].zoneId);
  assertNull(places[4][0].orig);
  if (type == Type.FORWARD || type == Type.ONBOARD) {
    assertEquals(32000L,places[4][0].arrival.getTimeInMillis());
  }
 else   if (type == Type.BACKWARD) {
    assertEquals(40000L,places[4][0].arrival.getTimeInMillis());
  }
  assertEquals(40000L,places[4][0].departure.getTimeInMillis());
  assertEquals("Ferry stop arrive",places[4][1].name);
  assertEquals(179,places[4][1].lon,0.0);
  assertEquals(89,places[4][1].lat,0.0);
  assertEquals(1,places[4][1].stopIndex.intValue());
  assertEquals("Ferry arrive code",places[4][1].stopCode);
  assertEquals("Ferry arrive platform",places[4][1].platformCode);
  assertEquals("Ferry arrive zone",places[4][1].zoneId);
  assertNull(places[4][1].orig);
  assertEquals(43000L,places[4][1].arrival.getTimeInMillis());
  assertEquals(44000L,places[4][1].departure.getTimeInMillis());
  assertEquals("Ferry stop arrive",places[5][0].name);
  assertEquals(179,places[5][0].lon,0.0);
  assertEquals(89,places[5][0].lat,0.0);
  assertNull(places[5][0].stopIndex);
  assertNull(places[5][0].stopCode);
  assertNull(places[5][0].platformCode);
  assertNull(places[5][0].zoneId);
  assertNull(places[5][0].orig);
  assertEquals(43000L,places[5][0].arrival.getTimeInMillis());
  assertEquals(44000L,places[5][0].departure.getTimeInMillis());
  assertEquals("Exit pickup station",places[5][1].name);
  assertEquals(180,places[5][1].lon,0.0);
  assertEquals(90,places[5][1].lat,0.0);
  assertNull(places[5][1].stopIndex);
  assertNull(places[5][1].stopCode);
  assertNull(places[5][1].platformCode);
  assertNull(places[5][1].zoneId);
  assertNull(places[5][1].orig);
  assertEquals(53000L,places[5][1].arrival.getTimeInMillis());
  assertEquals(53000L,places[5][1].departure.getTimeInMillis());
  assertEquals("Exit pickup station",places[6][0].name);
  assertEquals(180,places[6][0].lon,0.0);
  assertEquals(90,places[6][0].lat,0.0);
  assertNull(places[6][0].stopIndex);
  assertNull(places[6][0].stopCode);
  assertNull(places[6][0].platformCode);
  assertNull(places[6][0].zoneId);
  assertNull(places[6][0].orig);
  assertEquals(53000L,places[6][0].arrival.getTimeInMillis());
  assertEquals(53000L,places[6][0].departure.getTimeInMillis());
  assertEquals("Vertex 50",places[6][1].name);
  assertEquals(90,places[6][1].lon,0.0);
  assertEquals(90,places[6][1].lat,0.0);
  assertNull(places[6][1].stopIndex);
  assertNull(places[6][1].stopCode);
  assertNull(places[6][1].platformCode);
  assertNull(places[6][1].zoneId);
  assertNull(places[6][1].orig);
  assertEquals(55000L,places[6][1].arrival.getTimeInMillis());
  assertEquals(55000L,places[6][1].departure.getTimeInMillis());
  assertEquals("Vertex 52",places[7][0].name);
  assertEquals(90,places[7][0].lon,0.0);
  assertEquals(90,places[7][0].lat,0.0);
  assertNull(places[7][0].stopIndex);
  assertNull(places[7][0].stopCode);
  assertNull(places[7][0].platformCode);
  assertNull(places[7][0].zoneId);
  assertNull(places[7][0].orig);
  assertEquals(55000L,places[7][0].arrival.getTimeInMillis());
  assertEquals(55000L,places[7][0].departure.getTimeInMillis());
  assertEquals("Enter dropoff station",places[7][1].name);
  assertEquals(0,places[7][1].lon,0.0);
  assertEquals(90,places[7][1].lat,0.0);
  assertNull(places[7][1].stopIndex);
  assertNull(places[7][1].stopCode);
  assertNull(places[7][1].platformCode);
  assertNull(places[7][1].zoneId);
  assertNull(places[7][1].orig);
  assertEquals(57000L,places[7][1].arrival.getTimeInMillis());
  assertEquals(57000L,places[7][1].departure.getTimeInMillis());
  assertEquals("Enter dropoff station",places[8][0].name);
  assertEquals(0,places[8][0].lon,0.0);
  assertEquals(90,places[8][0].lat,0.0);
  assertNull(places[8][0].stopIndex);
  assertNull(places[8][0].stopCode);
  assertNull(places[8][0].platformCode);
  assertNull(places[8][0].zoneId);
  assertNull(places[8][0].orig);
  assertEquals(57000L,places[8][0].arrival.getTimeInMillis());
  assertEquals(57000L,places[8][0].departure.getTimeInMillis());
  assertEquals("Vertex 60",places[8][1].name);
  assertEquals(0,places[8][1].lon,0.0);
  assertEquals(90,places[8][1].lat,0.0);
  assertNull(places[8][1].stopIndex);
  assertNull(places[8][1].stopCode);
  assertNull(places[8][1].platformCode);
  assertNull(places[8][1].zoneId);
  assertNull(places[8][1].orig);
  assertEquals(60000L,places[8][1].arrival.getTimeInMillis());
  assertNull(places[8][1].departure);
}
