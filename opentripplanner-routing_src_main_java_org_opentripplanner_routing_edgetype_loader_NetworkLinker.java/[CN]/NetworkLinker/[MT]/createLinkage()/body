{
  _log.debug("constructing index...");
  StreetVertexIndexServiceImpl index=new StreetVertexIndexServiceImpl(graph);
  index.setup();
  _log.debug("creating linkages...");
  int i=0;
  ArrayList<Vertex> vertices=new ArrayList<Vertex>(graph.getVertices());
  for (  Vertex v : vertices) {
    if (i % 500 == 0)     _log.debug("vertices=" + i + "/"+ vertices.size());
    i++;
    if (v instanceof TransitStop) {
      Vertex nearestIntersection=index.getClosestVertex(v.getCoordinate(),false);
      if (nearestIntersection != null) {
        if (nearestIntersection instanceof StreetLocation) {
          ((StreetLocation)nearestIntersection).reify(graph);
        }
 else         if (nearestIntersection instanceof OneStreetVertex) {
          OneStreetVertex osvertex=((OneStreetVertex)nearestIntersection);
          GenericVertex newV=new GenericVertex(nearestIntersection.getLabel() + " approach",nearestIntersection.getX(),nearestIntersection.getY());
          Street approach=new Street(nearestIntersection,newV,0);
          Street approachBack=new Street(newV,nearestIntersection,0);
          osvertex.inStreet.setToVertex(newV);
          osvertex.outStreet.setFromVertex(newV);
          osvertex.inStreet=approach;
          osvertex.outStreet=approachBack;
          nearestIntersection=newV;
          graph.addVertex(newV);
        }
        TransitStop ts=(TransitStop)v;
        boolean wheelchairAccessible=ts.hasWheelchairEntrance();
        graph.addEdge(new StreetTransitLink(nearestIntersection,v,wheelchairAccessible));
        graph.addEdge(new StreetTransitLink(v,nearestIntersection,wheelchairAccessible));
      }
    }
  }
}
