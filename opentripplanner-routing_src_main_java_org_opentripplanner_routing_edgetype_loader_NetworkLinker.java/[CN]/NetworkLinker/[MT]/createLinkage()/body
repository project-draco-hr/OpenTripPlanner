{
  _log.debug("creating linkages...");
  int i=0;
  ArrayList<Vertex> vertices=new ArrayList<Vertex>(graph.getVertices());
  for (  Vertex gv : vertices) {
    Vertex v=gv;
    if (i % 100000 == 0)     _log.debug("vertices=" + i + "/"+ vertices.size());
    i++;
    if (v instanceof TransitStop) {
      TransitStop ts=(TransitStop)v;
      if (!ts.isEntrance()) {
        boolean hasEntrance=false;
        for (        Edge e : gv.getOutgoing()) {
          if (e instanceof PathwayEdge) {
            hasEntrance=true;
            break;
          }
        }
        if (hasEntrance) {
          continue;
        }
      }
      boolean wheelchairAccessible=ts.hasWheelchairEntrance();
      if (!networkLinkerLibrary.connectVertexToStreets(v,wheelchairAccessible)) {
        _log.warn("Stop " + ts + " not near any streets; it will not be usable");
      }
    }
  }
  networkLinkerLibrary.addAllReplacementEdgesToGraph();
  networkLinkerLibrary.markLocalStops();
  FindMaxWalkDistances.find(graph);
}
