{
  _log.debug("constructing index...");
  StreetVertexIndexServiceImpl index=new StreetVertexIndexServiceImpl(graph);
  index.setup_modifiable();
  _log.debug("creating linkages...");
  int i=0;
  ArrayList<GraphVertex> vertices=new ArrayList<GraphVertex>(graph.getVertices());
  for (  GraphVertex gv : vertices) {
    Vertex v=gv.vertex;
    if (i % 500 == 0)     _log.debug("vertices=" + i + "/"+ vertices.size());
    i++;
    if (v instanceof TransitStop) {
      TransitStop ts=(TransitStop)v;
      if (!ts.isEntrance()) {
        boolean hasEntrance=false;
        for (        Edge e : gv.getOutgoing()) {
          if (e instanceof PathwayEdge) {
            hasEntrance=true;
            break;
          }
        }
        if (hasEntrance) {
          continue;
        }
      }
      Vertex nearestIntersection=index.getClosestVertex(graph,v.getCoordinate(),false,false,null);
      if (nearestIntersection != null) {
        if (nearestIntersection instanceof StreetLocation) {
          StreetLocation streetLocation=(StreetLocation)nearestIntersection;
          streetLocation.reify(graph);
          index.reified(streetLocation);
        }
        boolean wheelchairAccessible=ts.hasWheelchairEntrance();
        graph.addEdge(new StreetTransitLink(nearestIntersection,v,wheelchairAccessible));
        graph.addEdge(new StreetTransitLink(v,nearestIntersection,wheelchairAccessible));
      }
    }
  }
}
