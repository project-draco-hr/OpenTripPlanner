{
  _log.debug("creating linkages...");
  ArrayList<Vertex> vertices=new ArrayList<Vertex>();
  vertices.addAll(graph.getVertices());
  for (  TransitStop ts : IterableLibrary.filter(vertices,TransitStop.class)) {
    if (ts.isEntrance() || !ts.hasEntrances()) {
      boolean wheelchairAccessible=ts.hasWheelchairEntrance();
      if (!networkLinkerLibrary.connectVertexToStreets(ts,wheelchairAccessible)) {
        _log.warn(GraphBuilderAnnotation.register(graph,Variety.STOP_UNLINKED,ts));
      }
    }
  }
  networkLinkerLibrary.markLocalStops();
  FindMaxWalkDistances.find(graph);
  _log.debug("Linking bike rental stations...");
  for (  BikeRentalStationVertex brsv : IterableLibrary.filter(vertices,BikeRentalStationVertex.class)) {
    if (!networkLinkerLibrary.connectVertexToStreets(brsv)) {
      _log.warn(GraphBuilderAnnotation.register(graph,Variety.BIKE_RENTAL_STATION_UNLINKED,brsv));
    }
  }
}
