{
  RaptorData data=new RaptorData();
  TransitIndexService transitIndex=graph.getService(TransitIndexService.class);
  int nTotalStops=0;
  for (  Vertex v : graph.getVertices()) {
    if (v instanceof TransitStop) {
      nTotalStops++;
    }
  }
  data.routesForStop=new List[nTotalStops];
  data.stops=new RaptorStop[nTotalStops];
  for (  String agency : transitIndex.getAllAgencies()) {
    for (    RouteVariant variant : transitIndex.getVariantsForAgency(agency)) {
      ArrayList<Stop> variantStops=variant.getStops();
      final int nStops=variantStops.size();
      int nPatterns=variant.getSegments().size() / nStops;
      RaptorRoute route=new RaptorRoute(nStops,nPatterns);
      data.routes.add(route);
      for (int i=0; i < nStops; ++i) {
        final Stop stop=variantStops.get(i);
        RaptorStop raptorStop=makeRaptorStop(data,stop);
        route.stops[i]=raptorStop;
        if (data.routesForStop[raptorStop.index] == null)         data.routesForStop[raptorStop.index]=new ArrayList<RaptorRoute>();
        data.routesForStop[raptorStop.index].add(route);
      }
      List<RouteSegment> segments=variant.getSegments();
      Collections.sort(segments,new RouteSegmentComparator());
      int stop=0;
      int pattern=0;
      for (      RouteSegment segment : segments) {
        if (stop != nStops - 1) {
          for (          Edge e : segment.board.getFromVertex().getIncoming()) {
            if (e instanceof PreBoardEdge) {
              route.stops[stop].stopVertex=(TransitStop)e.getFromVertex();
            }
          }
          route.boards[stop][pattern]=(PatternBoard)segment.board;
        }
        if (stop != 0) {
          for (          Edge e : segment.alight.getToVertex().getOutgoing()) {
            if (e instanceof PreAlightEdge) {
              route.stops[stop].stopVertex=(TransitStop)e.getToVertex();
            }
          }
          route.alights[stop - 1][pattern]=(PatternAlight)segment.alight;
        }
        if (++pattern == nPatterns) {
          pattern=0;
          stop++;
        }
      }
      if (stop != nStops || pattern != 0) {
        throw new RuntimeException("Wrong number of segments");
      }
    }
  }
  data.stops=Arrays.copyOfRange(data.stops,0,data.raptorStopsForStopId.size());
  nTotalStops=data.stops.length;
  MaxTransitRegions regions=makeMaxTransitRegions(graph,data);
  data.maxTransitRegions=regions;
  graph.putService(RaptorDataService.class,new RaptorDataService(data));
}
