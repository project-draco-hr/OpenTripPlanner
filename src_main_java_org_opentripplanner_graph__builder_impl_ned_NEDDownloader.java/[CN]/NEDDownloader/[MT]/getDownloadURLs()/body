{
  List<URL> urls=new ArrayList<URL>();
  List<String> payloads=getValidateElements();
  log.info("Getting urls from request validation service");
  String RTendpointURL="http://extract.cr.usgs.gov/requestValidationService/services/RequestValidationService";
  try {
    int nd=0;
    for (    String payload : payloads) {
      sleep(2000);
      Service RTservice=new Service();
      Call RTcall=(Call)RTservice.createCall();
      RTcall.setTargetEndpointAddress(new java.net.URL(RTendpointURL));
      RTcall.setOperationName(new QName("edc.usgs.gov","processAOI"));
      String response=(String)RTcall.invoke(new Object[]{payload});
      Document doc=stringToDoc(response);
      XPathExpression expr=makeXPathExpression("//ns1:processAOIReturn/text()");
      String xml=expr.evaluate(doc);
      if (!xml.equals("")) {
        doc=stringToDoc(xml);
      }
      expr=makeXPathExpression("//PIECE/DOWNLOAD_URL");
      NodeList nodes=(NodeList)expr.evaluate(doc,XPathConstants.NODESET);
      if (nodes.getLength() > 1) {
        log.debug("One of our NED tiles requires more than one tile from the server.  This is slightly inefficient, and sort of yucky.");
      }
      for (int i=0; i < nodes.getLength(); ++i) {
        Node node=nodes.item(i);
        String urlString=node.getTextContent().trim();
        log.info("Getting URL {}/{}",++nd,payloads.size());
        log.debug("Adding NED URL: " + urlString);
        urlString=urlString.replaceAll(" ","+");
        URL url=new URL(urlString);
        urls.add(url);
      }
    }
    return urls;
  }
 catch (  Exception e) {
    throw new RuntimeException("Error getting data from USGS Request Validation Server",e);
  }
}
