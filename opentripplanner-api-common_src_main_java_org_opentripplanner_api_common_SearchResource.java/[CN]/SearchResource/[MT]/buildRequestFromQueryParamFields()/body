{
  TraverseOptions request=new TraverseOptions();
  request.setRouterId(routerId);
  request.setFrom(fromPlace);
  request.setTo(toPlace);
  if (date == null && time != null) {
    LOG.debug("parsing ISO datetime {}",time);
    try {
      request.setDateTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar(time).toGregorianCalendar().getTime());
    }
 catch (    DatatypeConfigurationException e) {
      request.setDateTime(date,time);
    }
  }
 else {
    request.setDateTime(date,time);
  }
  request.setWheelchair(wheelchair);
  if (numItineraries != null) {
    request.setNumItineraries(numItineraries);
  }
  if (maxWalkDistance != null) {
    request.setMaxWalkDistance(maxWalkDistance);
  }
  if (walkSpeed != null) {
    request.setSpeed(walkSpeed);
  }
  if (triangleSafetyFactor != null || triangleSlopeFactor != null || triangleTimeFactor != null) {
    if (triangleSafetyFactor == null || triangleSlopeFactor == null || triangleTimeFactor == null) {
      throw new ParameterException(Message.UNDERSPECIFIED_TRIANGLE);
    }
    if (optimize == null) {
      optimize=OptimizeType.TRIANGLE;
    }
    if (optimize != OptimizeType.TRIANGLE) {
      throw new ParameterException(Message.TRIANGLE_OPTIMIZE_TYPE_NOT_SET);
    }
    if (Math.abs(triangleSafetyFactor + triangleSlopeFactor + triangleTimeFactor - 1) > Math.ulp(1) * 3) {
      throw new ParameterException(Message.TRIANGLE_NOT_AFFINE);
    }
    request.setTriangleSafetyFactor(triangleSafetyFactor);
    request.setTriangleSlopeFactor(triangleSlopeFactor);
    request.setTriangleTimeFactor(triangleTimeFactor);
  }
 else   if (optimize == OptimizeType.TRIANGLE) {
    throw new ParameterException(Message.TRIANGLE_VALUES_NOT_SET);
  }
  if (arriveBy != null && arriveBy) {
    request.setArriveBy(true);
  }
  if (showIntermediateStops != null && showIntermediateStops) {
    request.setShowIntermediateStops(true);
  }
  if (intermediatePlaces != null && intermediatePlaces.size() > 0 && !intermediatePlaces.get(0).equals("")) {
    request.setIntermediatePlaces(intermediatePlaces);
  }
  if (intermediatePlacesOrdered != null) {
    request.setIntermediatePlacesOrdered(intermediatePlacesOrdered);
  }
  if (preferredRoutes != null && !preferredRoutes.equals("")) {
    request.setPreferredRoutes(preferredRoutes);
  }
  if (unpreferredRoutes != null && !unpreferredRoutes.equals("")) {
    request.setUnpreferredRoutes(unpreferredRoutes);
  }
  if (bannedRoutes != null && !bannedRoutes.equals("")) {
    request.setBannedRoutes(bannedRoutes);
  }
  if (optimize == OptimizeType.TRANSFERS) {
    optimize=OptimizeType.QUICK;
    transferPenalty+=1800;
  }
  if (intermediatePlaces != null && intermediatePlacesOrdered && request.getModes().isTransit()) {
    throw new UnsupportedOperationException("TSP is not supported for transit trips");
  }
  request.setTransferPenalty(transferPenalty);
  request.setOptimize(optimize);
  request.setModes(modes);
  request.setMinTransferTime(minTransferTime);
  if (maxTransfers != null)   request.setMaxTransfers(maxTransfers);
  return request;
}
