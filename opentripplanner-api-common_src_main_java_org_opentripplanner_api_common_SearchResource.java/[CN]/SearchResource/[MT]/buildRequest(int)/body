{
  TraverseOptions request=new TraverseOptions();
  request.setRouterId(get(routerId,n));
  request.setFrom(get(fromPlace,n));
  request.setTo(get(toPlace,n));
  if (get(date,n) == null && get(time,n) != null) {
    LOG.debug("parsing ISO datetime {}",get(time,n));
    try {
      request.setDateTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar(get(time,n)).toGregorianCalendar().getTime());
    }
 catch (    DatatypeConfigurationException e) {
      request.setDateTime(get(date,n),get(time,n));
    }
  }
 else {
    request.setDateTime(get(date,n),get(time,n));
  }
  request.setWheelchair(get(wheelchair,n));
  if (get(numItineraries,n) != null) {
    request.setNumItineraries(get(numItineraries,n));
  }
  if (get(maxWalkDistance,n) != null) {
    request.setMaxWalkDistance(get(maxWalkDistance,n));
  }
  if (get(walkSpeed,n) != null) {
    request.setSpeed(get(walkSpeed,n));
  }
  OptimizeType opt=get(optimize,n);
{
    Double tsafe=get(triangleSafetyFactor,n);
    Double tslope=get(triangleSlopeFactor,n);
    Double ttime=get(triangleTimeFactor,n);
    if (tsafe != null || tslope != null || ttime != null) {
      if (tsafe == null || tslope == null || ttime == null) {
        throw new ParameterException(Message.UNDERSPECIFIED_TRIANGLE);
      }
      if (opt == null) {
        opt=OptimizeType.TRIANGLE;
      }
 else       if (opt != OptimizeType.TRIANGLE) {
        throw new ParameterException(Message.TRIANGLE_OPTIMIZE_TYPE_NOT_SET);
      }
      if (Math.abs(tsafe + tslope + ttime - 1) > Math.ulp(1) * 3) {
        throw new ParameterException(Message.TRIANGLE_NOT_AFFINE);
      }
      request.setTriangleSafetyFactor(tsafe);
      request.setTriangleSlopeFactor(tslope);
      request.setTriangleTimeFactor(ttime);
    }
 else     if (opt == OptimizeType.TRIANGLE) {
      throw new ParameterException(Message.TRIANGLE_VALUES_NOT_SET);
    }
  }
  if (get(arriveBy,n) != null) {
    request.setArriveBy(get(arriveBy,n));
  }
  if (get(showIntermediateStops,n) != null) {
    request.setShowIntermediateStops(get(showIntermediateStops,n));
  }
  if (intermediatePlaces != null && intermediatePlaces.size() > 0 && !intermediatePlaces.get(0).equals("")) {
    request.setIntermediatePlaces(intermediatePlaces);
  }
  if (intermediatePlacesOrdered != null) {
    request.setIntermediatePlacesOrdered(intermediatePlacesOrdered);
  }
  request.setPreferredRoutes(get(preferredRoutes,n));
  request.setUnpreferredRoutes(get(unpreferredRoutes,n));
  request.setBannedRoutes(get(bannedRoutes,n));
  if (opt == OptimizeType.TRANSFERS) {
    opt=OptimizeType.QUICK;
    request.setTransferPenalty(get(transferPenalty,n) + 1800);
  }
 else {
    request.setTransferPenalty(get(transferPenalty,n));
  }
  request.setOptimize(opt);
  request.setModes(get(modes,n));
  request.setMinTransferTime(get(minTransferTime,n));
  if (get(maxTransfers,n) != null)   request.setMaxTransfers(get(maxTransfers,n));
  if (intermediatePlaces != null && intermediatePlacesOrdered && request.getModes().isTransit()) {
    throw new UnsupportedOperationException("TSP is not supported for transit trips");
  }
  return request;
}
