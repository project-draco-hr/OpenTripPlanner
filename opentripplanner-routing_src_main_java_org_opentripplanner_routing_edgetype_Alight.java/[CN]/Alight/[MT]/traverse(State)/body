{
  RoutingContext rctx=s0.getContext();
  RoutingRequest options=s0.getOptions();
  if (options.wheelchairAccessible && !wheelchairAccessible)   return null;
  if (options.isArriveBy()) {
    if (options.bannedTrips.contains(getTrip().getId())) {
      return null;
    }
    if (!options.getModes().contains(hop.getMode()))     return null;
    TraverseMode mode=s0.getNonTransitMode(options);
    if (mode.equals(TraverseMode.BICYCLE) && !hop.getBikesAllowed())     return null;
    long current_time=s0.getTime();
    int serviceId=hop.getServiceId();
    int wait=-1;
    for (    ServiceDay sd : rctx.serviceDays) {
      int secondsSinceMidnight=sd.secondsSinceMidnight(current_time);
      if (secondsSinceMidnight < 0)       continue;
      if (sd.serviceIdRunning(serviceId)) {
        int newWait=secondsSinceMidnight - hop.getEndStopTime().getArrivalTime();
        if (wait < 0 || newWait < wait) {
          wait=newWait;
        }
      }
    }
    if (wait < 0) {
      return null;
    }
    StateEditor s1=s0.edit(this);
    TransitUtils.handleBoardAlightType(s1,dropoffType);
    s1.incrementTimeInSeconds(wait);
    s1.incrementWeight(wait * options.waitReluctance + options.getBoardCost(mode));
    s1.incrementNumBoardings();
    s1.setTripId(trip.getId());
    s1.setZone(zone);
    s1.setRoute(trip.getRoute().getId());
    s1.setBackMode(getMode());
    return s1.makeState();
  }
 else {
    StateEditor s1=s0.edit(this);
    TransitUtils.handleBoardAlightType(s1,dropoffType);
    s1.setTripId(null);
    s1.setLastAlightedTime(s0.getTime());
    s1.setPreviousStop(tov);
    s1.setBackMode(getMode());
    return s1.makeState();
  }
}
