{
  if (!options.getModes().contains(hop.getMode())) {
    return null;
  }
  if (options.getModes().getBicycle() && !hop.getBikesAllowed()) {
    return null;
  }
  if (options.wheelchairAccessible && !wheelchairAccessible) {
    return null;
  }
  long current_time=state0.getTime();
  long transfer_penalty=0;
  StateData data=state0.getData();
  AgencyAndId serviceId=hop.getServiceId();
  int wait=-1;
  for (  ServiceDay sd : options.serviceDays) {
    int secondsSinceMidnight=sd.secondsSinceMidnight(current_time);
    if (secondsSinceMidnight < 0)     continue;
    if (sd.serviceIdRunning(serviceId)) {
      int newWait=secondsSinceMidnight - hop.getEndStopTime().getArrivalTime();
      if (wait < 0 || newWait < wait) {
        wait=newWait;
      }
    }
  }
  if (wait < 0) {
    return null;
  }
  if (data.getLastAlightedTime() != 0) {
    TransferTable transferTable=options.getTransferTable();
    if (transferTable.hasPreferredTransfers()) {
      transfer_penalty=options.baseTransferPenalty;
    }
    int transfer_time=transferTable.getTransferTime(getToVertex(),data.getPreviousStop());
    if (transfer_time == TransferTable.UNKNOWN_TRANSFER) {
      transfer_time=options.minTransferTime;
    }
    if (transfer_time > 0 && transfer_time > (current_time + data.getLastAlightedTime()) * 1000) {
      current_time+=data.getLastAlightedTime() - transfer_time * 1000;
    }
 else     if (transfer_time == TransferTable.FORBIDDEN_TRANSFER) {
      return null;
    }
 else     if (transfer_time == TransferTable.PREFERRED_TRANSFER) {
      transfer_penalty=0;
    }
  }
  if (options.optimizeFor == OptimizeType.TRANSFERS && state0.getData().getTrip() != -1) {
    transfer_penalty+=options.optimizeTransferPenalty;
  }
  Editor editor=state0.edit();
  editor.incrementTimeInSeconds(-wait);
  editor.incrementNumBoardings();
  editor.setTripId(trip.getId());
  editor.setZone(zone);
  editor.setRoute(trip.getRoute().getId());
  editor.setFareContext(fareContext);
  return new TraverseResult(wait + options.boardCost + transfer_penalty,editor.createState(),this);
}
