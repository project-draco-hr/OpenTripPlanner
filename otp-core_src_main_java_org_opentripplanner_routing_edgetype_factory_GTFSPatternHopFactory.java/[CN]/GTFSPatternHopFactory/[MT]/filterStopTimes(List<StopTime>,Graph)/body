{
  if (stopTimes.size() < 2)   return;
  StopTime st0=stopTimes.get(0);
  if (!st0.isDepartureTimeSet() && st0.isArrivalTimeSet()) {
    st0.setDepartureTime(st0.getArrivalTime());
  }
  boolean midnightCrossed=false;
  for (int i=1; i < stopTimes.size(); i++) {
    boolean st1bogus=false;
    StopTime st1=stopTimes.get(i);
    if (midnightCrossed) {
      if (st1.isDepartureTimeSet())       st1.setDepartureTime(st1.getDepartureTime() + 24 * SECONDS_IN_HOUR);
      if (st1.isArrivalTimeSet())       st1.setArrivalTime(st1.getArrivalTime() + 24 * SECONDS_IN_HOUR);
    }
    if (!st1.isDepartureTimeSet() && st1.isArrivalTimeSet()) {
      st1.setDepartureTime(st1.getArrivalTime());
    }
    if (!(st1.isArrivalTimeSet() && st1.isDepartureTimeSet())) {
      continue;
    }
    int dwellTime=st0.getDepartureTime() - st0.getArrivalTime();
    if (dwellTime < 0) {
      LOG.warn(graph.addBuilderAnnotation(new NegativeDwellTime(st0)));
      if (st0.getArrivalTime() > 23 * SECONDS_IN_HOUR && st0.getDepartureTime() < 1 * SECONDS_IN_HOUR) {
        midnightCrossed=true;
        st0.setDepartureTime(st0.getDepartureTime() + 24 * SECONDS_IN_HOUR);
      }
 else {
        st0.setDepartureTime(st0.getArrivalTime());
      }
    }
    int runningTime=st1.getArrivalTime() - st0.getDepartureTime();
    if (runningTime < 0) {
      LOG.warn(graph.addBuilderAnnotation(new NegativeHopTime(new StopTime(st0),new StopTime(st1))));
      midnightCrossed=true;
      if (st0.getDepartureTime() > 23 * SECONDS_IN_HOUR && st1.getArrivalTime() < 1 * SECONDS_IN_HOUR) {
        st1.setArrivalTime(st1.getArrivalTime() + 24 * SECONDS_IN_HOUR);
      }
 else {
        st1.setArrivalTime(st0.getDepartureTime());
      }
    }
    double hopDistance=distanceLibrary.fastDistance(st0.getStop().getLat(),st0.getStop().getLon(),st1.getStop().getLat(),st1.getStop().getLon());
    double hopSpeed=hopDistance / runningTime;
    if (st0.getArrivalTime() == st1.getArrivalTime() || st0.getDepartureTime() == st1.getDepartureTime()) {
      LOG.trace("{} {}",st0,st1);
      LOG.trace(graph.addBuilderAnnotation(new HopZeroTime((float)hopDistance,st1.getTrip(),st1.getStopSequence())));
      st1bogus=true;
    }
 else     if (hopSpeed > 45) {
      LOG.trace(graph.addBuilderAnnotation(new HopSpeedFast((float)hopSpeed,(float)hopDistance,st0.getTrip(),st0.getStopSequence())));
    }
 else     if (hopSpeed < 0.1) {
      LOG.trace(graph.addBuilderAnnotation(new HopSpeedSlow((float)hopSpeed,(float)hopDistance,st0.getTrip(),st0.getStopSequence())));
    }
    if (!st1bogus)     st0=st1;
  }
}
