{
  LOG.info("BEGIN HOP GENERATION");
  if (fareServiceFactory == null) {
    fareServiceFactory=new DefaultFareServiceFactory();
  }
  fareServiceFactory.setDao(_dao);
  loadStops(graph);
  loadPathways(graph);
  loadAgencies(graph);
  clearCachedData();
  LOG.debug("building hops from trips");
  Collection<Trip> trips=_dao.getAllTrips();
  int tripCount=0;
  ListMultimap<Trip,Frequency> frequenciesForTrip=ArrayListMultimap.create();
  for (  Frequency freq : _dao.getAllFrequencies()) {
    frequenciesForTrip.put(freq.getTrip(),freq);
  }
  TRIP:   for (  Trip trip : trips) {
    if (++tripCount % 100000 == 0) {
      LOG.debug("trips=" + tripCount + "/"+ trips.size());
    }
    if (!_calendarService.getServiceIds().contains(trip.getServiceId())) {
      LOG.warn(graph.addBuilderAnnotation(new TripUndefinedService(trip)));
    }
    List<StopTime> stopTimes=_dao.getStopTimesForTrip(trip);
    if (removeRepeatedStops(stopTimes)) {
      LOG.warn(graph.addBuilderAnnotation(new RepeatedStops(trip)));
    }
    filterStopTimes(stopTimes,graph);
    interpolateStopTimes(stopTimes);
    if (stopTimes.size() < 2) {
      LOG.warn(graph.addBuilderAnnotation(new TripDegenerate(trip)));
      continue TRIP;
    }
    List<Frequency> frequencies=frequenciesForTrip.get(trip);
    if (frequencies != null && !frequencies.isEmpty()) {
      Collections.sort(frequencies,new Comparator<Frequency>(){
        @Override public int compare(        Frequency o1,        Frequency o2){
          return o1.getStartTime() - o2.getStartTime();
        }
      }
);
      Frequency frequency=frequencies.get(0);
      if (frequencies.size() > 1 || frequency.getStartTime() != stopTimes.get(0).getDepartureTime() || frequency.getEndTime() - frequency.getStartTime() > frequency.getHeadwaySecs()) {
        T2<FrequencyBasedTripPattern,List<FrequencyHop>> patternAndHops=makeFrequencyPattern(graph,trip,stopTimes);
        List<FrequencyHop> hops=patternAndHops.getSecond();
        FrequencyBasedTripPattern frequencyPattern=patternAndHops.getFirst();
        if (frequencyPattern != null)         frequencyPattern.createRanges(frequencies);
        createGeometry(graph,trip,stopTimes,hops);
        continue TRIP;
      }
    }
    StopPattern stopPattern=new StopPattern(stopTimes);
    TripTimes tripTimes=new TripTimes(trip,stopTimes);
    if (trip.getBlockId() != null && !trip.getBlockId().equals("")) {
      tripTimesForBlock.put(new BlockIdAndServiceId(tripTimes.getTrip()),tripTimes);
    }
    TableTripPattern tableTripPattern=tableTripPatterns.get(stopPattern);
    if (tableTripPattern == null) {
      tableTripPattern=new TableTripPattern(trip.getRoute(),stopPattern);
      tableTripPatterns.put(stopPattern,tableTripPattern);
    }
    tableTripPattern.addTrip(trip,stopTimes);
  }
  TableTripPattern.generateUniqueNames(tableTripPatterns.values());
  for (  TableTripPattern tableTripPattern : tableTripPatterns.values()) {
    tableTripPattern.makePatternVerticesAndEdges(graph,context);
  }
  Map<TripTimes,TripTimes> interlinedTrips=Maps.newHashMap();
  for (  BlockIdAndServiceId block : tripTimesForBlock.keySet()) {
    List<TripTimes> blockTripTimes=tripTimesForBlock.get(block);
    Collections.sort(blockTripTimes);
    TripTimes last=null;
    for (    TripTimes tripTimes : blockTripTimes) {
      if (last != null) {
        interlinedTrips.put(last,tripTimes);
      }
      last=tripTimes;
    }
  }
  loadTransfers(graph);
  if (_deleteUselessDwells)   deleteUselessDwells(graph);
  for (  TableTripPattern tableTripPattern : tableTripPatterns.values()) {
    tableTripPattern.getScheduledTimetable().finish();
  }
  clearCachedData();
  graph.putService(FareService.class,fareServiceFactory.makeFareService());
  graph.putService(ServiceIdToNumberService.class,new ServiceIdToNumberService(context.serviceIds));
  graph.putService(OnBoardDepartService.class,new OnBoardDepartServiceImpl());
  LOG.info("END HOP GENERATION");
}
