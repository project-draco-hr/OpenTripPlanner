{
  if (fareServiceFactory == null) {
    fareServiceFactory=new DefaultFareServiceFactory();
  }
  fareServiceFactory.setDao(_dao);
  loadStops(graph);
  loadPathways(graph);
  loadAgencies(graph);
  clearCachedData();
  for (  AgencyAndId serviceId : _dao.getAllServiceIds()) {
    graph.serviceCodes.put(serviceId,graph.serviceCodes.size());
  }
  LOG.debug("building hops from trips");
  Collection<Trip> trips=_dao.getAllTrips();
  int tripCount=0;
  ListMultimap<Trip,Frequency> frequenciesForTrip=ArrayListMultimap.create();
  for (  Frequency freq : _dao.getAllFrequencies()) {
    frequenciesForTrip.put(freq.getTrip(),freq);
  }
  TRIP:   for (  Trip trip : trips) {
    if (++tripCount % 100000 == 0) {
      LOG.debug("loading trips {}/{}",tripCount,trips.size());
    }
    if (!_calendarService.getServiceIds().contains(trip.getServiceId())) {
      LOG.warn(graph.addBuilderAnnotation(new TripUndefinedService(trip)));
    }
    List<StopTime> stopTimes=new ArrayList<StopTime>(_dao.getStopTimesForTrip(trip));
    if (removeRepeatedStops(stopTimes)) {
      LOG.warn(graph.addBuilderAnnotation(new RepeatedStops(trip)));
    }
    filterStopTimes(stopTimes,graph);
    interpolateStopTimes(stopTimes);
    if (stopTimes.size() < 2) {
      LOG.warn(graph.addBuilderAnnotation(new TripDegenerate(trip)));
      continue TRIP;
    }
    StopPattern stopPattern=new StopPattern(stopTimes);
    TripPattern tripPattern=tripPatterns.get(stopPattern);
    if (tripPattern == null) {
      tripPattern=new TripPattern(trip.getRoute(),stopPattern);
      tripPatterns.put(stopPattern,tripPattern);
    }
    List<Frequency> frequencies=frequenciesForTrip.get(trip);
    if (frequencies != null && !(frequencies.isEmpty())) {
      for (      Frequency freq : frequencies) {
        tripPattern.add(new FrequencyTripTimes(trip,stopTimes,freq));
      }
    }
 else {
      TripTimes tripTimes=new TripTimes(trip,stopTimes);
      tripPattern.add(tripTimes);
      if (trip.getBlockId() != null && !trip.getBlockId().equals("")) {
        tripTimesForBlock.put(new BlockIdAndServiceId(trip),tripTimes);
      }
    }
  }
  TripPattern.generateUniqueNames(tripPatterns.values());
  for (  TripPattern tableTripPattern : tripPatterns.values()) {
    tableTripPattern.makePatternVerticesAndEdges(graph,context);
    tableTripPattern.setServiceCodes(graph.serviceCodes);
  }
  Map<TripTimes,TripTimes> interlinedTrips=Maps.newHashMap();
  for (  BlockIdAndServiceId block : tripTimesForBlock.keySet()) {
    List<TripTimes> blockTripTimes=tripTimesForBlock.get(block);
    Collections.sort(blockTripTimes);
    TripTimes last=null;
    for (    TripTimes tripTimes : blockTripTimes) {
      if (last != null) {
        interlinedTrips.put(last,tripTimes);
      }
      last=tripTimes;
    }
  }
  loadTransfers(graph);
  if (_deleteUselessDwells)   deleteUselessDwells(graph);
  for (  TripPattern tableTripPattern : tripPatterns.values()) {
    tableTripPattern.getScheduledTimetable().finish();
  }
  clearCachedData();
  graph.putService(FareService.class,fareServiceFactory.makeFareService());
  graph.putService(OnBoardDepartService.class,new OnBoardDepartServiceImpl());
}
