{
  double pctThrough=0;
  double x1=coords[0].x, y1=coords[0].y, x2, y2;
  for (int i=1; i < coords.length - 1; i++) {
    Coordinate innerPt=coords[i];
    x2=innerPt.x;
    y2=innerPt.y;
    double pct=SphericalDistanceLibrary.distance(y1,x1,y2,x2) / length;
    if (pctThrough + pct > t) {
      double pctAlongSeg=(t - pctThrough) / pct;
      return new Coordinate(x1 + (pctAlongSeg * (x2 - x1)),y1 + (pctAlongSeg * (y2 - y1)));
    }
    pctThrough+=pct;
    x1=x2;
    y1=y2;
  }
  x2=coords[coords.length - 1].x;
  y2=coords[coords.length - 1].y;
  double pct=SphericalDistanceLibrary.distance(y1,x1,y2,x2) / length;
  double pctAlongSeg=(t - pctThrough) / pct;
  return new Coordinate(x1 + (pctAlongSeg * (x2 - x1)),y1 + (pctAlongSeg * (y2 - y1)));
}
