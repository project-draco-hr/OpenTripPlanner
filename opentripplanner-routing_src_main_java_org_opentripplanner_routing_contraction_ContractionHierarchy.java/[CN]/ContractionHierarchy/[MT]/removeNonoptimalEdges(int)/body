{
  _log.debug("removing non-optimal edges, hopLimit is {}",hopLimit);
  int removed=0;
  for (  Vertex u : corev) {
    State su=new State(u,fwdOptions);
    Dijkstra dijkstra=new Dijkstra(u,fwdOptions,null,hopLimit);
    dijkstra.setRouteOn(corev);
    BasicShortestPathTree spt=dijkstra.getShortestPathTree(Double.POSITIVE_INFINITY,Integer.MAX_VALUE);
    ArrayList<Edge> toRemove=new ArrayList<Edge>();
    for (    Edge e : u.getOutgoing()) {
      State svSpt=spt.getState(e.getToVertex());
      State sv=e.traverse(su);
      if (sv == null) {
        toRemove.add(e);
        continue;
      }
      if (svSpt != null && sv.getBackState().getVertex() != u && svSpt.getWeight() <= sv.getWeight() + .01) {
        toRemove.add(e);
      }
    }
    for (    Edge e : toRemove) {
      e.detach();
    }
    removed+=toRemove.size();
  }
  return removed;
}
