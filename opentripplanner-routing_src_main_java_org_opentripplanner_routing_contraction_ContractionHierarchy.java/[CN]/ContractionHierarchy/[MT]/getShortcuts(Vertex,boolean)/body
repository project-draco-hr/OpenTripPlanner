{
  State su=new State(u,backOptions);
  int searchSpace=0;
  ArrayList<VertexIngress> vs=new ArrayList<VertexIngress>();
  for (  Edge e : graph.getIncoming(u)) {
    if (!isContractable(e)) {
      continue;
    }
    State sv=e.traverse(su);
    if (sv == null) {
      continue;
    }
    vs.add(new VertexIngress(sv.getVertex(),(DirectEdge)e,sv.getWeight(),sv.getAbsTimeDeltaSec(),sv.getWalkDistance()));
  }
  su=new State(u,options);
  double maxWWeight=0;
  HashSet<Vertex> wSet=new HashSet<Vertex>();
  ArrayList<VertexIngress> ws=new ArrayList<VertexIngress>();
  for (  DirectEdge e : filter(graph.getOutgoing(u),DirectEdge.class)) {
    if (!isContractable(e)) {
      continue;
    }
    State sw=e.traverse(su);
    if (sw == null) {
      continue;
    }
    Vertex w=sw.getVertex();
    wSet.add(w);
    ws.add(new VertexIngress(w,e,sw.getWeight(),sw.getTimeDeltaSec(),sw.getWalkDistance()));
    if (sw.exceedsWeightLimit(maxWWeight)) {
      maxWWeight=sw.getWeight();
    }
  }
  List<Shortcut> shortcuts=new ArrayList<Shortcut>();
  ArrayList<Callable<WitnessSearchResult>> tasks=new ArrayList<Callable<WitnessSearchResult>>(vs.size());
  int nodeLimit=simulate ? NODE_LIMIT_SIMULATE : NODE_LIMIT_CONTRACT;
  int hopLimit=simulate ? HOP_LIMIT_SIMULATE : HOP_LIMIT_CONTRACT;
  for (  VertexIngress v : vs) {
    double weightLimit=v.weight + maxWWeight + 1;
    WitnessSearch task=new WitnessSearch(u,hopLimit,nodeLimit,weightLimit,wSet,ws,v);
    tasks.add(task);
  }
  if (threadPool == null) {
    createThreadPool();
  }
  try {
    for (    Future<WitnessSearchResult> future : threadPool.invokeAll(tasks)) {
      WitnessSearchResult wsresult=future.get();
      BasicShortestPathTree spt=wsresult.spt;
      if (!simulate && spt != null) {
        ArrayList<DirectEdge> toRemove=new ArrayList<DirectEdge>();
        State sv0=new State(wsresult.vertex,options);
        for (        DirectEdge e : filter(graph.getOutgoing(wsresult.vertex),DirectEdge.class)) {
          State sSpt=spt.getState(e.getToVertex());
          if (sSpt == null) {
            continue;
          }
          State sv1=e.traverse(sv0);
          if (sv1 == null) {
            toRemove.add(e);
            continue;
          }
          if (sSpt.getWeight() < sv1.getWeight()) {
            toRemove.add(e);
          }
        }
        GraphVertex ugv=graph.getGraphVertex(wsresult.vertex);
        for (        DirectEdge e : toRemove) {
          ugv.removeOutgoing(e);
          graph.getGraphVertex(e.getToVertex()).removeIncoming(e);
        }
      }
      searchSpace+=wsresult.searchSpace;
      shortcuts.addAll(wsresult.shortcuts);
    }
  }
 catch (  InterruptedException e1) {
    throw new RuntimeException(e1);
  }
catch (  ExecutionException e1) {
    throw new RuntimeException(e1);
  }
  return new WitnessSearchResult(shortcuts,null,null,searchSpace);
}
