{
  State orig=this;
  State unoptimized=orig;
  State ret=orig.reversedClone();
  long newInitialWaitTime=this.stateData.initialWaitTime;
  PathParser pathParsers[];
  pathParsers=stateData.opt.rctx.pathParsers;
  stateData.opt.rctx.pathParsers=new PathParser[0];
  Edge edge=null;
  while (orig.getBackState() != null) {
    edge=orig.getBackEdge();
    if (optimize) {
      if (edge instanceof TransitBoardAlight && forward && orig.getNumBoardings() == 1 && ((((TransitBoardAlight)edge).isBoarding() && !stateData.opt.isArriveBy()) || (!((TransitBoardAlight)edge).isBoarding() && stateData.opt.isArriveBy()))) {
        ret=((TransitBoardAlight)edge).traverse(ret,orig.getBackState().getTimeSeconds());
        newInitialWaitTime=ret.stateData.initialWaitTime;
      }
 else       ret=edge.traverse(ret);
      if (ret != null && ret.getBackMode() != null && orig.getBackMode() != null && ret.getBackMode() != orig.getBackMode()) {
        ret=ret.next;
      }
      if (ret == null) {
        LOG.warn("Cannot reverse path at edge: " + edge + ", returning unoptimized "+ "path. If this edge is a PatternInterlineDwell, or if there is a "+ "time-dependent turn restriction here, or if there is no transit leg "+ "in a K+R result, this is not totally unexpected. Otherwise, you "+ "might want to look into it.");
        stateData.opt.rctx.pathParsers=pathParsers;
        if (forward)         return this;
 else         return unoptimized.reverse();
      }
    }
 else {
      StateEditor editor=ret.edit(edge);
      editor.setFromState(orig);
      editor.incrementTimeInSeconds(orig.getAbsTimeDeltaSeconds());
      editor.incrementWeight(orig.getWeightDelta());
      editor.incrementWalkDistance(orig.getWalkDistanceDelta());
      editor.setBackMode(orig.getBackMode());
      editor.addAlerts(orig.getBackAlerts());
      if (orig.isBikeRenting() != orig.getBackState().isBikeRenting())       editor.setBikeRenting(!orig.isBikeRenting());
      if (orig.isCarParked() != orig.getBackState().isCarParked())       editor.setCarParked(!orig.isCarParked());
      editor.setNumBoardings(getNumBoardings() - orig.getNumBoardings());
      ret=editor.makeState();
    }
    orig=orig.getBackState();
  }
  stateData.opt.rctx.pathParsers=pathParsers;
  if (forward) {
    State reversed=ret.reverse();
    if (getWeight() <= reversed.getWeight())     LOG.warn("Optimization did not decrease weight: before " + this.getWeight() + " after "+ reversed.getWeight());
    if (getElapsedTimeSeconds() != reversed.getElapsedTimeSeconds())     LOG.warn("Optimization changed time: before " + this.getElapsedTimeSeconds() + " after "+ reversed.getElapsedTimeSeconds());
    if (getActiveTime() <= reversed.getActiveTime())     LOG.warn("Optimization did not decrease active time: before " + this.getActiveTime() + " after "+ reversed.getActiveTime()+ ", boardings: "+ this.getNumBoardings());
    if (reversed.getWeight() < this.getBackState().getWeight())     LOG.warn("Weight has been reduced enough to make it run backwards, now:" + reversed.getWeight() + " backState "+ getBackState().getWeight()+ ", "+ "number of boardings: "+ getNumBoardings());
    if (getTimeSeconds() != reversed.getTimeSeconds())     LOG.warn("Times do not match");
    if (Math.abs(getWeight() - reversed.getWeight()) > 1 && newInitialWaitTime == stateData.initialWaitTime)     LOG.warn("Weight is changed (before: " + getWeight() + ", after: "+ reversed.getWeight()+ "), initial wait times "+ "constant at "+ newInitialWaitTime);
    if (newInitialWaitTime != reversed.stateData.initialWaitTime)     LOG.warn("Initial wait time not propagated: is " + reversed.stateData.initialWaitTime + ", should be "+ newInitialWaitTime);
    reversed.initializeFieldsFrom(this);
    return reversed;
  }
 else   return ret;
}
