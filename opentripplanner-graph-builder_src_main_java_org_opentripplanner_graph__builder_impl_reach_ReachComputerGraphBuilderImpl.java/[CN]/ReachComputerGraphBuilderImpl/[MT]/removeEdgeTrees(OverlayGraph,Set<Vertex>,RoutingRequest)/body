{
  GenericDijkstra dijkstra=new GenericDijkstra(options);
  dijkstra.setShortestPathTreeFactory(new ShortestPathTreeFactory(){
    @Override public ShortestPathTree create(    RoutingRequest opts){
      ReachMiniSPT spt=new ReachMiniSPT(getEdgeTreesVertexLimit() * 2,Double.MAX_VALUE);
      return spt;
    }
  }
);
  int i=0;
  int removed=0;
  for (  Vertex v : streetVertices) {
    i++;
    if (i % 5000 == 0) {
      log.info("Removing edge trees : " + i + " / "+ streetVertices.size()+ " ("+ removed+ " edges removed)");
    }
    EdgeTreesPhaseTerminationCondition termination=new EdgeTreesPhaseTerminationCondition(getEdgeTreesVertexLimit());
    dijkstra.setSearchTerminationStrategy(termination);
    dijkstra.setSkipTraverseResultStrategy(new EdgeTreesSkipTraversalResultStrategy(v));
    ReachMiniSPT spt=(ReachMiniSPT)dijkstra.getShortestPathTree(new ReachState(v,options));
    if (termination.getUnsafeTermination()) {
      continue;
    }
    ArrayList<EdgeWithReach> edgesToRemove=new ArrayList<EdgeWithReach>();
    Collection<Edge> edges;
    if (options.isArriveBy()) {
      edges=ograph.getIncoming(v);
    }
 else {
      edges=ograph.getOutgoing(v);
    }
    for (    EdgeWithReach e : IterableLibrary.filter(edges,EdgeWithReach.class)) {
      double reach=spt.getHeight(spt.getState(v),outPenalty);
      MapUtils.addToMaxMap(inPenalty,v,reach);
      MapUtils.addToMaxMap(outPenalty,v,reach);
      e.setReach(reach);
      edgesToRemove.add(e);
    }
    for (    EdgeWithReach e : edgesToRemove) {
      ograph.removeEdge(e);
      removed++;
    }
  }
}
