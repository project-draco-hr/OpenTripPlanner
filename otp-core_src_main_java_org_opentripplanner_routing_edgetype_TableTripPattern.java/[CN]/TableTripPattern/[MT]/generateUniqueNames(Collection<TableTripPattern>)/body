{
  LOG.info("Generating unique names for stop patterns on each route.");
  Set<String> usedRouteNames=Sets.newHashSet();
  Map<Route,String> uniqueRouteNames=Maps.newHashMap();
  Multimap<Route,TableTripPattern> patternsByRoute=ArrayListMultimap.create();
  for (  TableTripPattern ttp : tableTripPatterns) {
    patternsByRoute.put(ttp.route,ttp);
  }
  for (  Route route : patternsByRoute.keySet()) {
    String routeName=GtfsLibrary.getRouteName(route);
    if (usedRouteNames.contains(routeName)) {
      int i=2;
      String generatedRouteName;
      do       generatedRouteName=routeName + " " + (i++);
 while (usedRouteNames.contains(generatedRouteName));
      LOG.warn("Route had non-unique name. Generated one to ensure uniqueness of TripPattern names: {}",generatedRouteName);
      routeName=generatedRouteName;
    }
    usedRouteNames.add(routeName);
    uniqueRouteNames.put(route,routeName);
  }
  ROUTE:   for (  Route route : patternsByRoute.keySet()) {
    Collection<TableTripPattern> routeTripPatterns=patternsByRoute.get(route);
    String routeName=uniqueRouteNames.get(route);
    if (routeTripPatterns.size() == 1) {
      routeTripPatterns.iterator().next().setName(routeName);
      continue;
    }
    Multimap<String,TableTripPattern> signs=ArrayListMultimap.create();
    Multimap<Stop,TableTripPattern> starts=ArrayListMultimap.create();
    Multimap<Stop,TableTripPattern> ends=ArrayListMultimap.create();
    Multimap<Stop,TableTripPattern> vias=ArrayListMultimap.create();
    for (    TableTripPattern pattern : routeTripPatterns) {
      List<Stop> stops=pattern.getStops();
      Stop start=stops.get(0);
      Stop end=stops.get(stops.size() - 1);
      starts.put(start,pattern);
      ends.put(end,pattern);
      for (      Stop stop : stops)       vias.put(stop,pattern);
    }
    PATTERN:     for (    TableTripPattern pattern : routeTripPatterns) {
      List<Stop> stops=pattern.getStops();
      StringBuilder sb=new StringBuilder(routeName);
      Stop end=stops.get(stops.size() - 1);
      sb.append(" to " + stopNameAndId(end));
      if (ends.get(end).size() == 1) {
        pattern.setName(sb.toString());
        continue PATTERN;
      }
      Stop start=stops.get(0);
      sb.append(" from " + stopNameAndId(start));
      if (starts.get(start).size() == 1) {
        pattern.setName(sb.toString());
        continue PATTERN;
      }
      Set<TableTripPattern> remainingPatterns=Sets.newHashSet();
      remainingPatterns.addAll(starts.get(start));
      remainingPatterns.retainAll(ends.get(end));
      if (remainingPatterns.size() == 1) {
        pattern.setName(sb.toString());
        continue PATTERN;
      }
      for (      Stop via : stops) {
        if (via.equals(start) || via.equals(end))         continue;
        Set<TableTripPattern> intersection=Sets.newHashSet();
        intersection.addAll(remainingPatterns);
        intersection.retainAll(vias.get(via));
        if (intersection.size() == 1) {
          sb.append(" via " + stopNameAndId(via));
          pattern.setName(sb.toString());
          continue PATTERN;
        }
      }
      if (remainingPatterns.size() == 2) {
        sb.append(" express");
      }
 else {
        sb.append(" like trip " + pattern.getTrips().get(0).getId());
      }
      pattern.setName(sb.toString());
    }
  }
  LOG.info("Done generating unique names for stop patterns on each route.");
  if (LOG.isDebugEnabled()) {
    for (    Route route : patternsByRoute.keySet()) {
      Collection<TableTripPattern> routeTripPatterns=patternsByRoute.get(route);
      LOG.debug("Named {} patterns in route {}",routeTripPatterns.size(),uniqueRouteNames.get(route));
      for (      TableTripPattern pattern : routeTripPatterns) {
        LOG.debug("    {} ({} stops)",pattern.getName(),pattern.stopPattern.size);
      }
    }
  }
}
