{
  _log.debug("Updating bike rental stations from " + source);
  if (!source.update()) {
    _log.debug("No updates");
    return;
  }
  List<BikeRentalStation> stations=source.getStations();
  Set<BikeRentalStation> stationSet=new HashSet<BikeRentalStation>();
  Set<String> networks=new HashSet<String>(Arrays.asList(network));
  for (  BikeRentalStation station : stations) {
    service.addStation(station);
    String id=station.id;
    stationSet.add(station);
    BikeRentalStationVertex vertex=verticesByStation.get(station);
    if (vertex == null) {
      String name="bike rental station " + id;
      vertex=new BikeRentalStationVertex(graph,id,name,station.x,station.y,station.name,station.bikesAvailable,station.spacesAvailable);
      LinkRequest request=networkLinkerLibrary.connectVertexToStreets(vertex);
      for (      Edge e : request.getEdgesAdded()) {
        graph.addTemporaryEdge(e);
      }
      verticesByStation.put(station,vertex);
      new RentABikeOnEdge(vertex,vertex,networks);
      new RentABikeOffEdge(vertex,vertex,networks);
    }
 else {
      vertex.setBikesAvailable(station.bikesAvailable);
      vertex.setSpacesAvailable(station.spacesAvailable);
    }
  }
  List<BikeRentalStationVertex> toRemove=new ArrayList<BikeRentalStationVertex>();
  for (  Entry<BikeRentalStation,BikeRentalStationVertex> entry : verticesByStation.entrySet()) {
    BikeRentalStation station=entry.getKey();
    if (stationSet.contains(station))     continue;
    BikeRentalStationVertex vertex=entry.getValue();
    if (graph.containsVertex(vertex)) {
      graph.removeVertexAndEdges(vertex);
      toRemove.add(vertex);
    }
    service.removeStation(station);
  }
  verticesByStation.keySet().removeAll(toRemove);
}
