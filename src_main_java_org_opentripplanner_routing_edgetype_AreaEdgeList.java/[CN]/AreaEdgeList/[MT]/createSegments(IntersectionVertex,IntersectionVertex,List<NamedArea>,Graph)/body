{
  GeometryFactory geometryFactory=GeometryUtils.getGeometryFactory();
  LineString line=geometryFactory.createLineString(new Coordinate[]{from.getCoordinate(),to.getCoordinate()});
  List<NamedArea> intersects=new ArrayList<NamedArea>();
  for (  NamedArea area : areas) {
    Geometry polygon=area.getPolygon();
    Geometry intersection=polygon.intersection(line);
    if (intersection.getLength() > 0.000001) {
      intersects.add(area);
    }
  }
  if (intersects.size() == 1) {
    NamedArea area=intersects.get(0);
    double length=distanceLibrary.distance(to.getCoordinate(),from.getCoordinate());
    AreaEdge forward=new AreaEdge(from,to,line,area.getRawName(),length,area.getPermission(),false,this);
    forward.setStreetClass(area.getStreetClass());
    AreaEdge backward=new AreaEdge(to,from,(LineString)line.reverse(),area.getRawName(),length,area.getPermission(),true,this);
    backward.setStreetClass(area.getStreetClass());
    edges.add(forward);
    edges.add(backward);
  }
 else {
    Coordinate startCoordinate=from.getCoordinate();
    Point startPoint=geometryFactory.createPoint(startCoordinate);
    for (    NamedArea area : intersects) {
      Geometry polygon=area.getPolygon();
      if (!polygon.intersects(startPoint))       continue;
      Geometry lineParts=line.intersection(polygon);
      if (lineParts.getLength() > 0.000001) {
        Coordinate edgeCoordinate=null;
        if (lineParts instanceof MultiLineString) {
          MultiLineString mls=(MultiLineString)lineParts;
          for (int i=0; i < mls.getNumGeometries(); ++i) {
            LineString segment=(LineString)mls.getGeometryN(i);
            if (segment.contains(startPoint) || segment.getBoundary().contains(startPoint)) {
              edgeCoordinate=segment.getEndPoint().getCoordinate();
            }
          }
        }
 else         if (lineParts instanceof LineString) {
          edgeCoordinate=((LineString)lineParts).getEndPoint().getCoordinate();
        }
 else {
          continue;
        }
        String label="area splitter at " + edgeCoordinate;
        IntersectionVertex newEndpoint=(IntersectionVertex)graph.getVertex(label);
        if (newEndpoint == null) {
          newEndpoint=new IntersectionVertex(graph,label,edgeCoordinate.x,edgeCoordinate.y);
        }
        createSegments(from,newEndpoint,Arrays.asList(area),graph);
        createSegments(newEndpoint,to,intersects,graph);
        break;
      }
    }
  }
}
