{
  WayProperties leftResult=defaultProperties;
  WayProperties rightResult=defaultProperties;
  int bestLeftScore=0;
  int bestRightScore=0;
  List<WayProperties> leftMixins=new ArrayList<WayProperties>();
  List<WayProperties> rightMixins=new ArrayList<WayProperties>();
  for (  WayPropertyPicker picker : getWayProperties()) {
    OSMSpecifier specifier=picker.getSpecifier();
    WayProperties wayProperties=picker.getProperties();
    P2<Integer> score=specifier.matchScores(way);
    int leftScore=score.getFirst();
    int rightScore=score.getSecond();
    if (picker.isSafetyMixin()) {
      if (leftScore > 0) {
        leftMixins.add(wayProperties);
      }
      if (rightScore > 0) {
        rightMixins.add(wayProperties);
      }
    }
 else {
      if (leftScore > bestLeftScore) {
        leftResult=wayProperties;
        bestLeftScore=leftScore;
      }
      if (rightScore > bestRightScore) {
        rightResult=wayProperties;
        bestRightScore=rightScore;
      }
    }
  }
  WayProperties result=rightResult.clone();
  result.setSafetyFeatures(new P2<Double>(rightResult.getSafetyFeatures().getFirst(),leftResult.getSafetyFeatures().getSecond()));
  if (leftMixins.size() > 0) {
    applyMixins(result,leftMixins,false);
  }
  if (rightMixins.size() > 0) {
    applyMixins(result,rightMixins,true);
  }
  if ((bestLeftScore == 0 || bestRightScore == 0) && (leftMixins.size() == 0 || rightMixins.size() == 0)) {
    String all_tags=dumpTags(way);
    _log.debug("Used default permissions: " + all_tags);
  }
  return result;
}
