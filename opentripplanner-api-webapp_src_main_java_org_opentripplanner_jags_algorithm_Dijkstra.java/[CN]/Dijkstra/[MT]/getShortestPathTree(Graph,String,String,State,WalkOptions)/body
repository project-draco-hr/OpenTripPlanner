{
  String origin_label=from_label;
  String target_label=to_label;
  Vertex origin=gg.getVertex(origin_label);
  Vertex target=gg.getVertex(target_label);
  if (origin == null) {
    return null;
  }
  ShortestPathTree spt=new ShortestPathTree();
  SPTVertex spt_origin=spt.addVertex(origin,init,0);
  FibHeap pq=new FibHeap();
  pq.insert(spt_origin,spt_origin.weightSum);
  SPTVertex spt_u, spt_v;
  while (!pq.empty()) {
    spt_u=(SPTVertex)pq.extract_min();
    if (spt_u.mirror == target)     break;
    for (    Edge edge : spt_u.mirror.outgoing) {
      WalkResult wr=edge.walk(spt_u.state,options);
      if (wr == null) {
        continue;
      }
      if (wr.weight < 0) {
        throw new NegativeWeightException(String.valueOf(wr.weight));
      }
      double new_w=spt_u.weightSum + wr.weight;
      double old_w;
      spt_v=spt.getVertex(edge.tov);
      if (spt_v == null) {
        old_w=Integer.MAX_VALUE;
        spt_v=spt.addVertex(edge.tov,wr.state,new_w);
      }
 else {
        old_w=spt_v.weightSum;
      }
      if (new_w < old_w) {
        spt_v.state=wr.state;
        spt_v.weightSum=new_w;
        pq.insert_or_dec_key(spt_v,new_w);
        spt_v.setParent(spt_u,edge.payload);
      }
    }
  }
  return spt;
}
