{
  fill(0);
  rect(0,0,getSize().width - 1,getSize().height - 1);
  List<Vertex> vertices=(List<Vertex>)vertexIndex.query(modelBounds);
  List<Edge> edges=(List<Edge>)edgeIndex.query(modelBounds);
  for (  Edge e : edges) {
    if (e == highlightedEdge)     continue;
    if (e instanceof OutEdge || e instanceof TurnEdge) {
      stroke(30,255,255);
    }
 else     if (e instanceof StreetTransitLink) {
      stroke(75,150,255);
    }
 else {
      stroke(255,255,30);
    }
    Coordinate[] coords=e.getGeometry().getCoordinates();
    for (int i=1; i < coords.length; i++) {
      line((float)toScreenX(coords[i - 1].x),(float)toScreenY(coords[i - 1].y),(float)toScreenX(coords[i].x),(float)toScreenY(coords[i].y));
    }
  }
  if (highlightedEdge != null && highlightedEdge.getGeometry() != null) {
    stroke(255,70,70);
    Coordinate[] coords=highlightedEdge.getGeometry().getCoordinates();
    for (int i=1; i < coords.length; i++) {
      line((float)toScreenX(coords[i - 1].x),(float)toScreenY(coords[i - 1].y),(float)toScreenX(coords[i].x),(float)toScreenY(coords[i].y));
    }
    stroke(0,255,0);
    ellipse(toScreenX(coords[0].x),toScreenY(coords[0].y),5,5);
    stroke(255,0,0);
    ellipse(toScreenX(coords[coords.length - 1].x),toScreenY(coords[coords.length - 1].y),5,5);
  }
  for (  Vertex v : vertices) {
    if (v == highlightedVertex)     continue;
    double x=v.getX();
    double y=v.getY();
    x=toScreenX(x);
    y=toScreenY(y);
    if (v instanceof TransitStop) {
      fill(0);
      stroke(255,30,255);
      ellipse(x,y,5.0,5.0);
    }
 else     if (highlightedVertices.contains(v)) {
      stroke(255,127,0);
      fill(255,127,0);
      ellipse(x,y,5.0,5.0);
    }
 else {
      stroke(255);
      fill(255,0,0);
      ellipse(x,y,3.0,3.0);
    }
  }
  if (highlightedVertex != null) {
    stroke(255,255,30);
    fill(255,255,30);
    ellipse(toScreenX(highlightedVertex.getX()),toScreenY(highlightedVertex.getY()),7.0,7.0);
    noFill();
  }
  fill(255,0,0);
  text(mouseModelX + ", " + mouseModelY,0,10);
}
