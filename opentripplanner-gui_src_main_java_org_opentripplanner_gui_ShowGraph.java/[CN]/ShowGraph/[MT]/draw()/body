{
  final int BLOCK_SIZE=1000;
  final long DECIMATE=100;
  final int FRAME_TIME=800 / FRAME_RATE;
  int startMillis=millis();
  if (drawLevel == DRAW_PARTIAL) {
    background(15);
    stroke(30,128,30);
    strokeWeight(1);
    noFill();
    int drawIndex=0;
    int drawStart=0;
    int drawCount=0;
    while (drawStart < visibleStreetEdges.size()) {
      if (drawFast)       drawEdgeFast(visibleStreetEdges.get(drawIndex));
 else       drawEdge(visibleStreetEdges.get(drawIndex));
      drawIndex+=DECIMATE;
      drawCount+=1;
      if (drawCount % BLOCK_SIZE == 0 && millis() - startMillis > FRAME_TIME) {
        drawFast=drawCount < visibleStreetEdges.size() / 4;
        break;
      }
      if (drawIndex >= visibleStreetEdges.size()) {
        drawStart+=1;
        drawIndex=drawStart;
      }
    }
  }
 else   if (drawLevel == DRAW_ALL) {
    if (drawOffset == 0) {
      findVisibleElements();
      background(15);
    }
    if (drawStreetEdges) {
      stroke(30,128,30);
      strokeWeight(1);
      noFill();
      while (drawOffset < visibleStreetEdges.size()) {
        drawEdge(visibleStreetEdges.get(drawOffset));
        drawOffset+=1;
        if (drawOffset % BLOCK_SIZE == 0) {
          if (millis() - startMillis > FRAME_TIME)           return;
        }
      }
    }
  }
 else   if (drawLevel == DRAW_TRANSIT) {
    if (drawTransitEdges) {
      stroke(40,40,128,30);
      strokeWeight(4);
      noFill();
      while (drawOffset < visibleTransitEdges.size()) {
        DirectEdge e=visibleTransitEdges.get(drawOffset);
        drawEdge(e);
        drawOffset+=1;
        if (drawOffset % BLOCK_SIZE == 0) {
          if (millis() - startMillis > FRAME_TIME)           return;
        }
      }
    }
  }
 else   if (drawLevel == DRAW_VERTICES) {
    final double METERS_PER_DEGREE_LAT=111111.111111;
    drawTransitStopVertices=(modelBounds.getHeight() * METERS_PER_DEGREE_LAT / this.width < 10);
    fill(60,60,200);
    for (    Vertex v : visibleVertices) {
      if (drawTransitStopVertices && v instanceof TransitStop) {
        drawVertex(v,5);
      }
    }
    noFill();
    stroke(200,200,000,128);
    strokeWeight(8);
    if (highlightedEdges != null) {
      for (      DirectEdge e : highlightedEdges) {
        drawEdge(e);
      }
    }
    if (highlightedGraphPath != null) {
      drawGraphPath(highlightedGraphPath);
    }
    if (highlightedEdge != null && highlightedEdge.getGeometry() != null) {
      stroke(200,10,10,128);
      strokeWeight(8);
      drawEdge(highlightedEdge);
    }
    fill(255,127,0);
    noStroke();
    if (highlightedVertices != null) {
      for (      Vertex v : highlightedVertices) {
        drawVertex(v,8);
      }
    }
    if (highlightedVertex != null) {
      fill(255,255,30);
      drawVertex(highlightedVertex,7);
    }
    noFill();
  }
 else   if (drawLevel == DRAW_MINIMAL) {
    fill(0,0,0);
    stroke(30,128,30);
    strokeWeight(1);
    rect(3,3,303,textAscent() + textDescent() + 6);
    fill(128,128,256);
    String output=lonFormatter.format(mouseModelX) + " " + latFormatter.format(mouseModelY);
    textAlign(LEFT,TOP);
    text(output,6,6);
  }
  drawOffset=0;
  if (drawLevel > DRAW_MINIMAL)   drawLevel-=1;
}
