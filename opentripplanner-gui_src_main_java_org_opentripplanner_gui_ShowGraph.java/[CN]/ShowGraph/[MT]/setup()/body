{
  background(0);
  size(getSize().width,getSize().height,P2D);
  addMouseMotionListener(new MouseMotionAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      super.mouseMoved(e);
      Point p=e.getPoint();
      mouseModelX=toModelX(p.x);
      mouseModelY=toModelY(p.y);
    }
  }
);
  indexVertices();
  modelBounds.expandBy(0.02);
  double yCenter=(modelBounds.getMaxY() + modelBounds.getMinY()) / 2;
  float xScale=cos((float)(yCenter * Math.PI / 180));
  double xSize=modelBounds.getMaxX() - modelBounds.getMinX();
  double ySize=modelBounds.getMaxY() - modelBounds.getMinY();
  double actualXSize=xSize * xScale;
  System.out.println("xs, ys, axs: " + xSize + ", "+ ySize+ ","+ actualXSize);
  if (ySize > actualXSize) {
    System.out.println("stretching x by " + (ySize / xScale - actualXSize));
    modelBounds.expandBy((ySize / xScale - actualXSize) / 2,0);
  }
 else {
    System.out.println("stretching y by " + (actualXSize - ySize));
    modelBounds.expandBy(0,(actualXSize - ySize) / 2);
  }
  modelOuterBounds=new Envelope(modelBounds);
  String[] fonts=PFont.list();
  String[] preferredFonts={"Courier","Mono"};
  PFont font=null;
  for (  String preferredFontName : preferredFonts) {
    for (    String fontName : fonts) {
      if (fontName.contains(preferredFontName)) {
        font=createFont(fontName,16);
        break;
      }
    }
    if (font != null) {
      break;
    }
  }
  textFont(font);
}
