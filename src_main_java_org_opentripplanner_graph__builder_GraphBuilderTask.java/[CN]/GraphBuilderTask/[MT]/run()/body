{
  long startTime=System.currentTimeMillis();
  if (graphFile == null) {
    throw new RuntimeException("graphBuilderTask has no attribute graphFile.");
  }
  if (graphFile.exists() && !_alwaysRebuild) {
    LOG.info("graph already exists and alwaysRebuild=false => skipping graph build");
    return;
  }
  if (serializeGraph) {
    try {
      if (!graphFile.getParentFile().exists())       if (!graphFile.getParentFile().mkdirs())       LOG.error("Failed to create directories for graph bundle at " + graphFile);
      graphFile.createNewFile();
    }
 catch (    IOException e) {
      throw new RuntimeException("Cannot create or overwrite graph at path " + graphFile);
    }
  }
  ArrayList<String> provided=new ArrayList<String>();
  boolean bad=false;
  for (  GraphBuilder builder : _graphBuilders) {
    List<String> prerequisites=builder.getPrerequisites();
    for (    String prereq : prerequisites) {
      if (!provided.contains(prereq)) {
        LOG.error("Graph builder " + builder + " requires "+ prereq+ " but no previous stages provide it");
        bad=true;
      }
    }
    provided.addAll(builder.provides());
  }
  if (_baseGraph != null)   LOG.warn("base graph loaded, not enforcing prerequisites");
 else   if (bad)   throw new RuntimeException("Prerequisites unsatisfied");
  for (  GraphBuilder builder : _graphBuilders) {
    builder.checkInputs();
  }
  HashMap<Class<?>,Object> extra=new HashMap<Class<?>,Object>();
  for (  GraphBuilder load : _graphBuilders)   load.buildGraph(graph,extra);
  graph.summarizeBuilderAnnotations();
  if (serializeGraph) {
    try {
      graph.save(graphFile);
    }
 catch (    Exception ex) {
      throw new IllegalStateException(ex);
    }
  }
 else {
    LOG.info("Not saving graph to disk, as requested.");
  }
  long endTime=System.currentTimeMillis();
  LOG.info(String.format("Graph building took %.1f minutes.",(endTime - startTime) / 1000 / 60.0));
}
