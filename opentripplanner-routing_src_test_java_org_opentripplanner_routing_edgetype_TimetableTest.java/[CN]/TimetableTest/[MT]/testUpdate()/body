{
  TripUpdate tripUpdate;
  AgencyAndId trip_1_1_id=new AgencyAndId("agency","1.1");
  int trip_1_1_index=timetable.getTripIndex(trip_1_1_id);
  AgencyAndId stop_a_id=new AgencyAndId("agency","A");
  AgencyAndId stop_b_id=new AgencyAndId("agency","B");
  AgencyAndId stop_c_id=new AgencyAndId("agency","C");
  @SuppressWarnings("deprecation") Vertex stop_a=graph.getVertex("agency_A");
  @SuppressWarnings("deprecation") Vertex stop_c=graph.getVertex("agency_C");
  RoutingRequest options=new RoutingRequest();
  ShortestPathTree spt;
  GraphPath path;
  tripUpdate=TripUpdate.forCanceledTrip(new AgencyAndId("a","b"),0,new ServiceDate());
  assertFalse(timetable.update(tripUpdate));
  tripUpdate=TripUpdate.forUpdatedTrip(trip_1_1_id,0,new ServiceDate(),Collections.<Update>singletonList(new Update(trip_1_1_id,stop_a_id,0,1200,1200,Status.PREDICTION,0,new ServiceDate())));
  assertFalse(timetable.update(tripUpdate));
  long startTime=TestUtils.dateInSeconds("America/New_York",2009,8,7,0,0,0);
  long endTime;
  options.dateTime=startTime;
  options.setRoutingContext(graph,stop_a,stop_c);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(stop_c,false);
  assertNotNull(path);
  endTime=startTime + 20 * 60;
  assertEquals(endTime,path.getEndTime());
  List<Update> updates=new LinkedList<Update>();
  updates.add(new Update(trip_1_1_id,stop_a_id,0,0 * 60 + 120,0 * 60 + 120,Status.PREDICTION,0,new ServiceDate()));
  updates.add(new Update(trip_1_1_id,stop_b_id,1,10 * 60 + 120,10 * 60 + 120,Status.PREDICTION,0,new ServiceDate()));
  updates.add(new Update(trip_1_1_id,stop_c_id,2,20 * 60 + 120,20 * 60 + 120,Status.PREDICTION,0,new ServiceDate()));
  tripUpdate=TripUpdate.forUpdatedTrip(trip_1_1_id,0,new ServiceDate(),updates);
  assertEquals(timetable.getArrivalTime(1,trip_1_1_index),20 * 60);
  assertTrue(timetable.update(tripUpdate));
  assertEquals(timetable.getArrivalTime(1,trip_1_1_index),20 * 60 + 120);
  options.setRoutingContext(graph,stop_a,stop_c);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(stop_c,false);
  assertNotNull(path);
  endTime=startTime + 20 * 60 + 120;
  assertEquals(endTime,path.getEndTime());
  tripUpdate=TripUpdate.forCanceledTrip(trip_1_1_id,0,new ServiceDate());
  assertTrue(timetable.update(tripUpdate));
  assertEquals(CanceledTripTimes.class,timetable.getTripTimes(trip_1_1_index).getClass());
  options.setRoutingContext(graph,stop_a,stop_c);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(stop_c,false);
  assertNotNull(path);
  endTime=startTime + 40 * 60;
  assertEquals(endTime,path.getEndTime());
}
