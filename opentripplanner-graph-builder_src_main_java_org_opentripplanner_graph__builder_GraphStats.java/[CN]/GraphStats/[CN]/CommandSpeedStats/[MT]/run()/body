{
  System.out.println("dumping hop info...");
  try {
    writer.writeRecord(new String[]{"route","distance","time","speed"});
    for (    Vertex v : graph.getVertices()) {
      for (      PatternHop ph : IterableLibrary.filter(v.getOutgoing(),PatternHop.class)) {
        double distance=ph.getDistance();
        if (distance < 3)         continue;
        TableTripPattern ttp=ph.getPattern();
        List<Trip> trips=ttp.getTrips();
        int hop=ph.stopIndex;
        String route=ttp.getExemplar().getRoute().getId().toString();
        for (int trip=0; trip < trips.size(); trip++) {
          int time=ttp.getRunningTime(hop,trip);
          double speed=distance / time;
          if (Double.isInfinite(speed) || Double.isNaN(speed))           continue;
          String[] entries=new String[]{route,Double.toString(distance),Integer.toString(time),Double.toString(speed)};
          writer.writeRecord(entries);
        }
      }
    }
  }
 catch (  IOException e) {
    LOG.error("Exception writing CSV: {}",e.getMessage());
    return;
  }
  LOG.info("done.");
}
