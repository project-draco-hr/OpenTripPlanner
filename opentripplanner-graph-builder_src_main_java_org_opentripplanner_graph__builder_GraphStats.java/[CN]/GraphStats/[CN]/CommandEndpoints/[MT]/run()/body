{
  LOG.info(String.format("Producing %d random endpoints within radius %2.2fm around %s.",n,radius,useStops ? "stops" : "streets"));
  List<Vertex> vertices=new ArrayList<Vertex>();
  GeodeticCalculator gc=new GeodeticCalculator();
  Class<?> klasse=useStops ? TransitStop.class : StreetVertex.class;
  for (  Vertex v : graph.getVertices())   if (klasse.isInstance(v))   vertices.add(v);
  Random random=new Random();
  if (seed != null)   random.setSeed(seed);
  Collections.shuffle(vertices,random);
  vertices=vertices.subList(0,n);
  try {
    writer.writeRecord(new String[]{"n","name","lon","lat"});
    int i=0;
    for (    Vertex v : vertices) {
      Coordinate c;
      if (v instanceof StreetVertex) {
        LineString ls=((StreetVertex)v).getOutgoing().iterator().next().getGeometry();
        int numPoints=ls.getNumPoints();
        LocationIndexedLine lil=new LocationIndexedLine(ls);
        int seg=random.nextInt(numPoints);
        double frac=random.nextDouble();
        LinearLocation ll=new LinearLocation(seg,frac);
        c=lil.extractPoint(ll);
      }
 else {
        c=v.getCoordinate();
      }
      double distance=random.nextDouble() * radius;
      double azimuth=random.nextDouble() * 360 - 180;
      gc.setStartingGeographicPoint(c.x,c.y);
      gc.setDirection(azimuth,distance);
      Point2D dest=gc.getDestinationGeographicPoint();
      String name=v.getName();
      String[] entries=new String[]{Integer.toString(i),name,Double.toString(dest.getX()),Double.toString(dest.getY())};
      writer.writeRecord(entries);
      i+=1;
    }
  }
 catch (  IOException ioe) {
    LOG.error("Excpetion while writing CSV: {}",ioe.getMessage());
  }
  LOG.info("done.");
}
