{
  if (target == this.target) {
    LOG.debug("Reusing target stop list.");
    return 0;
  }
  weightCache=new IdentityHashMap<Vertex,Double>(5000);
  this.target=target;
  this.options=options;
  targetStops=new ArrayList<NearbyStop>(50);
  Map<Vertex,List<Edge>> extraEdges=new HashMap<Vertex,List<Edge>>();
  options.extraEdgesStrategy.addIncomingEdgesForTarget(extraEdges,target);
  options.extraEdgesStrategy.addOutgoingEdgesForTarget(extraEdges,target);
  ShortestPathTree spt=new BasicShortestPathTree(5000);
  BinHeap<State> heap=new BinHeap<State>(100);
  State targetState=new State(target,options);
  spt.add(targetState);
  heap.insert(targetState,0);
  while (!heap.empty()) {
    State u=heap.extract_min();
    if (!spt.visit(u))     continue;
    if (u.exceedsWeightLimit(60 * 15))     break;
    Vertex uVertex=u.getVertex();
    weightCache.put(uVertex,u.getWeight());
    if (uVertex instanceof TransitStop) {
      targetStops.add(new NearbyStop(uVertex,u.getWalkDistance(),u.getWeight()));
      continue;
    }
    if (options.isArriveBy()) {
      for (      Edge e : GraphLibrary.getOutgoingEdges(g,uVertex,extraEdges)) {
        State v=e.traverse(u);
        if (v != null && spt.add(v))         heap.insert(v,v.getWeight());
      }
    }
 else {
      for (      Edge e : GraphLibrary.getIncomingEdges(g,uVertex,extraEdges)) {
        State v=e.traverseBack(u);
        if (v != null && spt.add(v))         heap.insert(v,v.getWeight());
      }
    }
  }
  LOG.debug("Found " + targetStops.size() + " stops near destination.");
  return defaultHeuristic.computeInitialWeight(s0,target,options);
}
