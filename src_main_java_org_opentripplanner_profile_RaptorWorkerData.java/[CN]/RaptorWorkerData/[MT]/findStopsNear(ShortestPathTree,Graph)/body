{
  TIntIntMap accessTimes=new TIntIntHashMap();
  for (  TransitStop tstop : graph.index.stopVertexForStop.values()) {
    State s=spt.getState(tstop);
    if (s != null) {
      int stopIndex=indexForStop.get(tstop.getIndex());
      if (stopIndex != -1)       accessTimes.put(stopIndex,(int)(s.getWalkDistance() / 1.3f));
    }
  }
  for (TObjectIntIterator<AddTripPattern.TemporaryStop> it=addedStops.iterator(); it.hasNext(); ) {
    it.advance();
    AddTripPattern.TemporaryStop tstop=it.key();
    if (tstop.sample == null) {
      LOG.warn("Temporary stop unlinked: {}",tstop);
      continue;
    }
    double dist=Double.POSITIVE_INFINITY;
    if (tstop.sample.v0 != null) {
      State s0=spt.getState(tstop.sample.v0);
      if (s0 != null) {
        dist=s0.getWalkDistance() + tstop.sample.d0;
      }
    }
    if (tstop.sample.v1 != null) {
      State s1=spt.getState(tstop.sample.v1);
      if (s1 != null) {
        double d1=s1.getWalkDistance() + tstop.sample.d1;
        dist=Double.isInfinite(dist) ? d1 : Math.min(d1,dist);
      }
    }
    if (Double.isInfinite(dist))     continue;
    accessTimes.put(it.value(),(int)(dist / 1.3f));
  }
  return accessTimes;
}
