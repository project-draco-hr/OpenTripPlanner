{
  for (  Vertex gv : graph.getVertices()) {
    if (Double.isNaN(gv.getCoordinate().x) || Double.isNaN(gv.getCoordinate().y)) {
      _log.warn("Vertex " + gv + " has NaN location; this will cause doom.");
      _log.warn(graph.addBuilderAnnotation(new BogusVertexGeometry(gv)));
    }
    for (    Edge e : gv.getOutgoing()) {
      Geometry g=e.getGeometry();
      if (g == null) {
        continue;
      }
      for (      Coordinate c : g.getCoordinates()) {
        if (Double.isNaN(c.x) || Double.isNaN(c.y)) {
          _log.warn(graph.addBuilderAnnotation(new BogusEdgeGeometry(e)));
        }
      }
      if (e instanceof HopEdge) {
        Coordinate edgeStartCoord=e.getFromVertex().getCoordinate();
        Coordinate edgeEndCoord=e.getToVertex().getCoordinate();
        Coordinate[] geometryCoordinates=g.getCoordinates();
        if (geometryCoordinates.length < 2) {
          _log.warn(graph.addBuilderAnnotation(new BogusEdgeGeometry(e)));
          continue;
        }
        Coordinate geometryStartCoord=geometryCoordinates[0];
        Coordinate geometryEndCoord=geometryCoordinates[geometryCoordinates.length - 1];
        if (getDistanceLibrary().distance(edgeStartCoord,geometryStartCoord) > MAX_VERTEX_SHAPE_ERROR) {
          _log.warn(graph.addBuilderAnnotation(new VertexShapeError(e)));
        }
 else         if (getDistanceLibrary().distance(edgeEndCoord,geometryEndCoord) > MAX_VERTEX_SHAPE_ERROR) {
          _log.warn(graph.addBuilderAnnotation(new VertexShapeError(e)));
        }
      }
    }
  }
}
