{
  List<Polygon> shells=new ArrayList<Polygon>(rings.size());
  List<LinearRing> holes=new ArrayList<LinearRing>(rings.size() / 2);
  for (  LinearRing ring : rings) {
    if (CGAlgorithms.signedArea(ring.getCoordinateSequence()) > 0.0)     holes.add(ring);
 else     shells.add(geometryFactory.createPolygon(ring));
  }
  Collections.sort(shells,new Comparator<Polygon>(){
    @Override public int compare(    Polygon o1,    Polygon o2){
      return o2.getNumPoints() - o1.getNumPoints();
    }
  }
);
  for (  Polygon shell : shells) {
    shell.setUserData(new ArrayList<LinearRing>());
  }
  int nHolesFailed=0;
  for (  LinearRing hole : holes) {
    outer: {
      for (      Polygon shell : shells) {
        if (shell.contains(hole)) {
          ((List<LinearRing>)shell.getUserData()).add(hole);
          break outer;
        }
      }
      nHolesFailed+=1;
    }
  }
  if (nHolesFailed > 0) {
    LOG.error("Could not find a shell for {} holes.",nHolesFailed);
  }
  List<Polygon> punched=new ArrayList<Polygon>(shells.size());
  for (  Polygon shell : shells) {
    List<LinearRing> shellHoles=((List<LinearRing>)shell.getUserData());
    punched.add(geometryFactory.createPolygon((LinearRing)(shell.getExteriorRing()),shellHoles.toArray(new LinearRing[shellHoles.size()])));
  }
  return punched;
}
