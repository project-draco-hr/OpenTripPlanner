{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list0=iprot.readListBegin();
          struct.trips=new ArrayList<org.opentripplanner.api.thrift.definition.TripParameters>(_list0.size);
          for (int _i1=0; _i1 < _list0.size; ++_i1) {
            org.opentripplanner.api.thrift.definition.TripParameters _elem2;
            _elem2=new org.opentripplanner.api.thrift.definition.TripParameters();
            _elem2.read(iprot);
            struct.trips.add(_elem2);
          }
          iprot.readListEnd();
        }
        struct.setTripsIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
    struct.options=new org.opentripplanner.api.thrift.definition.PathOptions();
    struct.options.read(iprot);
    struct.setOptionsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
