{
  Map<TripTimes,TripPattern> patternForTripTimes=Maps.newHashMap();
  ListMultimap<BlockIdAndServiceId,TripTimes> tripTimesForBlock=ArrayListMultimap.create();
  LOG.info("Finding interlining trips based on block IDs.");
  for (  TripPattern pattern : tripPatterns) {
    Timetable timetable=pattern.scheduledTimetable;
    for (    TripTimes tripTimes : timetable.tripTimes) {
      Trip trip=tripTimes.trip;
      if (!Strings.isNullOrEmpty(trip.getBlockId())) {
        tripTimesForBlock.put(new BlockIdAndServiceId(trip),tripTimes);
        patternForTripTimes.put(tripTimes,pattern);
      }
    }
  }
  Multimap<P2<TripPattern>,P2<Trip>> interlines=ArrayListMultimap.create();
  SERVICE_BLOCK:   for (  BlockIdAndServiceId block : tripTimesForBlock.keySet()) {
    List<TripTimes> blockTripTimes=tripTimesForBlock.get(block);
    Collections.sort(blockTripTimes);
    TripTimes prev=null;
    for (    TripTimes curr : blockTripTimes) {
      if (prev != null) {
        if (prev.getDepartureTime(prev.getNumStops() - 1) > curr.getArrivalTime(0)) {
          LOG.error("Trip times within block {} are not increasing on service {} after trip {}.",block.blockId,block.serviceId,prev.trip.getId());
          continue SERVICE_BLOCK;
        }
        TripPattern prevPattern=patternForTripTimes.get(prev);
        TripPattern currPattern=patternForTripTimes.get(curr);
        Stop fromStop=prevPattern.getStop(prevPattern.getStops().size() - 1);
        Stop toStop=currPattern.getStop(0);
        double teleportationDistance=SphericalDistanceLibrary.fastDistance(fromStop.getLat(),fromStop.getLon(),toStop.getLat(),toStop.getLon());
        if (teleportationDistance > maxInterlineDistance) {
        }
 else {
          interlines.put(new P2<TripPattern>(prevPattern,currPattern),new P2<Trip>(prev.trip,curr.trip));
        }
      }
      prev=curr;
    }
  }
  for (  P2<TripPattern> patterns : interlines.keySet()) {
    TripPattern prevPattern=patterns.first;
    TripPattern nextPattern=patterns.second;
    PatternInterlineDwell edge=new PatternInterlineDwell(prevPattern,nextPattern);
    for (    P2<Trip> trips : interlines.get(patterns)) {
      edge.add(trips.first,trips.second);
    }
  }
  LOG.info("Done finding interlining trips and creating the corresponding edges.");
}
