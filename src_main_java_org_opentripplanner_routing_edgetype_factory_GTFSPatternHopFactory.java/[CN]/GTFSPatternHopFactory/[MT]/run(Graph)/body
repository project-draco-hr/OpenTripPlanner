{
  if (fareServiceFactory == null) {
    fareServiceFactory=new DefaultFareServiceFactory();
  }
  fareServiceFactory.processGtfs(_dao);
  loadStops(graph);
  loadPathways(graph);
  loadAgencies(graph);
  clearCachedData();
  for (  AgencyAndId serviceId : _dao.getAllServiceIds()) {
    graph.serviceCodes.put(serviceId,graph.serviceCodes.size());
  }
  LOG.debug("building hops from trips");
  Collection<Trip> trips=_dao.getAllTrips();
  int tripCount=0;
  ListMultimap<Trip,Frequency> frequenciesForTrip=ArrayListMultimap.create();
  for (  Frequency freq : _dao.getAllFrequencies()) {
    frequenciesForTrip.put(freq.getTrip(),freq);
  }
  int freqCount=0;
  int nonFreqCount=0;
  Map<TripPattern,LineString[]> geometriesByTripPattern=Maps.newHashMap();
  TRIP:   for (  Trip trip : trips) {
    if (++tripCount % 100000 == 0) {
      LOG.debug("loading trips {}/{}",tripCount,trips.size());
    }
    if (!_calendarService.getServiceIds().contains(trip.getServiceId())) {
      LOG.warn(graph.addBuilderAnnotation(new TripUndefinedService(trip)));
      continue TRIP;
    }
    List<StopTime> stopTimes=new ArrayList<StopTime>(_dao.getStopTimesForTrip(trip));
    if (removeRepeatedStops(stopTimes)) {
      LOG.warn(graph.addBuilderAnnotation(new RepeatedStops(trip)));
    }
    filterStopTimes(stopTimes,graph);
    interpolateStopTimes(stopTimes);
    if (stopTimes.size() < 2) {
      LOG.warn(graph.addBuilderAnnotation(new TripDegenerate(trip)));
      continue TRIP;
    }
    int directionId;
    try {
      directionId=Integer.parseInt(trip.getDirectionId());
    }
 catch (    NumberFormatException e) {
      LOG.debug("Trip {} does not have direction id, defaults to -1");
      directionId=-1;
    }
    StopPattern stopPattern=new StopPattern(stopTimes);
    TripPattern tripPattern=findOrCreateTripPattern(stopPattern,trip.getRoute(),directionId);
    TripTimes tripTimes=new TripTimes(trip,stopTimes,graph.deduplicator);
    List<Frequency> frequencies=frequenciesForTrip.get(trip);
    if (frequencies != null && !(frequencies.isEmpty())) {
      for (      Frequency freq : frequencies) {
        tripPattern.add(new FrequencyEntry(freq,tripTimes));
        freqCount++;
      }
    }
 else {
      tripPattern.add(tripTimes);
      nonFreqCount++;
    }
    if (!geometriesByTripPattern.containsKey(tripPattern) && trip.getShapeId() != null && trip.getShapeId().getId() != null && !trip.getShapeId().getId().equals("")) {
      geometriesByTripPattern.put(tripPattern,createGeometry(graph,trip,stopTimes));
    }
  }
  LOG.info("Added {} frequency-based and {} single-trip timetable entries.",freqCount,nonFreqCount);
  graph.hasFrequencyService=graph.hasFrequencyService || freqCount > 0;
  graph.hasScheduledService=graph.hasScheduledService || nonFreqCount > 0;
  TripPattern.generateUniqueNames(tripPatterns.values());
  TripPattern.generateUniqueIds(tripPatterns.values());
  for (  TripPattern tripPattern : tripPatterns.values()) {
    tripPattern.makePatternVerticesAndEdges(graph,context.stationStopNodes);
    LineString[] geom=geometriesByTripPattern.get(tripPattern);
    if (geom != null) {
      for (int i=0; i < tripPattern.hopEdges.length; i++) {
        tripPattern.hopEdges[i].setGeometry(geom[i]);
      }
      tripPattern.makeGeometry();
    }
    tripPattern.setServiceCodes(graph.serviceCodes);
    TraverseMode mode=GtfsLibrary.getTraverseMode(tripPattern.route);
    for (    TransitStop tstop : tripPattern.stopVertices) {
      tstop.addMode(mode);
      if (mode == TraverseMode.SUBWAY) {
        tstop.setStreetToStopTime(subwayAccessTime);
      }
    }
  }
  interline(tripPatterns.values(),graph);
  loadTransfers(graph);
  for (  TripPattern tableTripPattern : tripPatterns.values()) {
    tableTripPattern.scheduledTimetable.finish();
  }
  clearCachedData();
  graph.putService(FareService.class,fareServiceFactory.makeFareService());
  graph.putService(OnBoardDepartService.class,new OnBoardDepartServiceImpl());
}
