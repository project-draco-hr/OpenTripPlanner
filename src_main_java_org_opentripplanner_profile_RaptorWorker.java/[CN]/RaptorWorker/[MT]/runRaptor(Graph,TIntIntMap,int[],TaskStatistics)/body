{
  long beginCalcTime=System.currentTimeMillis();
  long totalPropagationTime=0;
  TIntIntMap initialStops=new TIntIntHashMap();
  TIntIntIterator initialIterator=accessTimes.iterator();
  while (initialIterator.hasNext()) {
    initialIterator.advance();
    int stopIndex=initialIterator.key();
    int accessTime=initialIterator.value();
    initialStops.put(stopIndex,accessTime);
  }
  PropagatedTimesStore propagatedTimesStore=new PropagatedTimesStore(graph,data.nTargets);
  int iterations=(req.toTime - req.fromTime - 60) / 60 + 1;
  ts.searchCount=iterations;
  int[][] timesAtTargetsEachMinute=new int[iterations][data.nTargets];
  ts.timeStep=60;
  for (int departureTime=req.toTime - 60, n=0; departureTime >= req.fromTime; departureTime-=60, n++) {
    if (n % 15 == 0) {
      LOG.info("minute {}",n);
    }
    this.runRaptor(initialStops,departureTime);
    long beginPropagationTime=System.currentTimeMillis();
    int[] timesAtTargets=timesAtTargetsEachMinute[n];
    System.arraycopy(walkTimes,0,timesAtTargets,0,timesAtTargets.length);
    if (n > 0) {
      int[] timesAtTargetsNextMinute=timesAtTargetsEachMinute[n - 1];
      for (int i=0; i < timesAtTargets.length; i++) {
        if (timesAtTargetsNextMinute[i] != UNREACHED && timesAtTargetsNextMinute[i] + 60 < timesAtTargets[i]) {
          timesAtTargets[i]=timesAtTargetsNextMinute[i] + 60;
        }
      }
    }
    for (int s=allStopsTouched.nextSetBit(0); s >= 0; s=allStopsTouched.nextSetBit(s + 1)) {
      int baseTimeSeconds=bestNonTransferTimes[s];
      if (baseTimeSeconds != UNREACHED) {
        baseTimeSeconds-=departureTime;
        int[] targets=data.targetsForStop.get(s);
        for (int i=0; i < targets.length; i++) {
          int targetIndex=targets[i++];
          int distance=targets[i];
          int egressWalkTimeSeconds=(int)(distance / req.walkSpeed);
          int propagated_time=baseTimeSeconds + egressWalkTimeSeconds;
          if (timesAtTargets[targetIndex] > propagated_time) {
            timesAtTargets[targetIndex]=propagated_time;
          }
        }
      }
    }
    totalPropagationTime+=(System.currentTimeMillis() - beginPropagationTime);
  }
  long calcTime=System.currentTimeMillis() - beginCalcTime;
  LOG.info("calc time {}sec",calcTime / 1000.0);
  LOG.info("  propagation {}sec",totalPropagationTime / 1000.0);
  LOG.info("  raptor {}sec",(calcTime - totalPropagationTime) / 1000.0);
  ts.propagation=(int)totalPropagationTime;
  ts.transitSearch=(int)(calcTime - totalPropagationTime);
  propagatedTimesStore.setFromArray(timesAtTargetsEachMinute);
  return propagatedTimesStore;
}
