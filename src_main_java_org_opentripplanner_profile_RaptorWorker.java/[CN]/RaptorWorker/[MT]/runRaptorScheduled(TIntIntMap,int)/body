{
  max_time=departureTime + MAX_DURATION;
  round=0;
  advance();
  patternsTouched.clear();
  allStopsTouched.clear();
  stopsTouched.clear();
  TIntIntIterator iterator=initialStops.iterator();
  while (iterator.hasNext()) {
    iterator.advance();
    int stopIndex=iterator.key();
    int time=iterator.value() + departureTime;
    bestTimes[stopIndex]=Math.min(time,bestTimes[stopIndex]);
    markPatternsForStop(stopIndex);
  }
  while (doOneRound(bestTimes,bestNonTransferTimes,previousPatterns,false)) {
    advance();
  }
}
