{
  Graph graph=ConstantsForTests.getInstance().getPortlandGraph();
  String feedId=graph.getFeedIds().iterator().next();
  RoutingRequest options=new RoutingRequest();
  Vertex start=graph.getVertex(feedId + ":8371");
  Vertex end=graph.getVertex(feedId + ":8374");
  options.dateTime=TestUtils.dateInSeconds("America/Los_Angeles",2009,11,1,12,34,25);
  options.setRoutingContext(graph,start,end);
  ShortestPathTree spt=null;
  String[][] maxLines={{"MAX Red Line",null},{"MAX Blue Line",null},{"MAX Green Line",null},{null,"90"},{null,"100"},{null,"200"}};
  for (int i=0; i < maxLines.length; ++i) {
    String lineName=maxLines[i][0];
    String lineId=maxLines[i][1];
    String routeSpecStr=feedId + "_" + (lineName != null ? lineName : "")+ (lineId != null ? "_" + lineId : "");
    options.setBannedRoutes(routeSpecStr);
    spt=aStar.getShortestPathTree(options);
    GraphPath path=spt.getPath(end,true);
    for (    State s : path.states) {
      if (s.getBackEdge() instanceof PatternHop) {
        PatternHop e=(PatternHop)s.getBackEdge();
        Route route=e.getPattern().route;
        assertFalse(options.bannedRoutes.matches(route));
        boolean foundMaxLine=false;
        for (int j=0; j < maxLines.length; ++j) {
          if (j != i) {
            if (e.getName().equals(maxLines[j][0])) {
              foundMaxLine=true;
            }
          }
        }
        assertTrue(foundMaxLine);
      }
    }
  }
}
