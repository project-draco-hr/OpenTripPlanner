{
  DB db=DBMaker.newFileDB(new File(DB)).transactionDisable().asyncWriteEnable().make();
  List<Error> errors=Lists.newArrayList();
  try {
    ZipFile zipfile=new ZipFile(INPUT);
    for (    Class<? extends GtfsEntity> entityClass : gtfsTables) {
      GtfsEntity entity=entityClass.newInstance();
      GtfsTable table=new GtfsTable(entity.getFilename(),false,entity.getGtfsFields(),entityClass);
      System.out.printf("Reading GTFS table '%s' (%soptional)\n",table.name,table.optional ? "" : "not ");
      table.entities=db.getTreeMap(table.name);
      ZipEntry entry=zipfile.getEntry(table.name);
      InputStream zis=zipfile.getInputStream(entry);
      CsvReader reader=new CsvReader(zis,',',Charset.forName("UTF8"));
      reader.readHeaders();
      for (      GtfsField field : table.fields) {
        field.col=reader.getIndex(field.name);
        if (field.col < 0 && !field.optional) {
          String message=String.format("Missing required field %s in file %s.",field.name,table.name);
          errors.add(new Error(message));
        }
      }
      int rec=0;
      while (reader.readRecord()) {
        if (++rec % 100000 == 0) {
          System.out.println(human(rec));
        }
        String[] row=new String[table.fields.length];
        int col=0;
        for (        GtfsField field : table.fields) {
          if (field.col >= 0) {
            String val=reader.get(field.col);
            row[col]=val;
          }
          col++;
        }
        GtfsEntity e=table.klass.newInstance();
        e.setFromStrings(row);
        table.entities.put(e.getKey(),e);
      }
    }
    for (    Error e : errors)     System.out.println(e.message);
    zipfile.close();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  Map<String,Trip> trips=db.getTreeMap("trips.txt");
  ConcurrentNavigableMap<Fun.Tuple2,StopTime> stopTimes=db.getTreeMap("stop_times.txt");
  Set<List<String>> patterns=db.getHashSet("patterns");
  int t=0;
  for (  String trip_id : trips.keySet()) {
    if (++t % 10000 == 0) {
      System.out.printf("trip %s\n",human(t));
    }
    Map<Fun.Tuple2,StopTime> tripStopTimes=stopTimes.subMap(Fun.t2(trip_id,null),Fun.t2(trip_id,Fun.HI));
    List<String> stops=Lists.newArrayList();
    for (    StopTime stopTime : tripStopTimes.values()) {
      stops.add(stopTime.stop_id);
    }
    patterns.add(stops);
  }
  System.out.printf("Total patterns: %d\n",patterns.size());
  db.close();
}
