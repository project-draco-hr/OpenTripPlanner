{
  if (aggregator == null) {
    int nOrigins=origins.getIndividuals().size();
    if (nOrigins > 1 && !outputPath.contains("{}")) {
      LOG.error("output filename must contain origin placeholder.");
      return;
    }
    int i=0;
    for (    Individual oi : origins) {
      RoutingRequest req=buildRequest(oi);
      if (req != null) {
        ShortestPathTree spt=sptService.getShortestPathTree(req);
        destinations.setOutputToTravelTime(spt,oi);
        if (nOrigins == 1) {
          destinations.writeCsv(outputPath);
        }
 else {
          String subName=outputPath.replace("{}",String.format("%d_%s",i,oi.label));
          destinations.writeCsv(subName);
        }
        req.cleanup();
        i+=1;
      }
    }
  }
 else {
    for (    Individual oi : origins) {
      RoutingRequest req=buildRequest(oi);
      if (req != null) {
        ShortestPathTree spt=sptService.getShortestPathTree(req);
        destinations.setOutputToTravelTime(spt,oi);
        double aggregate=aggregator.computeAggregate(destinations);
        oi.output=aggregate;
        req.cleanup();
      }
    }
    origins.writeCsv(outputPath);
  }
}
