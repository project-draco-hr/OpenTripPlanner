{
  int nOrigins=origins.getIndividuals().size();
  if (aggregator != null) {
    ResultSet aggregates=new ResultSet(origins);
    int i=0;
    for (    Individual oi : origins) {
      LOG.debug("individual {}: {}",i,oi);
      if (i % 100 == 0)       LOG.info("individual {}/{}",i,nOrigins);
      RoutingRequest req=buildRequest(oi);
      if (req != null) {
        ShortestPathTree spt=sptService.getShortestPathTree(req);
        ResultSet result=ResultSet.forTravelTimes(destinations,spt);
        aggregates.results[i]=aggregator.computeAggregate(result);
        req.cleanup();
      }
      i+=1;
    }
    aggregates.writeAppropriateFormat(outputPath);
  }
 else   if (accumulator != null) {
    ResultSet accumulated=new ResultSet(destinations);
    int i=0;
    for (    Individual oi : origins) {
      LOG.debug("individual {}: {}",i,oi);
      if (i % 100 == 0)       LOG.info("individual {}/{}",i,nOrigins);
      RoutingRequest req=buildRequest(oi);
      if (req != null) {
        ShortestPathTree spt=sptService.getShortestPathTree(req);
        ResultSet times=ResultSet.forTravelTimes(destinations,spt);
        accumulator.accumulate(oi.input,times,accumulated);
        req.cleanup();
      }
      i+=1;
    }
    accumulator.finish();
    accumulated.writeAppropriateFormat(outputPath);
  }
 else {
    if (nOrigins > 1 && !outputPath.contains("{}")) {
      LOG.error("output filename must contain origin placeholder.");
      return;
    }
    int i=0;
    for (    Individual oi : origins) {
      RoutingRequest req=buildRequest(oi);
      if (req != null) {
        ShortestPathTree spt=sptService.getShortestPathTree(req);
        ResultSet result=ResultSet.forTravelTimes(destinations,spt);
        if (nOrigins == 1) {
          result.writeAppropriateFormat(outputPath);
        }
 else {
          String subName=outputPath.replace("{}",String.format("%d_%s",i,oi.label));
          result.writeAppropriateFormat(subName);
        }
        req.cleanup();
        i+=1;
      }
    }
  }
}
