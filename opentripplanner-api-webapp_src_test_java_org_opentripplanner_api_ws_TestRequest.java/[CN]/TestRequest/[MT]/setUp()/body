{
  DataHolder holder=DataHolder.getInstance();
  graph=holder.graph;
  planner=holder.planner;
  pathService=holder.pathService;
  if (graph != null) {
    return;
  }
  planner=new Planner();
  pathService=new ContractionPathServiceImpl();
  graph=new Graph();
  pathService.setRemainingWeightHeuristicFactory(new DefaultRemainingWeightHeuristicFactoryImpl());
  ShapefileStreetGraphBuilderImpl builder=new ShapefileStreetGraphBuilderImpl();
  FeatureSourceFactory factory=new ShapefileFeatureSourceFactoryImpl(new File("src/test/resources/portland/Streets_pdx.shp"));
  builder.setFeatureSourceFactory(factory);
  ShapefileStreetSchema schema=new ShapefileStreetSchema();
  schema.setIdAttribute("LOCALID");
  schema.setNameAttribute("FULL_NAME");
  CaseBasedTraversalPermissionConverter perms=new CaseBasedTraversalPermissionConverter("DIRECTION",StreetTraversalPermission.PEDESTRIAN_AND_BICYCLE);
  perms.addPermission("2",StreetTraversalPermission.ALL,StreetTraversalPermission.PEDESTRIAN);
  perms.addPermission("3",StreetTraversalPermission.PEDESTRIAN,StreetTraversalPermission.ALL);
  perms.addPermission("1",StreetTraversalPermission.ALL,StreetTraversalPermission.ALL);
  schema.setPermissionConverter(perms);
  schema.setNoteConverter(new AttributeFeatureConverter<String>("PREFIX"));
  builder.setSchema(schema);
  builder.buildGraph(graph,new HashMap<Class<?>,Object>());
  GraphServiceImpl graphService=new GraphServiceImpl();
  graphService.setGraph(graph);
  pathService.setGraphService(graphService);
  ContractionRoutingServiceImpl routingService=new ContractionRoutingServiceImpl();
  routingService.setGraphService(graphService);
  pathService.setRoutingService(routingService);
  SingletonPathServiceFactoryImpl pathServiceFactory=new SingletonPathServiceFactoryImpl();
  pathServiceFactory.setPathService(pathService);
  planner.setPathServiceFactory(pathServiceFactory);
  holder.graph=graph;
  holder.planner=planner;
  holder.pathService=pathService;
}
