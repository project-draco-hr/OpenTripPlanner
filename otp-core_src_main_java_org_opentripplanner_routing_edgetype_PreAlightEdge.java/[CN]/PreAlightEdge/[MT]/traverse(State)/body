{
  RoutingRequest options=s0.getOptions();
  if (!options.getBannedStops().isEmpty() && tov instanceof TransitStop) {
    if (options.getBannedStops().matches(((TransitStop)tov).getStop())) {
      return null;
    }
  }
  if (options.isArriveBy()) {
    if (!options.getModes().isTransit())     return null;
    if (s0.isAlightedLocal()) {
      return null;
    }
    TransitStop toVertex=(TransitStop)getToVertex();
    if (toVertex.isLocal() && s0.isEverBoarded()) {
      return null;
    }
    if (s0.getNumBoardings() > options.maxTransfers)     return null;
    long t0=s0.getTimeSeconds();
    long slack;
    if (s0.isEverBoarded()) {
      slack=options.getTransferSlack() - options.getBoardSlack();
    }
 else {
      slack=options.getAlightSlack();
    }
    long alight_before=t0 - slack;
    int transfer_penalty=0;
    if (s0.isEverBoarded()) {
      transfer_penalty+=options.transferPenalty;
    }
    StateEditor s1=s0.edit(this);
    s1.setTimeSeconds(alight_before);
    s1.setEverBoarded(true);
    long wait_cost=t0 - alight_before;
    s1.incrementWeight(wait_cost + transfer_penalty);
    s1.setBackMode(getMode());
    return s1.makeState();
  }
 else {
    StateEditor s1=s0.edit(this);
    TransitStop toVertex=(TransitStop)getToVertex();
    if (toVertex.isLocal()) {
      s1.setAlightedLocal(true);
    }
    s1.alightTransit();
    s1.incrementTimeInSeconds(options.getAlightSlack());
    s1.setBackMode(getMode());
    return s1.makeState();
  }
}
