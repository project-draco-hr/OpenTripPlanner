{
  StateData data=s0.getData();
  if (data.isAlightedLocal()) {
    return null;
  }
  TransitStop fromVertex=(TransitStop)getFromVertex();
  if (fromVertex.isLocal() && data.isEverBoarded()) {
    return null;
  }
  if (data.getNumBoardings() > options.maxTransfers)   return null;
  long t0=s0.getTime();
  long board_after=t0 + options.minTransferTime * 1000;
  long transfer_penalty=0;
  if (data.getLastAlightedTime() != 0) {
    TransferTable transferTable=options.getTransferTable();
    if (transferTable.hasPreferredTransfers()) {
      transfer_penalty=options.baseTransferPenalty;
    }
    int transfer_time=transferTable.getTransferTime(data.getPreviousStop(),getToVertex());
    if (transfer_time == TransferTable.UNKNOWN_TRANSFER) {
    }
 else     if (transfer_time >= 0) {
      board_after=data.getLastAlightedTime() + transfer_time * 1000;
      if (board_after < t0)       board_after=t0;
    }
 else     if (transfer_time == TransferTable.FORBIDDEN_TRANSFER) {
      return null;
    }
 else     if (transfer_time == TransferTable.PREFERRED_TRANSFER) {
      transfer_penalty=0;
    }
 else {
      throw new IllegalStateException("Undefined value in transfer table.");
    }
  }
 else {
    board_after=t0 + options.minTransferTime * 500;
  }
  if (options.optimizeFor == OptimizeType.TRANSFERS && data.isEverBoarded()) {
    transfer_penalty+=options.optimizeTransferPenalty;
  }
  Editor edit=s0.edit();
  edit.setTime(board_after);
  edit.setEverBoarded(true);
  State s1=edit.createState();
  long wait_cost=(board_after - t0) / 1000;
  return new TraverseResult(wait_cost + options.boardCost + transfer_penalty,s1,this);
}
