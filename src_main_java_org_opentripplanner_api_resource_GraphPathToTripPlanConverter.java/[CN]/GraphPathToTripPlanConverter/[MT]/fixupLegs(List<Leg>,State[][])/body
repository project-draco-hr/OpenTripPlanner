{
  for (int i=0; i < legsStates.length; i++) {
    boolean toOther=i + 1 < legsStates.length && legs.get(i + 1).interlineWithPreviousLeg;
    boolean fromOther=legs.get(i).interlineWithPreviousLeg;
    String boardRule=null;
    String alightRule=null;
    for (int j=1; j < legsStates[i].length; j++) {
      if (legsStates[i][j].getBackEdge() instanceof PatternEdge) {
        PatternEdge patternEdge=(PatternEdge)legsStates[i][j].getBackEdge();
        TripPattern tripPattern=patternEdge.getPattern();
        Integer fromIndex=legs.get(i).from.stopIndex;
        Integer toIndex=legs.get(i).to.stopIndex;
        int boardType=(fromIndex != null) ? (tripPattern.getBoardType(fromIndex)) : 0;
        int alightType=(toIndex != null) ? (tripPattern.getAlightType(toIndex)) : 0;
        boardRule=getBoardAlightMessage(boardType);
        alightRule=getBoardAlightMessage(alightType);
      }
      if (legsStates[i][j].getBackEdge() instanceof PathwayEdge) {
        legs.get(i).pathway=true;
      }
    }
    if (i + 1 < legsStates.length) {
      legs.get(i + 1).from.arrival=legs.get(i).to.arrival;
      legs.get(i).to.departure=legs.get(i + 1).from.departure;
      if (legs.get(i).isTransitLeg() && !legs.get(i + 1).isTransitLeg()) {
        legs.get(i + 1).from=legs.get(i).to;
      }
      if (!legs.get(i).isTransitLeg() && legs.get(i + 1).isTransitLeg()) {
        legs.get(i).to=legs.get(i + 1).from;
      }
    }
    if (legs.get(i).isTransitLeg()) {
      if (boardRule != null && !fromOther) {
        legs.get(i).boardRule=boardRule;
      }
      if (alightRule != null && !toOther) {
        legs.get(i).alightRule=alightRule;
      }
    }
  }
}
