{
  final TraverseMode mode=preferredMode != null ? preferredMode : TraverseMode.TRANSIT;
  RoutingRequest routingRequest=new RoutingRequest();
  routingRequest.setNumItineraries(1);
  routingRequest.setArriveBy(dateTime < 0);
  routingRequest.dateTime=Math.abs(dateTime);
  if (fromVertex != null && !fromVertex.isEmpty()) {
    routingRequest.from=(new GenericLocation(null,agencyId + ":" + fromVertex));
  }
  if (toVertex != null && !toVertex.isEmpty()) {
    routingRequest.to=new GenericLocation(null,agencyId + ":" + toVertex);
  }
  if (onTripId != null && !onTripId.isEmpty()) {
    routingRequest.startingTransitTripId=(new AgencyAndId(agencyId,onTripId));
  }
  routingRequest.setRoutingContext(graph);
  routingRequest.setWheelchairAccessible(wheelchairAccessible);
  routingRequest.transferPenalty=(preferLeastTransfers ? 300 : 0);
  routingRequest.setModes(new TraverseModeSet(TraverseMode.WALK,mode));
  if (excludedRoute != null && !excludedRoute.isEmpty()) {
    routingRequest.setBannedRoutes(agencyId + "__" + excludedRoute);
  }
  if (excludedStop != null && !excludedStop.isEmpty()) {
    routingRequest.setBannedStopsHard(agencyId + ":" + excludedStop);
  }
  routingRequest.setOtherThanPreferredRoutesPenalty(0);
  routingRequest.setWaitReluctance(1);
  routingRequest.setWalkBoardCost(30);
  List<GraphPath> paths=new GraphPathFinder(graph).getPaths(routingRequest);
  TripPlan tripPlan=PlanGenerator.generatePlan(paths,routingRequest);
  itinerary=tripPlan.itinerary.get(0);
  assertEquals(legCount,itinerary.legs.size());
  return itinerary.legs.toArray(new Leg[legCount]);
}
