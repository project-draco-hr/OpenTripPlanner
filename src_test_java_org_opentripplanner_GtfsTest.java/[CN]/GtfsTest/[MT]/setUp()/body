{
  File gtfs=new File("src/test/resources/" + getFeedName());
  File gtfsRealTime=new File("src/test/resources/" + getFeedName() + ".pb");
  GtfsBundle gtfsBundle=new GtfsBundle(gtfs);
  feedId=new GtfsFeedId.Builder().id("FEED").build();
  gtfsBundle.setFeedId(feedId);
  List<GtfsBundle> gtfsBundleList=Collections.singletonList(gtfsBundle);
  GtfsModule gtfsGraphBuilderImpl=new GtfsModule(gtfsBundleList);
  alertsUpdateHandler=new AlertsUpdateHandler();
  graph=new Graph();
  router=new Router("TEST",graph);
  gtfsBundle.setTransfersTxtDefinesStationPaths(true);
  gtfsGraphBuilderImpl.buildGraph(graph,null);
  agencyId=graph.getAgencies(feedId.getId()).iterator().next().getId();
  System.out.printf("Set the agency ID for this test to %s\n",agencyId);
  graph.index(new DefaultStreetVertexIndexFactory());
  timetableSnapshotSource=new TimetableSnapshotSource(graph);
  timetableSnapshotSource.purgeExpiredData=(false);
  graph.timetableSnapshotSource=(timetableSnapshotSource);
  alertPatchServiceImpl=new AlertPatchServiceImpl(graph);
  alertsUpdateHandler.setAlertPatchService(alertPatchServiceImpl);
  alertsUpdateHandler.setFeedId(feedId.getId());
  try {
    final boolean fullDataset=false;
    InputStream inputStream=new FileInputStream(gtfsRealTime);
    FeedMessage feedMessage=FeedMessage.PARSER.parseFrom(inputStream);
    List<FeedEntity> feedEntityList=feedMessage.getEntityList();
    List<TripUpdate> updates=new ArrayList<TripUpdate>(feedEntityList.size());
    for (    FeedEntity feedEntity : feedEntityList) {
      updates.add(feedEntity.getTripUpdate());
    }
    timetableSnapshotSource.applyTripUpdates(graph,fullDataset,updates,feedId.getId());
    alertsUpdateHandler.update(feedMessage);
  }
 catch (  Exception exception) {
  }
}
