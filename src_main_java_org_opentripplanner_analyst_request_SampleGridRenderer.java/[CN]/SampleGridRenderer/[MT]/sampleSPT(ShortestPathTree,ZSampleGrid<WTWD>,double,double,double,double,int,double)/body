{
  final DistanceLibrary distanceLibrary=SphericalDistanceLibrary.getInstance();
  AccumulativeMetric<WTWD> accMetric=new AccumulativeMetric<WTWD>(){
    @Override public WTWD cumulateSample(    Coordinate C0,    Coordinate Cs,    WTWD z,    WTWD zS,    double offRoadSpeed){
      double t=z.wTime / z.w;
      double b=z.wBoardings / z.w;
      double wd=z.wWalkDist / z.w;
      double d=distanceLibrary.fastDistance(C0,Cs,cosLat);
      double dt=d / offRoadSpeed;
      double w=1 / ((d + d0) * (d + d0));
      if (zS == null) {
        zS=new WTWD();
        zS.d=Double.MAX_VALUE;
      }
      zS.w=zS.w + w;
      zS.wTime=zS.wTime + w * (t + dt);
      zS.wBoardings=zS.wBoardings + w * b;
      zS.wWalkDist=zS.wWalkDist + w * (wd + d);
      if (d < zS.d)       zS.d=d;
      return zS;
    }
    /** 
 * A Generated closing sample take 1) as off-road distance, the minimum of the off-road
 * distance of all enclosing samples, plus the grid size, and 2) as time the minimum
 * time of all enclosing samples plus the grid size * off-road walk speed as additional
 * time. All this are approximations.
 * TODO Is there a better way of computing this? Here the computation will be different
 * based on the order where we close the samples.
 */
    @Override public WTWD closeSample(    WTWD zUp,    WTWD zDown,    WTWD zRight,    WTWD zLeft){
      double dMin=Double.MAX_VALUE;
      double tMin=Double.MAX_VALUE;
      double bMin=Double.MAX_VALUE;
      double wdMin=Double.MAX_VALUE;
      for (      WTWD z : new WTWD[]{zUp,zDown,zRight,zLeft}) {
        if (z == null)         continue;
        if (z.d < dMin)         dMin=z.d;
        double t=z.wTime / z.w;
        if (t < tMin)         tMin=t;
        double b=z.wBoardings / z.w;
        if (b < bMin)         bMin=b;
        double wd=z.wWalkDist / z.w;
        if (wd < wdMin)         wdMin=wd;
      }
      WTWD z=new WTWD();
      z.w=1.0;
      z.wTime=tMin + gridSizeMeters / v0;
      z.wBoardings=bMin;
      z.wWalkDist=wdMin + gridSizeMeters;
      z.d=dMin + gridSizeMeters;
      return z;
    }
  }
;
  final AccumulativeGridSampler<WTWD> gridSampler=new AccumulativeGridSampler<WTWD>(sampleGrid,accMetric);
  SPTWalker johnny=new SPTWalker(spt);
  johnny.walk(new SPTVisitor(){
    @Override public final boolean accept(    Edge e){
      return e instanceof StreetEdge;
    }
    @Override public final void visit(    Edge e,    Coordinate c,    State s0,    State s1,    double d0,    double d1,    double speed){
      double wd0=s0.getWalkDistance() + d0;
      double wd1=s0.getWalkDistance() + d1;
      double t0=wd0 > maxWalkDistance ? Double.POSITIVE_INFINITY : s0.getActiveTime() + d0 / speed;
      double t1=wd1 > maxWalkDistance ? Double.POSITIVE_INFINITY : s1.getActiveTime() + d1 / speed;
      if (t0 < maxTimeSec || t1 < maxTimeSec) {
        if (!Double.isInfinite(t0) || !Double.isInfinite(t1)) {
          WTWD z=new WTWD();
          z.w=1.0;
          z.d=0.0;
          if (t0 < t1) {
            z.wTime=t0;
            z.wBoardings=s0.getNumBoardings();
            z.wWalkDist=s0.getWalkDistance() + d0;
          }
 else {
            z.wTime=t1;
            z.wBoardings=s1.getNumBoardings();
            z.wWalkDist=s1.getWalkDistance() + d1;
          }
          gridSampler.addSamplingPoint(c,z,speed);
        }
      }
    }
  }
,d0);
  gridSampler.close();
}
