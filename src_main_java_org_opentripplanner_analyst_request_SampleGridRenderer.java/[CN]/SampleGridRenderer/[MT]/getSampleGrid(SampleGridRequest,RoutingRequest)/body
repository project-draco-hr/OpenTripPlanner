{
  final double D0=getOffRoadDistanceMeters(spgRequest.precisionMeters);
  final double V0=1.00;
  long t0=System.currentTimeMillis();
  long tOvershot=(long)(2 * D0 / V0);
  sptRequest.worstTime=(sptRequest.dateTime + (sptRequest.arriveBy ? -spgRequest.maxTimeSec - tOvershot : spgRequest.maxTimeSec + tOvershot));
  sptRequest.batch=(true);
  sptRequest.setRoutingContext(graph);
  final ShortestPathTree spt=sptServiceFactory.instantiate().getShortestPathTree(sptRequest);
  long t1=System.currentTimeMillis();
  Coordinate coordinateOrigin=spgRequest.coordinateOrigin;
  if (coordinateOrigin == null)   coordinateOrigin=sptRequest.from.getCoordinate();
  final double gridSizeMeters=spgRequest.precisionMeters;
  final double cosLat=FastMath.cos(toRadians(coordinateOrigin.y));
  double dY=Math.toDegrees(gridSizeMeters / SphericalDistanceLibrary.RADIUS_OF_EARTH_IN_M);
  double dX=dY / cosLat;
  SparseMatrixZSampleGrid<WTWD> sampleGrid=new SparseMatrixZSampleGrid<WTWD>(16,spt.getVertexCount(),dX,dY,coordinateOrigin);
  sampleSPT(spt,sampleGrid,gridSizeMeters * 0.7,gridSizeMeters,V0,sptRequest.getMaxWalkDistance(),cosLat);
  sptRequest.cleanup();
  long t2=System.currentTimeMillis();
  LOG.info("Computed SPT in {}msec, {}msec for sampling ({} msec total)",(int)(t1 - t0),(int)(t2 - t1),(int)(t2 - t0));
  return sampleGrid;
}
