{
  final Boolean results[]=new Boolean[4];
  final double speed=new RoutingRequest().walkSpeed;
  Graph graph=new Graph();
  Stop stopA=new Stop();
  Stop stopB=new Stop();
  Stop stopC=new Stop();
  Stop stopD=new Stop();
  Stop stopE=new Stop();
  stopA.setId(new AgencyAndId("Stop","A"));
  stopA.setLon(0);
  stopA.setLat(0);
  stopB.setId(new AgencyAndId("Stop","B"));
  stopB.setLon(0);
  stopB.setLat(3);
  stopC.setId(new AgencyAndId("Stop","C"));
  stopC.setLon(3);
  stopC.setLat(3);
  stopD.setId(new AgencyAndId("Stop","D"));
  stopD.setLon(3);
  stopD.setLat(0);
  stopE.setId(new AgencyAndId("Stop","E"));
  stopE.setLon(2);
  stopE.setLat(2);
  TransitStop transitStopA=new TransitStop(graph,stopA);
  TransitStop transitStopB=new TransitStop(graph,stopB);
  TransitStop transitStopC=new TransitStop(graph,stopC);
  TransitStop transitStopD=new TransitStop(graph,stopD);
  TransitStop transitStopE=new TransitStop(graph,stopE);
  IntersectionVertex intersectionA=new IntersectionVertex(graph,"Intersection A",1,1);
  IntersectionVertex intersectionB=new IntersectionVertex(graph,"Intersection B",1,2);
  IntersectionVertex intersectionC=new IntersectionVertex(graph,"Intersection C",2,2);
  IntersectionVertex intersectionD=new IntersectionVertex(graph,"Intersection D",2,1);
  intersectionA.setFreeFlowing(true);
  intersectionB.setFreeFlowing(true);
  intersectionC.setFreeFlowing(true);
  intersectionD.setFreeFlowing(true);
  new StreetTransitLink(transitStopA,intersectionA,true);
  new StreetTransitLink(intersectionB,transitStopB,true);
  new StreetTransitLink(intersectionC,transitStopC,true);
  new StreetTransitLink(intersectionD,transitStopD,true);
  new StreetTransitLink(intersectionA,transitStopE,true);
  PackedCoordinateSequence coordinatesAB=new PackedCoordinateSequence.Double(new double[]{1,1,1,2},2);
  PackedCoordinateSequence coordinatesBC=new PackedCoordinateSequence.Double(new double[]{1,2,2,2},2);
  PackedCoordinateSequence coordinatesCD=new PackedCoordinateSequence.Double(new double[]{2,2,2,1},2);
  PackedCoordinateSequence coordinatesAD=new PackedCoordinateSequence.Double(new double[]{1,1,2,1},2);
  GeometryFactory geometryFactory=new GeometryFactory();
  LineString lineStringAB=new LineString(coordinatesAB,geometryFactory);
  LineString lineStringBC=new LineString(coordinatesBC,geometryFactory);
  LineString lineStringCD=new LineString(coordinatesCD,geometryFactory);
  LineString lineStringAD=new LineString(coordinatesAD,geometryFactory);
  new PlainStreetEdge(intersectionA,intersectionB,lineStringAB,"Edge AB",2 * speed,StreetTraversalPermission.ALL,false,0);
  new PlainStreetEdge(intersectionB,intersectionC,lineStringBC,"Edge BC",4 * speed,StreetTraversalPermission.ALL,false,0);
  new PlainStreetEdge(intersectionC,intersectionD,lineStringCD,"Edge CD",8 * speed,StreetTraversalPermission.ALL,false,0);
  new PlainStreetEdge(intersectionA,intersectionD,lineStringAD,"Edge AD",16 * speed,StreetTraversalPermission.ALL,false,0);
  StreetfulStopLinker streetfulStopLinker=new StreetfulStopLinker();
  assertEquals(9,graph.countVertices());
  assertEquals(9,graph.countEdges());
  streetfulStopLinker.maxDuration=1;
  streetfulStopLinker.buildGraph(graph,null);
  assertEquals(9,graph.countEdges());
  streetfulStopLinker.maxDuration=16;
  streetfulStopLinker.buildGraph(graph,null);
  assertEquals(13,graph.countEdges());
  assertEquals(9,graph.countVertices());
  for (  Edge edge : graph.getEdges()) {
    if (edge instanceof SimpleTransfer) {
      assertEquals(transitStopA,edge.getFromVertex());
      assertNotSame(transitStopA,edge.getToVertex());
      if (edge.getToVertex().equals(transitStopB)) {
        LineString lineString=edge.getGeometry();
        assertEquals(2,lineString.getNumPoints());
        assertEquals(1.0,lineString.getPointN(0).getX(),0.0);
        assertEquals(1.0,lineString.getPointN(0).getY(),0.0);
        assertEquals(1.0,lineString.getPointN(1).getX(),0.0);
        assertEquals(2.0,lineString.getPointN(1).getY(),0.0);
        results[0]=(edge.getDistance() == 2.0 * speed);
      }
      if (edge.getToVertex().equals(transitStopC)) {
        LineString lineString=edge.getGeometry();
        assertEquals(3,lineString.getNumPoints());
        assertEquals(1.0,lineString.getPointN(0).getX(),0.0);
        assertEquals(1.0,lineString.getPointN(0).getY(),0.0);
        assertEquals(1.0,lineString.getPointN(1).getX(),0.0);
        assertEquals(2.0,lineString.getPointN(1).getY(),0.0);
        assertEquals(2.0,lineString.getPointN(2).getX(),0.0);
        assertEquals(2.0,lineString.getPointN(2).getY(),0.0);
        results[1]=(edge.getDistance() == 6.0 * speed);
      }
      if (edge.getToVertex().equals(transitStopD)) {
        LineString lineString=edge.getGeometry();
        assertEquals(4,lineString.getNumPoints());
        assertEquals(1.0,lineString.getPointN(0).getX(),0.0);
        assertEquals(1.0,lineString.getPointN(0).getY(),0.0);
        assertEquals(1.0,lineString.getPointN(1).getX(),0.0);
        assertEquals(2.0,lineString.getPointN(1).getY(),0.0);
        assertEquals(2.0,lineString.getPointN(2).getX(),0.0);
        assertEquals(2.0,lineString.getPointN(2).getY(),0.0);
        assertEquals(2.0,lineString.getPointN(3).getX(),0.0);
        assertEquals(1.0,lineString.getPointN(3).getY(),0.0);
        results[2]=(edge.getDistance() == 14.0 * speed);
      }
      if (edge.getToVertex().equals(transitStopE)) {
        LineString lineString=edge.getGeometry();
        assertEquals(2,lineString.getNumPoints());
        assertEquals(1.0,lineString.getPointN(0).getX(),0.0);
        assertEquals(1.0,lineString.getPointN(0).getY(),0.0);
        assertEquals(1.0,lineString.getPointN(1).getX(),0.0);
        assertEquals(1.0,lineString.getPointN(1).getY(),0.0);
        results[3]=(edge.getDistance() == 0.0 * speed);
      }
    }
  }
  assertArrayEquals(new Boolean[]{true,true,true,true},results);
}
