{
  if (nq < 4)   nq=4;
  if (nq > 20)   nq=20;
  if (times.length != weights.length)   throw new AssertionError();
  List<TimeWeight> tws=Lists.newArrayListWithCapacity(times.length);
  for (int i=0; i < times.length; i++) {
    TimeWeight tw=new TimeWeight();
    tw.weight=weights[i];
    tw.time=times[i];
    tws.add(tw);
  }
  Collections.sort(tws);
  if (tws.get(0).time < 0)   throw new AssertionError("Negative time.");
  int sum=0;
  int len=0;
  for (  TimeWeight tw : tws) {
    if (tw.time == Integer.MAX_VALUE)     break;
    sum+=tw.weight;
    len+=1;
  }
  count=sum;
  breaks=new int[nq + 1];
  if (len < 2)   return;
  tws=tws.subList(0,len);
  TimeWeight tw0=tws.get(0);
  TimeWeight tw1=tws.get(1);
  breaks[0]=tw0.time;
  breaks[nq]=tws.get(tws.size() - 1).time;
  int cw0=0, cw1=-1;
  for (int q=1, wdi=0; q < nq; q++) {
    float cw=((float)q) * sum / nq;
    while (cw1 < cw) {
      wdi+=1;
      tw0=tws.get(wdi);
      tw1=tws.get(wdi + 1);
      cw0+=tw0.weight;
      cw1=cw0 + tw1.weight;
    }
    float frac=(cw - cw0) / tw1.weight;
    float t=tw0.time + (frac * (tw1.time - tw0.time));
    breaks[q]=(int)t;
  }
}
