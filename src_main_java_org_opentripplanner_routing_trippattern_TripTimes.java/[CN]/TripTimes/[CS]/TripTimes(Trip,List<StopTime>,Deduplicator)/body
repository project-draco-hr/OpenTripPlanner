{
  this.trip=trip;
  final int nStops=stopTimes.size();
  final int[] departures=new int[nStops];
  final int[] arrivals=new int[nStops];
  final int[] sequences=new int[nStops];
  final BitSet timepoints=new BitSet(nStops);
  timeShift=stopTimes.get(0).getArrivalTime();
  int s=0;
  for (  final StopTime st : stopTimes) {
    departures[s]=st.getDepartureTime() - timeShift;
    arrivals[s]=st.getArrivalTime() - timeShift;
    sequences[s]=st.getStopSequence();
    timepoints.set(s,st.getTimepoint() == 1);
    s++;
  }
  this.scheduledDepartureTimes=deduplicator.deduplicateIntArray(departures);
  this.scheduledArrivalTimes=deduplicator.deduplicateIntArray(arrivals);
  this.stopSequences=deduplicator.deduplicateIntArray(sequences);
  this.headsigns=deduplicator.deduplicateStringArray(makeHeadsignsArray(stopTimes));
  this.arrivalTimes=null;
  this.departureTimes=null;
  this.timepoints=deduplicator.deduplicateBitSet(timepoints);
  LOG.trace("trip {} has timepoint at indexes {}",trip,timepoints);
}
