{
  Hints hints=new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,Boolean.TRUE);
  CRSAuthorityFactory factory=ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG",hints);
  CoordinateReferenceSystem worldCRS=factory.createCoordinateReferenceSystem("EPSG:4326");
  DefaultQuery query=new DefaultQuery();
  query.setCoordinateSystem(sourceCRS);
  query.setCoordinateSystemReproject(worldCRS);
  FeatureCollection<SimpleFeatureType,SimpleFeature> features=featureSource.getFeatures(query);
  Iterator<SimpleFeature> i=features.iterator();
  try {
    HashMap<Coordinate,TreeSet<String>> coordinateToStreets=new HashMap<Coordinate,TreeSet<String>>();
    while (i.hasNext()) {
      SimpleFeature feature=i.next();
      LineString geom=toLineString((Geometry)feature.getDefaultGeometry());
      for (      Coordinate coord : geom.getCoordinates()) {
        Coordinate rounded=new Coordinate(Math.round(coord.x * 1048576) / 1048576.0,Math.round(coord.y * 1048576) / 1048576.0);
        TreeSet<String> streets=coordinateToStreets.get(rounded);
        if (streets == null) {
          streets=new TreeSet<String>();
          coordinateToStreets.put(rounded,streets);
        }
        streets.add((String)feature.getAttribute("Street"));
      }
    }
    features.close(i);
    features=featureSource.getFeatures(query);
    HashMap<String,HashMap<Coordinate,Integer>> intersectionNameToId=new HashMap<String,HashMap<Coordinate,Integer>>();
    i=features.iterator();
    while (i.hasNext()) {
      SimpleFeature feature=i.next();
      LineString geom=toLineString((Geometry)feature.getDefaultGeometry());
      String id="" + feature.getAttribute("StreetCode");
      String name="" + feature.getAttribute("Street");
      Coordinate[] coordinates=geom.getCoordinates();
      String trafDir=(String)feature.getAttribute("TrafDir");
      Coordinate startCoordinate=new Coordinate(Math.round(coordinates[0].x * 1048576) / 1048576.0,Math.round(coordinates[0].y * 1048576) / 1048576.0);
      Coordinate endCoordinate=new Coordinate(Math.round(coordinates[coordinates.length - 1].x * 1048576) / 1048576.0,Math.round(coordinates[coordinates.length - 1].y * 1048576) / 1048576.0);
      String startIntersectionName=getIntersectionName(coordinateToStreets,intersectionNameToId,startCoordinate);
      if (startIntersectionName == "null") {
        System.out.println(name);
      }
      String endIntersectionName=getIntersectionName(coordinateToStreets,intersectionNameToId,endCoordinate);
      Vertex startCorner=new Vertex(startIntersectionName,startCoordinate.x,startCoordinate.y);
      startCorner=graph.addVertex(startCorner);
      startCorner.type=Intersection.class;
      Vertex endCorner=new Vertex(endIntersectionName,endCoordinate.x,endCoordinate.y);
      endCorner=graph.addVertex(endCorner);
      endCorner.type=Intersection.class;
      double length=JTS.orthodromicDistance(coordinates[0],coordinates[coordinates.length - 1],worldCRS);
      Street street=new Street(startCorner,endCorner,id,name,length);
      street.setGeometry(geom);
      graph.addEdge(street);
      Street backStreet=new Street(endCorner,startCorner,id,name,length);
      backStreet.setGeometry(geom.reverse());
      graph.addEdge(backStreet);
      if (trafDir.equals("W")) {
        street.setTraversalPermission(StreetTraversalPermission.ALL);
        backStreet.setTraversalPermission(StreetTraversalPermission.PEDESTRIAN_ONLY);
      }
 else       if (trafDir.equals("A")) {
        backStreet.setTraversalPermission(StreetTraversalPermission.ALL);
        street.setTraversalPermission(StreetTraversalPermission.PEDESTRIAN_ONLY);
      }
 else       if (trafDir.equals("T")) {
        backStreet.setTraversalPermission(StreetTraversalPermission.ALL);
        street.setTraversalPermission(StreetTraversalPermission.ALL);
      }
 else {
        backStreet.setTraversalPermission(StreetTraversalPermission.PEDESTRIAN_AND_BICYCLE_ONLY);
        street.setTraversalPermission(StreetTraversalPermission.PEDESTRIAN_AND_BICYCLE_ONLY);
      }
    }
  }
  finally {
    features.close(i);
  }
}
