{
  if (graph == null) {
    throw new GraphNotFoundException();
  }
  this.opt=routingRequest;
  this.graph=graph;
  this.debugOutput.startedCalculating();
  if (routingRequest.ignoreRealtimeUpdates) {
    timetableSnapshot=null;
  }
 else {
    TimetableSnapshotSource timetableSnapshotSource=graph.timetableSnapshotSource;
    if (timetableSnapshotSource == null) {
      timetableSnapshot=null;
    }
 else {
      timetableSnapshot=timetableSnapshotSource.getTimetableSnapshot();
    }
  }
  calendarService=graph.getCalendarService();
  setServiceDays();
  Edge fromBackEdge=null;
  Edge toBackEdge=null;
  if (findPlaces) {
    if (!opt.batch || opt.arriveBy) {
      toVertex=graph.streetIndex.getVertexForLocation(opt.to,opt);
      if (opt.to.hasEdgeId()) {
        toBackEdge=graph.getEdgeById(opt.to.edgeId);
      }
    }
 else {
      toVertex=null;
    }
    if (opt.startingTransitTripId != null && !opt.arriveBy) {
      OnBoardDepartService onBoardDepartService=graph.getService(OnBoardDepartService.class);
      if (onBoardDepartService == null)       throw new UnsupportedOperationException("Missing OnBoardDepartService");
      fromVertex=onBoardDepartService.setupDepartOnBoard(this);
    }
 else     if (!opt.batch || !opt.arriveBy) {
      fromVertex=graph.streetIndex.getVertexForLocation(opt.from,opt,toVertex);
      if (opt.from.hasEdgeId()) {
        fromBackEdge=graph.getEdgeById(opt.from.edgeId);
      }
    }
 else {
      fromVertex=null;
    }
    if (opt.intermediatePlaces != null) {
      for (      GenericLocation intermediate : opt.intermediatePlaces) {
        Vertex vertex=graph.streetIndex.getVertexForLocation(intermediate,opt);
        intermediateVertices.add(vertex);
      }
    }
  }
 else {
    fromVertex=from;
    toVertex=to;
  }
  if (fromVertex instanceof StreetLocation && toVertex instanceof StreetLocation) {
    StreetVertex fromStreetVertex=(StreetVertex)fromVertex;
    StreetVertex toStreetVertex=(StreetVertex)toVertex;
    Set<StreetEdge> overlap=overlappingPlainStreetEdges(fromStreetVertex,toStreetVertex);
    for (    StreetEdge pse : overlap) {
      PartialStreetEdge ppse=makePartialEdgeAlong(pse,fromStreetVertex,toStreetVertex);
      ((StreetLocation)fromVertex).getExtra().add(ppse);
    }
  }
  if (opt.startingTransitStopId != null) {
    Stop stop=graph.index.stopForId.get(opt.startingTransitStopId);
    TransitStop tstop=graph.index.stopVertexForStop.get(stop);
    startingStop=tstop.departVertex;
  }
  origin=opt.arriveBy ? toVertex : fromVertex;
  originBackEdge=opt.arriveBy ? toBackEdge : fromBackEdge;
  target=opt.arriveBy ? fromVertex : toVertex;
  transferTable=graph.getTransferTable();
  if (opt.batch)   remainingWeightHeuristic=new TrivialRemainingWeightHeuristic();
 else   remainingWeightHeuristic=heuristicFactory.getInstanceForSearch(opt);
  for (  Vertex vertex : new Vertex[]{fromVertex,toVertex}) {
    if (vertex instanceof StreetLocation) {
      ((StreetLocation)vertex).setTemporaryEdgeVisibility(this);
    }
  }
  if (this.origin != null) {
    LOG.debug("Origin vertex inbound edges {}",this.origin.getIncoming());
    LOG.debug("Origin vertex outbound edges {}",this.origin.getOutgoing());
  }
  LOG.debug("Target vertex {}",this.target);
  if (this.target != null) {
    LOG.debug("Destination vertex inbound edges {}",this.target.getIncoming());
    LOG.debug("Destination vertex outbound edges {}",this.target.getOutgoing());
  }
}
