{
  double weight;
  if (options.wheelchairAccessible) {
    weight=slopeSpeedEffectiveLength / options.speed;
  }
 else   if (options.getModes().contains(TraverseMode.BICYCLE)) {
switch (options.optimizeFor) {
case SAFE:
      weight=bicycleSafetyEffectiveLength / options.speed;
    break;
case GREENWAYS:
  weight=bicycleSafetyEffectiveLength / options.speed;
if (bicycleSafetyEffectiveLength / length <= GREENWAY_SAFETY_FACTOR) {
  weight*=0.66;
}
break;
case FLAT:
weight=length / options.speed + slopeWorkCost;
break;
case QUICK:
weight=slopeSpeedEffectiveLength / options.speed;
break;
case TRIANGLE:
double quick=slopeSpeedEffectiveLength / options.speed;
double safety=bicycleSafetyEffectiveLength / options.speed;
double slope=slopeWorkCost;
weight=quick * options.triangleTimeFactor + slope * options.triangleSlopeFactor + safety * options.triangleSafetyFactor;
break;
default :
weight=length / options.speed;
}
}
 else {
weight=time;
}
weight*=options.walkReluctance;
return weight;
}
