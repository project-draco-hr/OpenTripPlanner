{
  if (origin == null) {
    return null;
  }
  Vertex tmp=origin;
  origin=target;
  target=tmp;
  Map<Vertex,Edge> extraEdges;
  if (target instanceof StreetLocation) {
    extraEdges=new HashMap<Vertex,Edge>();
    Iterable<Edge> outgoing=target.getOutgoing();
    for (    Edge edge : outgoing) {
      extraEdges.put(edge.getToVertex(),edge);
    }
  }
 else {
    extraEdges=new NullExtraEdges();
  }
  ShortestPathTree spt=new ShortestPathTree();
  double distance=origin.distance(target) / MAX_SPEED;
  SPTVertex spt_origin=spt.addVertex(origin,init,0,options);
  FibHeap pq=new FibHeap(gg.getVertices().size() + extraEdges.size());
  pq.insert(spt_origin,spt_origin.weightSum + distance);
  SPTVertex spt_u, spt_v;
  while (!pq.empty()) {
    spt_u=(SPTVertex)pq.extract_min();
    if (spt_u.mirror == target)     break;
    Iterable<Edge> incoming=spt_u.mirror.getIncoming();
    if (extraEdges.containsKey(spt_u.mirror)) {
      List<Edge> newIncoming=new ArrayList<Edge>();
      for (      Edge edge : spt_u.mirror.getOutgoing()) {
        newIncoming.add(edge);
      }
      newIncoming.add(extraEdges.get(spt_u.mirror));
      incoming=newIncoming;
    }
    for (    Edge edge : incoming) {
      TraverseResult wr=edge.traverseBack(spt_u.state,options);
      if (wr == null) {
        continue;
      }
      if (wr.weight < 0) {
        throw new NegativeWeightException(String.valueOf(wr.weight));
      }
      Vertex fromv=edge.getFromVertex();
      distance=fromv.distance(target) / MAX_SPEED;
      double new_w=spt_u.weightSum + wr.weight;
      double old_w;
      spt_v=spt.getVertex(fromv);
      if (spt_v == null) {
        old_w=Integer.MAX_VALUE;
        spt_v=spt.addVertex(fromv,wr.state,new_w,options);
      }
 else {
        old_w=spt_v.weightSum + distance;
      }
      if (new_w + distance < old_w) {
        spt_v.state=wr.state;
        spt_v.weightSum=new_w;
        if (old_w == Integer.MAX_VALUE) {
          pq.insert(spt_v,new_w + distance);
        }
 else {
          pq.insert_or_dec_key(spt_v,new_w + distance);
        }
        spt_v.setParent(spt_u,edge);
      }
    }
  }
  return spt;
}
