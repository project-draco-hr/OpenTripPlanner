{
  if (!options.isArriveBy()) {
    throw new RuntimeException("Reverse paths must call options.setArriveBy(true)");
  }
  if (origin == null || target == null) {
    return null;
  }
  ShortestPathTree spt;
  if (options.getModes().getTransit()) {
    spt=new MultiShortestPathTree();
  }
 else {
    spt=new BasicShortestPathTree();
  }
  Vertex tmp=origin;
  origin=target;
  target=tmp;
  options=options.clone();
  options.maxWalkDistance+=origin.getDistanceToNearestTransitStop() + target.getDistanceToNearestTransitStop();
  final ExtraEdgesStrategy extraEdgesStrategy=options.extraEdgesStrategy;
  Map<Vertex,List<Edge>> extraEdges=new HashMap<Vertex,List<Edge>>();
  extraEdgesStrategy.addIncomingEdgesForOrigin(extraEdges,origin);
  extraEdgesStrategy.addIncomingEdgesForTarget(extraEdges,target);
  if (extraEdges.isEmpty())   extraEdges=Collections.emptyMap();
  final RemainingWeightHeuristic heuristic=options.remainingWeightHeuristic;
  double initialWeight=heuristic.computeInitialWeight(origin,target,options);
  SPTVertex spt_origin=spt.addVertex(origin,init,0,options);
  FibHeap<SPTVertex> pq=new FibHeap<SPTVertex>(graph.getVertices().size() + extraEdges.size());
  pq.insert(spt_origin,spt_origin.weightSum + initialWeight);
  HashSet<Vertex> closed=new HashSet<Vertex>(100000);
  SPTVertex spt_u, spt_v;
  while (!pq.empty()) {
    spt_u=pq.extract_min();
    if (spt_u.state.walkDistance >= options.maxWalkDistance)     continue;
    Vertex tov=spt_u.mirror;
    if (tov == target)     break;
    closed.add(tov);
    Collection<Edge> incoming=GraphLibrary.getIncomingEdges(graph,tov,extraEdges);
    for (    Edge edge : incoming) {
      State state=spt_u.state;
      if (edge instanceof PatternAlight && state.numBoardings > options.maxTransfers) {
        continue;
      }
      TraverseResult wr=edge.traverseBack(state,options);
      while (wr != null) {
        if (wr.weight < 0) {
          throw new NegativeWeightException(String.valueOf(wr.weight) + " on edge " + edge);
        }
        EdgeNarrative er=wr.getEdgeNarrative();
        Vertex fromv=er.getFromVertex();
        double new_w=spt_u.weightSum + wr.weight;
        double remaining_w=heuristic.computeReverseWeight(spt_u,edge,wr,target);
        double heuristic_distance=new_w + remaining_w;
        if (heuristic_distance > options.maxWeight || wr.state.getTime() < options.worstTime) {
        }
 else {
          spt_v=spt.addVertex(fromv,wr.state,new_w,options);
          if (spt_v != null) {
            spt_v.setParent(spt_u,edge,er);
            if (!closed.contains(fromv)) {
              pq.insert_or_dec_key(spt_v,heuristic_distance);
            }
          }
        }
        wr=wr.getNextResult();
      }
    }
  }
  return spt;
}
