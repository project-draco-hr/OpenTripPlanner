{
  if (origin == null || target == null) {
    return null;
  }
  ShortestPathTree spt;
  if (options.modes.getTransit()) {
    spt=new MultiShortestPathTree();
  }
 else {
    spt=new BasicShortestPathTree();
  }
  Map<Vertex,ArrayList<Edge>> extraEdges;
  if (origin instanceof StreetLocation) {
    extraEdges=new HashMap<Vertex,ArrayList<Edge>>();
    Iterable<Edge> extra=((StreetLocation)origin).getExtra();
    for (    Edge edge : extra) {
      Vertex fromv=edge.getFromVertex();
      ArrayList<Edge> edges=extraEdges.get(fromv);
      if (edges == null) {
        edges=new ArrayList<Edge>();
        extraEdges.put(fromv,edges);
      }
      edges.add(edge);
    }
  }
 else {
    extraEdges=new NullExtraEdges();
  }
  if (target instanceof StreetLocation) {
    if (extraEdges instanceof NullExtraEdges) {
      extraEdges=new HashMap<Vertex,ArrayList<Edge>>();
    }
    Iterable<Edge> extra=((StreetLocation)target).getExtra();
    for (    Edge edge : extra) {
      Vertex fromv=edge.getFromVertex();
      ArrayList<Edge> edges=extraEdges.get(fromv);
      if (edges == null) {
        edges=new ArrayList<Edge>();
        extraEdges.put(fromv,edges);
      }
      edges.add(edge);
    }
  }
  final double max_speed=getMaxSpeed(options);
  double distance=origin.fastDistance(target) / max_speed;
  SPTVertex spt_origin=spt.addVertex(origin,init,0,options);
  FibHeap<SPTVertex> pq=new FibHeap<SPTVertex>(graph.getVertices().size() + extraEdges.size());
  pq.insert(spt_origin,spt_origin.weightSum + distance);
  while (!pq.empty()) {
    SPTVertex spt_u=pq.extract_min();
    Vertex fromv=spt_u.mirror;
    if (fromv == target)     break;
    GraphVertex gv=graph.getGraphVertex(spt_u.mirror);
    Collection<Edge> outgoing;
    if (gv == null) {
      outgoing=new ArrayList<Edge>();
    }
 else {
      outgoing=gv.getOutgoing();
    }
    if (extraEdges.containsKey(spt_u.mirror)) {
      List<Edge> newOutgoing=new ArrayList<Edge>();
      for (      Edge edge : outgoing)       newOutgoing.add(edge);
      newOutgoing.addAll(extraEdges.get(spt_u.mirror));
      outgoing=newOutgoing;
    }
    for (    Edge edge : outgoing) {
      State state=spt_u.state;
      if (edge.getToVertex() == target) {
        state=state.clone();
        state.lastEdgeWasStreet=false;
        state.justTransferred=spt_u.state.justTransferred;
      }
      TraverseResult wr=edge.traverse(state,options);
      if (wr == null) {
        continue;
      }
      if (wr.weight < 0) {
        throw new NegativeWeightException(String.valueOf(wr.weight));
      }
      Vertex tov=edge.getToVertex();
      double new_w=spt_u.weightSum + wr.weight;
      if (new_w > options.maxWeight || wr.state.getTime() > options.worstTime) {
        continue;
      }
      SPTVertex spt_v=spt.addVertex(tov,wr.state,new_w,options);
      if (spt_v != null) {
        spt_v.setParent(spt_u,edge);
        distance=tov.fastDistance(target) / max_speed;
        pq.insert_or_dec_key(spt_v,new_w + distance);
      }
    }
  }
  return spt;
}
