{
  Date when;
  try {
    when=dateFormat.parse(searchDate.getText());
  }
 catch (  ParseException e) {
    searchDate.setText("Format: " + dateFormat.toPattern());
    return;
  }
  TraverseModeSet modeSet=new TraverseModeSet();
  modeSet.setWalk(walkCheckBox.isSelected());
  modeSet.setBicycle(bikeCheckBox.isSelected());
  modeSet.setFerry(ferryCheckBox.isSelected());
  modeSet.setTrainish(trainCheckBox.isSelected());
  modeSet.setBusish(busCheckBox.isSelected());
  modeSet.setCar(carCheckBox.isSelected());
  modeSet.setCustomMotorVehicle(cmvCheckBox.isSelected());
  if (transitCheckBox.isSelected())   modeSet.setTransit(true);
  RoutingRequest options=new RoutingRequest(modeSet);
  options.setArriveBy(arriveByCheckBox.isSelected());
  options.setWalkBoardCost(Integer.parseInt(boardingPenaltyField.getText()) * 60);
  options.setBikeBoardCost(Integer.parseInt(boardingPenaltyField.getText()) * 60 * 2);
  options.setOptimize(getSelectedOptimizeType());
  options.setMaxWalkDistance(Integer.parseInt(maxWalkField.getText()));
  options.setDateTime(when);
  options.setFromString(from);
  options.setToString(to);
  options.setWalkSpeed(Float.parseFloat(walkSpeed.getText()));
  options.setBikeSpeed(Float.parseFloat(bikeSpeed.getText()));
  options.setHeuristicWeight(Float.parseFloat(heuristicWeight.getText()));
  options.setSoftWalkLimiting(softWalkLimiting.isSelected());
  options.setSoftWalkPenalty(Float.parseFloat(softWalkPenalty.getText()));
  options.setSoftWalkOverageRate(Float.parseFloat(this.softWalkOverageRate.getText()));
  options.numItineraries=1;
  System.out.println("--------");
  System.out.println("Path from " + from + " to "+ to+ " at "+ when);
  System.out.println("\tModes: " + modeSet);
  System.out.println("\tOptions: " + options);
  sptService.setNPaths(Integer.parseInt(this.nPaths.getText()));
  if (dontUseGraphicalCallbackCheckBox.isSelected()) {
    sptService.setTraverseVisitor(null);
  }
 else {
    sptService.setTraverseVisitor(new VisualTraverseVisitor(showGraph));
  }
  long t0=System.currentTimeMillis();
  List<GraphPath> paths=pathservice.getPaths(options);
  long dt=System.currentTimeMillis() - t0;
  searchTimeElapsedLabel.setText("search time elapsed: " + dt + "ms");
  if (paths == null) {
    System.out.println("no path");
    showGraph.highlightGraphPath(null);
    return;
  }
  DefaultListModel data=new DefaultListModel();
  for (  GraphPath gp : paths) {
    data.addElement(new PathPrinter(gp));
  }
  pathsList.setModel(data);
  options.cleanup();
}
