{
  JPanel vertexDataPanel=new JPanel();
  vertexDataPanel.setLayout(new BoxLayout(vertexDataPanel,BoxLayout.PAGE_AXIS));
  vertexDataPanel.setPreferredSize(new Dimension(300,600));
  leftPanel.add(vertexDataPanel,BorderLayout.CENTER);
  JLabel nvLabel=new JLabel("Vertices");
  vertexDataPanel.add(nvLabel);
  nearbyVertices=new JList<DisplayVertex>();
  nearbyVertices.setVisibleRowCount(4);
  JScrollPane nvScrollPane=new JScrollPane(nearbyVertices);
  vertexDataPanel.add(nvScrollPane);
  nearbyVertices.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      outgoingEdges.removeAll();
      incomingEdges.removeAll();
      DisplayVertex selected=(DisplayVertex)nearbyVertices.getSelectedValue();
      if (selected != null) {
        Vertex nowSelected=selected.vertex;
        showGraph.highlightVertex(nowSelected);
        outgoingEdges.setModel(new EdgeListModel(nowSelected.getOutgoing()));
        incomingEdges.setModel(new EdgeListModel(nowSelected.getIncoming()));
      }
    }
  }
);
  ListSelectionListener edgeChanged=new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      @SuppressWarnings("unchecked") JList<Edge> edgeList=(JList<Edge>)e.getSource();
      Edge selected=(Edge)edgeList.getSelectedValue();
      boolean outgoing=(edgeList == outgoingEdges);
      reactToEdgeSelection(selected,outgoing);
    }
  }
;
  JLabel ogeLabel=new JLabel("Outgoing edges");
  vertexDataPanel.add(ogeLabel);
  outgoingEdges=new JList<Edge>();
  outgoingEdges.setVisibleRowCount(4);
  JScrollPane ogeScrollPane=new JScrollPane(outgoingEdges);
  vertexDataPanel.add(ogeScrollPane);
  outgoingEdges.addListSelectionListener(edgeChanged);
  JLabel iceLabel=new JLabel("Incoming edges");
  vertexDataPanel.add(iceLabel);
  incomingEdges=new JList<Edge>();
  JScrollPane iceScrollPane=new JScrollPane(incomingEdges);
  vertexDataPanel.add(iceScrollPane);
  incomingEdges.addListSelectionListener(edgeChanged);
  JLabel pathsLabel=new JLabel("Paths");
  vertexDataPanel.add(pathsLabel);
  pathsList=new JList<PathPrinter>();
  popup=new JPopupMenu();
  JMenuItem compareMenuItem=new JMenuItem("compare");
  compareMenuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      PathPrinter pp=((PathPrinter)pathsList.getSelectedValue());
      if (pp == null) {
        return;
      }
      GraphPath path=pp.gp;
      firstComparePath=secondComparePath;
      secondComparePath=path;
      comparePaths();
    }
  }
);
  popup.add(compareMenuItem);
  pathsList.addMouseListener(new MouseListener(){
    @Override public void mouseClicked(    MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e)) {
        @SuppressWarnings("unchecked") JList<PathPrinter> list=(JList<PathPrinter>)e.getSource();
        int row=list.locationToIndex(e.getPoint());
        list.setSelectedIndex(row);
        popup.show(list,e.getX(),e.getY());
      }
    }
    @Override public void mousePressed(    MouseEvent e){
    }
    @Override public void mouseReleased(    MouseEvent e){
    }
    @Override public void mouseEntered(    MouseEvent e){
    }
    @Override public void mouseExited(    MouseEvent e){
    }
  }
);
  pathsList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent ev){
      PathPrinter pp=((PathPrinter)pathsList.getSelectedValue());
      if (pp == null) {
        return;
      }
      GraphPath path=pp.gp;
      DefaultListModel<State> pathModel=new DefaultListModel<State>();
      for (      State st : path.states) {
        pathModel.addElement(st);
      }
      pathStates.setModel(pathModel);
      showGraph.highlightGraphPath(path);
    }
  }
);
  JScrollPane pathsScrollPane=new JScrollPane(pathsList);
  vertexDataPanel.add(pathsScrollPane);
}
