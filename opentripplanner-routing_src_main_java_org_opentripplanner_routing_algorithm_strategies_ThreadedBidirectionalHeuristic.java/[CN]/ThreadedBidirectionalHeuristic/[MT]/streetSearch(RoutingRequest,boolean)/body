{
  rr=rr.clone();
  rr.setMaxWalkDistance(5000);
  if (fromTarget)   rr.setArriveBy(!rr.isArriveBy());
  List<State> stopStates=Lists.newArrayList();
  ShortestPathTree spt=new BasicShortestPathTree(rr);
  OTPPriorityQueue<State> pq=new BinHeap<State>();
  Vertex initVertex=fromTarget ? rr.rctx.target : rr.rctx.origin;
  State initState=new State(initVertex,rr);
  pq.insert(initState,0);
  while (!pq.empty()) {
    State s=pq.extract_min();
    double w=s.getWeight();
    Vertex v=s.getVertex();
    int vi=v.getIndex();
    if (v instanceof TransitStop) {
      stopStates.add(s);
      continue;
    }
    if (!fromTarget)     w=0;
    if (vi < weights.length)     if (weights[vi] > w)     weights[vi]=w;
    for (    Edge e : rr.arriveBy ? v.getIncoming() : v.getOutgoing()) {
      State s1=e.traverse(s);
      if (s1 == null)       continue;
      if (spt.add(s1)) {
        pq.insert(s1,s1.getWeight());
      }
    }
  }
  LOG.debug("hit stops: {}",stopStates);
  return stopStates;
}
