{
  StoreImpl store=new StoreImpl(dao);
  store.open();
  _log.info("reading {}",gtfsBundle.toString());
  GtfsReader reader=new GtfsReader();
  reader.setInputSource(gtfsBundle.getCsvInputSource());
  reader.setEntityStore(store);
  reader.setInternStrings(false);
  if (gtfsBundle.getDefaultAgencyId() != null)   reader.setDefaultAgencyId(gtfsBundle.getDefaultAgencyId());
  for (  Map.Entry<String,String> entry : gtfsBundle.getAgencyIdMappings().entrySet())   reader.addAgencyIdMapping(entry.getKey(),entry.getValue());
  if (_log.isDebugEnabled())   reader.addEntityHandler(counter);
  if (gtfsBundle.getDefaultBikesAllowed())   reader.addEntityHandler(new EntityBikeability(true));
  for (  Class<?> entityClass : reader.getEntityClasses()) {
    _log.info("reading entities: " + entityClass.getName());
    reader.readEntities(entityClass);
    store.flush();
    if (entityClass == Agency.class) {
      for (      Agency agency : reader.getAgencies()) {
        GtfsBundle existing=agenciesSeen.get(agency);
        if (existing != null) {
          _log.warn(GraphBuilderAnnotation.register(graph,Variety.AGENCY_NAME_COLLISION,agency,existing.toString()));
        }
 else {
          agenciesSeen.put(agency,gtfsBundle);
        }
      }
    }
  }
  store.close();
}
