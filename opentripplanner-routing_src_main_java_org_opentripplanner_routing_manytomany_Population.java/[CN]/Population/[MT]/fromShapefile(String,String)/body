{
  Population population=new Population();
  System.out.printf("Loading field '%s' from shapefile %s\n",attribute,filename);
  try {
    File file=new File(filename);
    FileDataStore store=FileDataStoreFinder.getDataStore(file);
    FeatureSource<SimpleFeatureType,SimpleFeature> featureSource=store.getFeatureSource();
    CoordinateReferenceSystem sourceCRS=featureSource.getInfo().getCRS();
    Hints hints=new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,Boolean.TRUE);
    CRSAuthorityFactory factory=ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG",hints);
    CoordinateReferenceSystem worldCRS=factory.createCoordinateReferenceSystem("EPSG:4326");
    DefaultQuery query=new DefaultQuery();
    query.setCoordinateSystem(sourceCRS);
    query.setCoordinateSystemReproject(worldCRS);
    FeatureCollection<SimpleFeatureType,SimpleFeature> features=featureSource.getFeatures(query);
    Iterator<SimpleFeature> it=features.iterator();
    int i=0;
    while (it.hasNext()) {
      SimpleFeature feature=it.next();
      Geometry geom=(Geometry)feature.getDefaultGeometry();
      Point point=null;
      if (geom instanceof Point) {
        point=(Point)geom;
      }
 else       if (geom instanceof Polygon) {
        point=((Polygon)geom).getCentroid();
      }
 else {
        throw new IllegalStateException("Shapefile must contain either points or polygons.");
      }
      double data=(Double)feature.getAttribute(attribute);
      Vertex vertex=new GenericVertex("pop_shp_" + i,point.getX(),point.getY());
      Individual individual=new Individual(vertex,data);
      population.elements.add(individual);
      i++;
    }
    features.close(it);
  }
 catch (  Exception ex) {
    throw new IllegalStateException("Error loading population from shapefile ",ex);
  }
  System.out.printf("Done loading shapefile.\n");
  return population;
}
