{
  RoutingRequest options=state0.getOptions();
  Trip oldTrip=state0.getBackTrip();
  Trip newTrip=options.arriveBy ? trips.inverse().get(oldTrip) : trips.get(oldTrip);
  if (newTrip == null)   return null;
  TripPattern newPattern;
  TripTimes newTripTimes;
  TripTimes oldTripTimes=state0.getTripTimes();
  int arrivalTime;
  int departureTime;
  AgencyAndId tripId=state0.getTripId();
  if (options.arriveBy) {
    newPattern=((OnboardVertex)fromv).getTripPattern();
    newTripTimes=newPattern.getResolvedTripTimes(newTrip,state0);
    arrivalTime=newTripTimes.getArrivalTime(newTripTimes.getNumStops() - 1);
    departureTime=oldTripTimes.getDepartureTime(0);
  }
 else {
    newPattern=((OnboardVertex)tov).getTripPattern();
    newTripTimes=newPattern.getResolvedTripTimes(newTrip,state0);
    arrivalTime=oldTripTimes.getArrivalTime(oldTripTimes.getNumStops() - 1);
    departureTime=newTripTimes.getDepartureTime(0);
  }
  int boardStopIndex=options.arriveBy ? newPattern.stopPattern.size - 1 : 0;
  if (!newTripTimes.tripAcceptable(state0,boardStopIndex))   return null;
  int dwellTime=departureTime - arrivalTime;
  if (dwellTime < 0)   return null;
  StateEditor s1=state0.edit(this);
  s1.incrementTimeInSeconds(dwellTime);
  s1.setTripId(newTrip.getId());
  s1.setPreviousTrip(oldTrip);
  s1.setTripTimes(newTripTimes);
  s1.incrementWeight(dwellTime);
  return s1.makeState();
}
