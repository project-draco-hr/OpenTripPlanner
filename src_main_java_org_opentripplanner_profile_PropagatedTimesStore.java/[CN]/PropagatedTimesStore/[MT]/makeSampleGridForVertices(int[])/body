{
  SparseMatrixZSampleGrid<SampleGridRenderer.WTWD> grid;
  long t0=System.currentTimeMillis();
  final double gridSizeMeters=300;
  final double D0=0.8 * gridSizeMeters;
  final double V0=1.00;
  Coordinate coordinateOrigin=new Coordinate();
  final double cosLat=FastMath.cos(toRadians(coordinateOrigin.y));
  double dY=Math.toDegrees(gridSizeMeters / SphericalDistanceLibrary.RADIUS_OF_EARTH_IN_M);
  double dX=dY / cosLat;
  grid=new SparseMatrixZSampleGrid<SampleGridRenderer.WTWD>(16,times.length,dX,dY,coordinateOrigin);
  AccumulativeGridSampler.AccumulativeMetric<SampleGridRenderer.WTWD> metric=new SampleGridRenderer.WTWDAccumulativeMetric(cosLat,D0,V0,gridSizeMeters);
  AccumulativeGridSampler<SampleGridRenderer.WTWD> sampler=new AccumulativeGridSampler<SampleGridRenderer.WTWD>(grid,metric);
  for (int v=0; v < times.length; v++) {
    int time=times[v];
    if (time == Integer.MAX_VALUE) {
      continue;
    }
    SampleGridRenderer.WTWD z=new SampleGridRenderer.WTWD();
    z.w=1.0;
    z.d=0.0;
    z.wTime=time;
    z.wBoardings=0;
    z.wWalkDist=0;
    Vertex vertex=graph.getVertexById(v);
    sampler.addSamplingPoint(vertex.getCoordinate(),z,V0);
  }
  sampler.close();
  long t1=System.currentTimeMillis();
  LOG.info("Made scalar SampleGrid from TimeSurface in {} msec.",(int)(t1 - t0));
  return grid;
}
