{
  RoutingContext rctx=state0.getContext();
  RoutingRequest options=state0.getOptions();
  if (options.isArriveBy()) {
    if (state0.getBackEdge() instanceof PatternAlight) {
      return null;
    }
    Trip trip=pattern.getTrip(state0.getTrip());
    EdgeNarrative en=new TransitNarrative(trip,this);
    StateEditor s1=state0.edit(this,en);
    int type=pattern.getBoardType(stopIndex);
    if (TransitUtils.handleBoardAlightType(s1,type)) {
      return null;
    }
    s1.setTripId(null);
    s1.setLastAlightedTime(state0.getTime());
    s1.setPreviousStop(fromv);
    s1.setLastPattern(pattern);
    return s1.makeState();
  }
 else {
    if (state0.getLastPattern() == pattern) {
      return null;
    }
    if (!options.getModes().get(modeMask)) {
      return null;
    }
    long current_time=state0.getTime();
    int bestWait=-1;
    int bestPatternIndex=-1;
    TraverseMode mode=state0.getNonTransitMode(options);
    AgencyAndId serviceId=getPattern().getExemplar().getServiceId();
    SD:     for (    ServiceDay sd : rctx.serviceDays) {
      int secondsSinceMidnight=sd.secondsSinceMidnight(current_time);
      if (secondsSinceMidnight < 0)       continue;
      if (sd.serviceIdRunning(serviceId)) {
        int patternIndex=getPattern().getNextTrip(stopIndex,secondsSinceMidnight,options.wheelchairAccessible,mode == TraverseMode.BICYCLE,true);
        if (patternIndex >= 0) {
          Trip trip=pattern.getTrip(patternIndex);
          while (options.bannedTrips.contains(trip.getId())) {
            patternIndex+=1;
            if (patternIndex >= pattern.getTrips().size()) {
              continue SD;
            }
            trip=pattern.getTrip(patternIndex);
          }
          int wait=(int)(sd.time(pattern.getDepartureTime(stopIndex,patternIndex)) - current_time);
          if (wait < 0)           _log.error("negative wait time on board");
          if (bestWait < 0 || wait < bestWait) {
            bestWait=wait;
            bestPatternIndex=patternIndex;
          }
        }
      }
    }
    if (bestWait < 0) {
      return null;
    }
    Trip trip=getPattern().getTrip(bestPatternIndex);
    if (options.bannedRoutes != null) {
      Route route=trip.getRoute();
      RouteSpec spec=new RouteSpec(route.getId().getAgencyId(),GtfsLibrary.getRouteName(route));
      if (options.bannedRoutes.contains(spec)) {
        return null;
      }
    }
    long preferences_penalty=0;
    if (options.preferredRoutes != null && options.preferredRoutes.size() > 0) {
      Route route=trip.getRoute();
      RouteSpec spec=new RouteSpec(route.getId().getAgencyId(),GtfsLibrary.getRouteName(route));
      if (!options.preferredRoutes.contains(spec)) {
        preferences_penalty+=options.useAnotherThanPreferredRoutesPenalty;
      }
    }
    if (options.unpreferredRoutes != null && options.unpreferredRoutes.size() > 0) {
      Route route=trip.getRoute();
      RouteSpec spec=new RouteSpec(route.getId().getAgencyId(),GtfsLibrary.getRouteName(route));
      if (options.unpreferredRoutes.contains(spec)) {
        preferences_penalty+=options.useUnpreferredRoutesPenalty;
      }
    }
    EdgeNarrative en=new TransitNarrative(trip,this);
    StateEditor s1=state0.edit(this,en);
    int type=pattern.getBoardType(stopIndex);
    if (TransitUtils.handleBoardAlightType(s1,type)) {
      return null;
    }
    s1.setTrip(bestPatternIndex);
    s1.incrementTimeInSeconds(bestWait);
    s1.incrementNumBoardings();
    s1.setTripId(trip.getId());
    s1.setZone(getPattern().getZone(stopIndex));
    s1.setRoute(trip.getRoute().getId());
    long wait_cost=bestWait;
    if (options.maxWait > 0 && bestWait > options.maxWait) {
      return null;
    }
    if (state0.getNumBoardings() == 0) {
      wait_cost*=options.waitAtBeginningFactor;
      s1.setInitialWaitTime(bestWait);
    }
 else {
      wait_cost*=options.waitReluctance;
    }
    s1.incrementWeight(preferences_penalty);
    s1.incrementWeight(wait_cost + options.getBoardCost(mode));
    return s1.makeState();
  }
}
