{
  VLPolygon poly=poly(12.3389861,45.4339415,12.3389153,45.4340763,12.3390769,45.4341172,12.3391694,45.4341388,12.3392136,45.4340533,12.3397036,45.434177,12.339797,45.4341939,12.3397873,45.4342286,12.339706,45.4342158,12.3396866,45.4342575,12.3393905,45.434195,12.3391779,45.4346848,12.3391272,45.4347845,12.3390937,45.4347676,12.3389625,45.4347071,12.3386095,45.4345509,12.3379792,45.4342771,12.3378901,45.4342367,12.3376881,45.4341478,12.337471,45.4340513,12.3373322,45.4339869,12.3371759,45.4339216,12.3372951,45.4336885,12.3374061,45.4334649,12.3374185,45.4334486,12.3391652,45.4339348,12.3391453,45.4339861);
  Environment environment=new Environment(Arrays.asList(poly));
  environment.enforce_standard_form();
  VisibilityGraph vg=new VisibilityGraph(environment,0.0000001);
  boolean expected[][]={{true,true,false,true,true,false,true,true,true,true,false,false,false,false,true,false,true,true,false,false,false,false,false,false,false,false,true},{true,true,true,true,true,false,true,true,true,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true},{false,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true},{true,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true},{true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true},{false,false,true,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false},{true,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true},{true,true,true,true,false,false,true,true,true,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true},{true,true,false,false,false,false,false,true,true,true,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true},{true,false,false,false,false,false,false,false,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true},{false,false,false,false,false,false,false,false,false,true,true,true,false,true,true,true,true,true,true,true,true,false,false,false,false,false,false},{false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,false,false,false,false,false,false,true,true,true,false},{false,false,false,false,false,false,false,false,false,true,false,true,true,true,true,false,true,false,false,false,false,false,false,false,true,true,true},{false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false},{true,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,true,true},{false,false,false,false,false,false,false,false,false,true,true,true,false,false,true,true,true,false,false,false,false,false,false,false,false,false,false},{true,true,false,false,false,false,false,false,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true},{true,true,true,true,false,false,false,true,true,true,true,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true},{false,true,true,true,false,false,false,true,true,true,true,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false},{false,true,true,true,false,false,false,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,false},{false,true,true,true,false,false,false,true,true,true,true,false,false,false,false,false,true,true,false,true,true,true,false,false,false,false,false},{false,true,true,true,false,false,true,true,true,true,false,false,false,false,false,false,true,true,false,false,true,true,true,true,true,true,true},{false,true,true,true,false,false,true,true,true,true,false,false,false,false,false,false,true,true,false,false,false,true,true,true,false,false,false},{false,true,true,true,false,false,true,true,true,true,false,true,false,false,false,false,true,true,false,false,false,true,true,true,true,true,true},{false,true,true,true,false,false,true,true,true,true,false,true,true,false,false,false,true,true,false,false,false,true,false,true,true,true,true},{false,true,true,true,false,false,true,true,true,true,false,true,true,false,true,false,true,true,false,false,false,true,false,true,true,true,true},{true,true,true,true,true,false,true,true,true,true,false,false,true,false,true,false,true,true,false,false,false,true,false,true,true,true,true}};
  for (int i=0; i < expected.length; ++i) {
    for (int j=0; j < expected[i].length; ++j) {
      assertEquals(" at " + i + ", "+ j,expected[i][j],vg.get(i,j));
    }
  }
}
