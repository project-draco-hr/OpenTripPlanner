{
  RoutingRequest options=new RoutingRequest();
  HashSet<Edge> turns=new HashSet<Edge>();
  turns.add(left);
  TemporaryStreetLocation start=StreetVertexIndexServiceImpl.createTemporaryStreetLocation(graph,"start",new NonLocalizedString("start"),filter(turns,StreetEdge.class),new LinearLocation(0,0.8).getCoordinate(left.getGeometry()),false);
  TemporaryStreetLocation end=StreetVertexIndexServiceImpl.createTemporaryStreetLocation(graph,"end",new NonLocalizedString("end"),filter(turns,StreetEdge.class),new LinearLocation(0,0.4).getCoordinate(left.getGeometry()),true);
  assertEquals(start.getX(),end.getX(),0.001);
  assertTrue(start.getY() > end.getY());
  Collection<Edge> edges=end.getIncoming();
  assertEquals(1,edges.size());
  long startTime=TestUtils.dateInSeconds("America/New_York",2009,11,1,12,34,25);
  options.dateTime=startTime;
  options.setRoutingContext(graph,start,end);
  options.setMaxWalkDistance(Double.MAX_VALUE);
  ShortestPathTree spt=aStar.getShortestPathTree(options);
  GraphPath path=spt.getPath(end,false);
  assertNotNull("There must be a path from start to end",path);
  assertTrue(path.edges.size() > 1);
  options.cleanup();
}
