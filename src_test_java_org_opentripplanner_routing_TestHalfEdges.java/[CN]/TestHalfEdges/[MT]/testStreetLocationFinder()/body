{
  StreetVertexIndexServiceImpl finder=new StreetVertexIndexServiceImpl(graph);
  finder.setup();
  GenericLocation loc=new GenericLocation(40.01,-74.005000001);
  assertTrue(finder.getLocalTransitStops(loc.getCoordinate(),100).size() > 0);
  StreetLocation some=(StreetLocation)finder.getVertexForLocation(new GenericLocation(40.00,-74.00),null);
  assertNotNull(some);
  StreetLocation start=(StreetLocation)finder.getVertexForLocation(new GenericLocation(40.004,-74.01),null);
  assertNotNull(start);
  assertTrue("wheelchair accessibility is correctly set (splitting)",start.isWheelchairAccessible());
  List<Edge> extras=start.getExtra();
  assertEquals(4,extras.size());
  RoutingRequest biking=new RoutingRequest(new TraverseModeSet(TraverseMode.BICYCLE));
  StreetLocation end=(StreetLocation)finder.getVertexForLocation(new GenericLocation(40.008,-74.0),biking);
  assertNotNull(end);
  extras=end.getExtra();
  assertEquals(4,extras.size());
  StreetLocation location=(StreetLocation)finder.getVertexForLocation(new GenericLocation(40.00999,-74.004999),new RoutingRequest());
  assertTrue(location.isWheelchairAccessible());
  boolean found=false;
  for (  Edge extra : location.getExtra()) {
    if (extra instanceof FreeEdge && ((FreeEdge)extra).getToVertex().equals(station1)) {
      found=true;
    }
  }
  assertTrue(found);
  RoutingRequest walking=new RoutingRequest(TraverseMode.WALK);
  start=(StreetLocation)finder.getVertexForLocation(new GenericLocation(40.004,-74.0),walking);
  end=(StreetLocation)finder.getVertexForLocation(new GenericLocation(40.008,-74.0),walking);
  assertNotNull(end);
  walking.setRoutingContext(graph,start,end);
  ShortestPathTree spt=aStar.getShortestPathTree(walking);
  GraphPath path=spt.getPath(end,false);
  for (  State s : path.states) {
    assertFalse(s.getBackEdge() == top);
  }
}
