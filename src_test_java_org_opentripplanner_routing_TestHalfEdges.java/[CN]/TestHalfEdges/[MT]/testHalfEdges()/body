{
  int nVertices=graph.getVertices().size();
  int nEdges=graph.getEdges().size();
  RoutingRequest options=new RoutingRequest();
  HashSet<Edge> turns=new HashSet<Edge>();
  turns.add(left);
  turns.add(leftBack);
  TemporaryStreetLocation start=StreetVertexIndexServiceImpl.createTemporaryStreetLocation(graph,"start",new NonLocalizedString("start"),filter(turns,StreetEdge.class),new LinearLocation(0,0.4).getCoordinate(left.getGeometry()),false);
  HashSet<Edge> endTurns=new HashSet<Edge>();
  endTurns.add(right);
  endTurns.add(rightBack);
  TemporaryStreetLocation end=StreetVertexIndexServiceImpl.createTemporaryStreetLocation(graph,"end",new NonLocalizedString("end"),filter(endTurns,StreetEdge.class),new LinearLocation(0,0.8).getCoordinate(right.getGeometry()),true);
  assertTrue(start.getX() < end.getX());
  assertTrue(start.getY() < end.getY());
  Collection<Edge> edges=end.getIncoming();
  assertEquals(2,edges.size());
  long startTime=TestUtils.dateInSeconds("America/New_York",2009,11,1,12,34,25);
  options.dateTime=startTime;
  options.setRoutingContext(graph,br,end);
  options.setMaxWalkDistance(Double.MAX_VALUE);
  ShortestPathTree spt1=aStar.getShortestPathTree(options);
  GraphPath pathBr=spt1.getPath(end,false);
  assertNotNull("There must be a path from br to end",pathBr);
  options.setRoutingContext(graph,tr,end);
  ShortestPathTree spt2=aStar.getShortestPathTree(options);
  GraphPath pathTr=spt2.getPath(end,false);
  assertNotNull("There must be a path from tr to end",pathTr);
  assertTrue("path from bottom to end must be longer than path from top to end",pathBr.getWeight() > pathTr.getWeight());
  options.setRoutingContext(graph,start,end);
  ShortestPathTree spt=aStar.getShortestPathTree(options);
  GraphPath path=spt.getPath(end,false);
  assertNotNull("There must be a path from start to end",path);
  for (  State s : path.states) {
    assertNotSame(s.getVertex(),graph.getVertex("bottom"));
    assertNotSame(s.getVertex(),graph.getVertex("bottomBack"));
  }
  options.setArriveBy(true);
  options.setRoutingContext(graph,start,end);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(start,false);
  assertNotNull("There must be a path from start to end (looking back)",path);
  for (  State s : path.states) {
    assertNotSame(s.getVertex(),graph.getVertex("bottom"));
    assertNotSame(s.getVertex(),graph.getVertex("bottomBack"));
  }
  options.cleanup();
  assertEquals(nVertices,graph.getVertices().size());
  assertEquals(nEdges,graph.getEdges().size());
  options=new RoutingRequest(new TraverseModeSet(TraverseMode.BICYCLE));
  start=StreetVertexIndexServiceImpl.createTemporaryStreetLocation(graph,"start1",new NonLocalizedString("start1"),filter(turns,StreetEdge.class),new LinearLocation(0,0.95).getCoordinate(top.getGeometry()),false);
  end=StreetVertexIndexServiceImpl.createTemporaryStreetLocation(graph,"end1",new NonLocalizedString("end1"),filter(turns,StreetEdge.class),new LinearLocation(0,0.95).getCoordinate(bottom.getGeometry()),true);
  options.setRoutingContext(graph,start,end);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(start,false);
  assertNotNull("There must be a path from top to bottom along the right",path);
  for (  State s : path.states) {
    assertNotSame(s.getVertex(),graph.getVertex("left"));
    assertNotSame(s.getVertex(),graph.getVertex("leftBack"));
  }
  options.cleanup();
  assertEquals(nVertices,graph.getVertices().size());
  assertEquals(nEdges,graph.getEdges().size());
  start=StreetVertexIndexServiceImpl.createTemporaryStreetLocation(graph,"start2",new NonLocalizedString("start2"),filter(turns,StreetEdge.class),new LinearLocation(0,0.55).getCoordinate(top.getGeometry()),false);
  end=StreetVertexIndexServiceImpl.createTemporaryStreetLocation(graph,"end2",new NonLocalizedString("end2"),filter(turns,StreetEdge.class),new LinearLocation(0,0.55).getCoordinate(bottom.getGeometry()),true);
  options.setRoutingContext(graph,start,end);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(start,false);
  assertNotNull("There must be a path from top to bottom",path);
  for (  State s : path.states) {
    assertNotSame(s.getVertex(),graph.getVertex("right"));
    assertNotSame(s.getVertex(),graph.getVertex("rightBack"));
  }
  options.cleanup();
  assertEquals(nVertices,graph.getVertices().size());
  assertEquals(nEdges,graph.getEdges().size());
}
