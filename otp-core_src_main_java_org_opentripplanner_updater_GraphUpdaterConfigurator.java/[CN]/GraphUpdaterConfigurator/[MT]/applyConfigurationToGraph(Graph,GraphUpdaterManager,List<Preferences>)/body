{
  try {
    Set<String> configurableNames=new HashSet<String>();
    for (    Preferences config : configs) {
      if (config == null) {
        continue;
      }
      for (      String configurableName : config.childrenNames()) {
        if (configurableNames.contains(configurableName)) {
          continue;
        }
        configurableNames.add(configurableName);
        Preferences prefs=config.node(configurableName);
        String type=prefs.get("type",null);
        GraphUpdater updater=null;
        if (type != null) {
          if (type.equals("bike-rental")) {
            updater=new BikeRentalUpdater2();
          }
 else           if (type.equals("stop-time-updater")) {
            updater=new StoptimeUpdater();
          }
 else           if (type.equals("websocket-stop-time-updater")) {
            updater=new WebsocketStoptimeUpdater();
          }
 else           if (type.equals("real-time-alerts")) {
            updater=new GtfsRealtimeUpdater();
          }
 else           if (type.equals("example-updater")) {
            updater=new ExampleGraphUpdater();
          }
 else           if (type.equals("example-polling-updater")) {
            updater=new ExamplePollingGraphUpdater();
          }
        }
        try {
          if (updater == null) {
            LOG.error("Unknown updater type: " + type);
          }
 else {
            updater.setGraphUpdaterManager(updaterManager);
            if (updater instanceof PreferencesConfigurable) {
              ((PreferencesConfigurable)updater).configure(graph,prefs);
            }
            updaterManager.addUpdater(updater);
          }
        }
 catch (        Exception e) {
          LOG.error("Can't configure: " + configurableName,e);
        }
      }
    }
  }
 catch (  BackingStoreException e) {
    LOG.error("Can't read configuration",e);
  }
  return updaterManager;
}
