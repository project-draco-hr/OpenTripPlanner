{
  if (target == this.target) {
    LOG.debug("reusing existing heuristic");
    return;
  }
  LOG.info("begin init heuristic        {}",System.currentTimeMillis());
  this.target=target;
  int nVertices=graph.countVertices();
  weights=Maps.newHashMapWithExpectedSize(((int)Math.log(nVertices)) + 1);
  this.options=s.getOptions();
  this.origin=s.getVertex();
  LOG.debug("initializing heuristic computation thread");
  streetSearch(options,false);
  LOG.info("end foreward street search {}",System.currentTimeMillis());
  q=new BinHeap<Vertex>();
  for (  State stopState : streetSearch(options,true)) {
    q.insert(stopState.getVertex(),stopState.getWeight());
  }
  LOG.info("end backward street search {}",System.currentTimeMillis());
  options.setMaxWalkDistance(Double.MAX_VALUE);
  LOG.debug("initialized SSSP");
}
