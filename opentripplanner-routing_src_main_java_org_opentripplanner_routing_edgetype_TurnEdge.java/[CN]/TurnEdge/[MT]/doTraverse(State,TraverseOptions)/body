{
  if (restricted && !options.getModes().contains(TraverseMode.WALK)) {
    return null;
  }
  if (!fromv.canTraverse(options)) {
    if (options.getModes().contains(TraverseMode.BICYCLE)) {
      return doTraverse(s0,options.getWalkingOptions());
    }
    return null;
  }
  double angleLength=fromv.getLength() + turnCost / 20;
  EdgeNarrative en=new FixedModeEdge(this,options.getModes().getNonTransitMode());
  StateEditor s1=s0.edit(this,en);
  if (options.getModes().getNonTransitMode().equals(TraverseMode.CAR)) {
switch (s0.getNoThruTrafficState()) {
case INIT:
      if (fromv.isNoThruTraffic()) {
        s1.setNoThruTrafficState(NoThruTrafficState.IN_INITIAL_ISLAND);
      }
 else {
        s1.setNoThruTrafficState(NoThruTrafficState.BETWEEN_ISLANDS);
      }
    break;
case IN_INITIAL_ISLAND:
  if (!fromv.isNoThruTraffic()) {
    s1.setNoThruTrafficState(NoThruTrafficState.BETWEEN_ISLANDS);
  }
break;
case BETWEEN_ISLANDS:
if (fromv.isNoThruTraffic()) {
s1.setNoThruTrafficState(NoThruTrafficState.IN_FINAL_ISLAND);
}
break;
case IN_FINAL_ISLAND:
if (!fromv.isNoThruTraffic()) {
return null;
}
break;
}
}
double time=angleLength / options.speed;
double weight=fromv.computeWeight(s0,options,time);
s1.incrementWalkDistance(fromv.getLength());
s1.incrementTimeInSeconds((int)time);
s1.incrementWeight(weight);
if (s1.weHaveWalkedTooFar(options)) return null;
return s1.makeState();
}
