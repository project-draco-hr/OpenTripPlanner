{
  Parser parser=new Parser();
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PlainStreetEdge.class);
    path.add(PlainStreetEdge.class);
    path.add(PlainStreetEdge.class);
    path.add(PlainStreetEdge.class);
    assertTrue(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PlainStreetEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PlainStreetEdge.class);
    assertTrue(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PatternHop.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PlainStreetEdge.class);
    assertTrue(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PatternHop.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    assertTrue(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PlainStreetEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PlainStreetEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PlainStreetEdge.class);
    assertFalse(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PlainStreetEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(TransferEdge.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PlainStreetEdge.class);
    assertTrue(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PlainStreetEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(SimpleTransfer.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PlainStreetEdge.class);
    assertTrue(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PlainStreetEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(TimedTransferEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PlainStreetEdge.class);
    assertTrue(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PlainStreetEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(TimedTransferEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    assertTrue(parsePath(parser,path));
  }
{
    List<Class<? extends Edge>> path=new ArrayList<Class<? extends Edge>>();
    path.add(PreBoardEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(TimedTransferEdge.class);
    path.add(TransitBoardAlight.class);
    path.add(PatternHop.class);
    path.add(TransitBoardAlight.class);
    path.add(PreAlightEdge.class);
    path.add(StreetTransitLink.class);
    path.add(PlainStreetEdge.class);
    assertTrue(parsePath(parser,path));
  }
}
