{
  if (!req.modes.isTransit())   return 0;
  GenericDijkstra gd=new GenericDijkstra(req);
  State s=new State(req.rctx.target,req);
  gd.setHeuristic(new TrivialRemainingWeightHeuristic());
  final ClosestStopTraverseVisitor visitor=new ClosestStopTraverseVisitor();
  gd.traverseVisitor=visitor;
  gd.searchTerminationStrategy=new SearchTerminationStrategy(){
    @Override public boolean shouldSearchTerminate(    Vertex origin,    Vertex target,    State current,    ShortestPathTree spt,    RoutingRequest traverseOptions){
      return visitor.distanceToClosestStop != Double.POSITIVE_INFINITY;
    }
  }
;
  gd.getShortestPathTree(s);
  return visitor.distanceToClosestStop;
}
