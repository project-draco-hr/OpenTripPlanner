{
  LOG.debug("Auto discovering graphs under {}",basePath);
  Set<String> graphOnDisk=new HashSet<String>();
  File rootGraphFile=new File(basePath,InputStreamGraphSource.GRAPH_FILENAME);
  if (rootGraphFile.exists() && rootGraphFile.canRead()) {
    graphOnDisk.add("");
  }
  for (  String sub : basePath.list()) {
    File subPath=new File(basePath,sub);
    if (subPath.isDirectory()) {
      File graphFile=new File(subPath,InputStreamGraphSource.GRAPH_FILENAME);
      if (graphFile.exists() && graphFile.canRead()) {
        graphOnDisk.add(sub);
      }
    }
  }
  Set<String> graphRegistered=new HashSet<>(graphService.getRouterIds());
  Set<String> graphToRegister=new HashSet<>(graphOnDisk);
  graphToRegister.removeAll(graphRegistered);
  if (!graphToRegister.isEmpty()) {
    LOG.info("Found new routers to register: {}",Arrays.toString(graphToRegister.toArray()));
    for (    String routerId : graphToRegister) {
      InputStreamGraphSource graphSource=InputStreamGraphSource.newFileGraphSource(routerId,getBasePath(routerId),loadLevel,routerLifecycleManager);
      if (graphSource.getRouter() != null) {
        graphService.registerGraph(routerId,graphSource);
      }
    }
  }
  Collection<String> routerIds=graphService.getRouterIds();
  if (routerIds.isEmpty()) {
    LOG.warn("No graphs have been loaded/registered. " + "You must place one or more graphs before routing.");
  }
 else {
    try {
      graphService.getRouter();
    }
 catch (    GraphNotFoundException e) {
      if (routerIds.contains("")) {
        LOG.info("Setting default routerId to root graph ''");
        graphService.setDefaultRouterId("");
      }
 else {
        String defRouterId=routerIds.iterator().next();
        if (routerIds.size() > 1)         LOG.warn("Setting default routerId to arbitrary one '{}'",defRouterId);
 else         LOG.info("Setting default routerId to '{}'",defRouterId);
        graphService.setDefaultRouterId(defRouterId);
      }
    }
  }
}
