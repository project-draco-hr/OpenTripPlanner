{
  routeGeometry=removeDuplicatePoints(routeGeometry);
  LocationIndexedLine indexedLine=new LocationIndexedLine(routeGeometry);
  LinearLocation startIndex=indexedLine.getStartIndex();
  Coordinate routeStartCoordinate=startIndex.getCoordinate(routeGeometry);
  Envelope envelope=new Envelope(routeStartCoordinate);
  envelope.expandBy(DISTANCE_THRESHOLD);
  BinHeap<MatchState> states=new BinHeap<MatchState>();
  for (  Object obj : index.query(envelope)) {
    Edge initialEdge=(Edge)obj;
    Geometry edgeGeometry=initialEdge.getGeometry();
    LocationIndexedLine indexedEdge=new LocationIndexedLine(edgeGeometry);
    LinearLocation initialLocation=indexedEdge.project(routeStartCoordinate);
    double error=MatchState.distance(initialLocation.getCoordinate(edgeGeometry),routeStartCoordinate);
    MatchState state=new MidblockMatchState(null,routeGeometry,initialEdge,startIndex,initialLocation,error,0.01);
    states.insert(state,0);
  }
  int seen_count=0, total=0;
  HashSet<MatchState> seen=new HashSet<MatchState>();
  while (!states.empty()) {
    double k=states.peek_min_key();
    MatchState state=states.extract_min();
    if (++total % 50000 == 0) {
      log.debug("seen / total: " + seen_count + " / "+ total);
    }
    if (seen.contains(state)) {
      ++seen_count;
      continue;
    }
 else {
      if (k != 0) {
        seen.add(state);
      }
    }
    if (state instanceof EndMatchState) {
      return toEdgeList(state);
    }
    for (    MatchState next : state.getNextStates()) {
      if (seen.contains(next)) {
        continue;
      }
      states.insert(next,next.getTotalError() - next.getDistanceAlongRoute());
    }
  }
  return null;
}
