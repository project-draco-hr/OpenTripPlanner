{
  if (sptRequest.getRouterId() != null && !sptRequest.getRouterId().isEmpty())   throw new IllegalArgumentException("TODO: SampleSource is not multi-router compatible (yet).");
  long t0=System.currentTimeMillis();
  sptRequest.setWorstTime(sptRequest.dateTime + (sptRequest.arriveBy ? -isoChroneRequest.getMaxCutoffSec() : isoChroneRequest.getMaxCutoffSec()));
  sptRequest.setBatch(true);
  sptRequest.setRoutingContext(graphService.getGraph(sptRequest.getRouterId()));
  final ShortestPathTree spt=sptService.getShortestPathTree(sptRequest);
  sptRequest.cleanup();
  long t1=System.currentTimeMillis();
  List<Coordinate> initialPoints=computeInitialPoints(spt);
  ZFunc timeFunc=new ZFunc(){
    @Override public long z(    Coordinate c){
      Sample sample=sampleSource.getSample(c.x,c.y);
      if (sample == null) {
        return Long.MAX_VALUE;
      }
      Long z=sample.eval(spt);
      return z;
    }
  }
;
  Coordinate center=sptRequest.getFrom().getCoordinate();
  double gridSizeMeters=isoChroneRequest.getPrecisionMeters();
  double dY=Math.toDegrees(gridSizeMeters / SphericalDistanceLibrary.RADIUS_OF_EARTH_IN_M);
  double dX=dY / Math.cos(center.x);
  LOG.info("dX={}, dY={}",dX,dY);
  RecursiveGridIsolineBuilder isolineBuilder=new RecursiveGridIsolineBuilder(dX,dY,center,timeFunc,initialPoints);
  isolineBuilder.setDebugCrossingEdges(isoChroneRequest.isIncludeDebugGeometry());
  isolineBuilder.setDebugSeedGrid(isoChroneRequest.isIncludeDebugGeometry());
  List<IsochroneData> isochrones=new ArrayList<IsochroneData>();
  for (  Integer cutoffSec : isoChroneRequest.getCutoffSecList()) {
    IsochroneData isochrone=new IsochroneData(cutoffSec,isolineBuilder.computeIsoline(cutoffSec));
    if (isoChroneRequest.isIncludeDebugGeometry())     isochrone.setDebugGeometry(isolineBuilder.getDebugGeometry());
    isochrones.add(isochrone);
  }
  long t2=System.currentTimeMillis();
  LOG.info("Computed SPT in {}msec, {} isochrones in {}msec",(int)(t1 - t0),isochrones.size(),(int)(t2 - t1));
  return isochrones;
}
