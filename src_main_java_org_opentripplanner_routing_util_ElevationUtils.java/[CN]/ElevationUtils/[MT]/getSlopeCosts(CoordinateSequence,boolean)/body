{
  Coordinate[] coordinates=elev.toCoordinateArray();
  boolean flattened=false;
  double maxSlope=0;
  double slopeSpeedEffectiveLength=0;
  double slopeWorkCost=0;
  double slopeSafetyCost=0;
  double[] lengths=getLengthsFromElevation(elev);
  double trueLength=lengths[0];
  double flatLength=lengths[1];
  double lengthMultiplier=flatLength == 0 ? 0 : trueLength / flatLength;
  if (Double.isNaN(lengthMultiplier)) {
    log.error("lengthMultiplier from elevation profile is NaN, setting to 1");
    lengthMultiplier=1;
  }
  for (int i=0; i < coordinates.length - 1; ++i) {
    double run=coordinates[i + 1].x - coordinates[i].x;
    double rise=coordinates[i + 1].y - coordinates[i].y;
    if (run == 0) {
      continue;
    }
    double slope=rise / run;
    if ((slopeLimit && (slope > 0.35 || slope < -0.35)) || slope > 1.0 || slope < -1.0) {
      slope=0;
      flattened=true;
    }
    if (maxSlope < Math.abs(slope)) {
      maxSlope=Math.abs(slope);
    }
    double slope_or_zero=Math.max(slope,0);
    double hypotenuse=Math.sqrt(rise * rise + run * run);
    double energy=hypotenuse * (ENERGY_PER_METER_ON_FLAT + ENERGY_SLOPE_FACTOR * slope_or_zero * slope_or_zero* slope_or_zero);
    slopeWorkCost+=energy;
    double slopeSpeedCoef=slopeSpeedCoefficient(slope,coordinates[i].y);
    slopeSpeedEffectiveLength+=hypotenuse / slopeSpeedCoef;
    double safetyCost=hypotenuse * (slopeSpeedCoef - 1) * 0.25;
    if (safetyCost > 0) {
      slopeSafetyCost+=safetyCost;
    }
  }
  return new SlopeCosts(slopeSpeedEffectiveLength / flatLength,slopeWorkCost / flatLength,slopeSafetyCost,maxSlope,lengthMultiplier,flattened);
}
