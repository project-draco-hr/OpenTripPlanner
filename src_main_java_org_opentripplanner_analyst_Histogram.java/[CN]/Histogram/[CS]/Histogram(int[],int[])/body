{
  int size=weightingFunctions.length;
  int maxSecs=Integer.MIN_VALUE;
  for (  int time : times) {
    if (time == Integer.MAX_VALUE)     continue;
    if (time > maxSecs)     maxSecs=time;
  }
  int[] binnedCounts=new int[maxSecs + 1];
  int[] binnedWeights=new int[maxSecs + 1];
  for (int i=0; i < times.length; i++) {
    if (times[i] == Integer.MAX_VALUE)     continue;
    binnedCounts[times[i]]+=1;
    binnedWeights[times[i]]+=weight[i];
  }
  double[] tmpCounts=new double[size];
  double[] tmpSums=new double[size];
  for (int i=0; i < binnedCounts.length; i++) {
    if (binnedCounts[i] == 0)     continue;
    for (int j=0; j < weightingFunctions.length; j++) {
      double w=weightingFunctions[j].getWeight(i);
      if (w == 0)       continue;
 else       if (w == 1) {
        tmpCounts[j]+=binnedCounts[i];
        tmpSums[j]+=binnedWeights[i];
      }
 else {
        tmpCounts[j]+=w * binnedCounts[i];
        tmpSums[j]+=w * binnedWeights[i];
      }
    }
  }
  counts=new int[size];
  sums=new int[size];
  for (int i=0; i < weightingFunctions.length; i++) {
    counts[i]=(int)FastMath.round(tmpCounts[i]);
    sums[i]=(int)FastMath.round(tmpSums[i]);
  }
  for (int i=weightingFunctions.length - 1; i > 0; i--) {
    counts[i]-=counts[i - 1];
    sums[i]-=sums[i - 1];
  }
}
