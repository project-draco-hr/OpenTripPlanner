{
  BasicTripPattern tripPattern=new BasicTripPattern(trip,stopTimes);
  TraverseMode mode=GtfsLibrary.getTraverseMode(trip.getRoute());
  int lastStop=stopTimes.size() - 1;
  int i;
  StopTime st1=null;
  PatternArriveVertex psv0arrive, psv1arrive=null;
  PatternDepartVertex psv0depart;
  for (i=0; i < lastStop; i++) {
    StopTime st0=stopTimes.get(i);
    Stop s0=st0.getStop();
    st1=stopTimes.get(i + 1);
    Stop s1=st1.getStop();
    int dwellTime=st0.getDepartureTime() - st0.getArrivalTime();
    String departId=id(s0.getId()) + "_" + id(trip.getId())+ "_"+ st0.getStopSequence()+ "_D";
    String arriveId=id(s1.getId()) + "_" + id(trip.getId())+ "_"+ st1.getStopSequence()+ "_A";
    psv0depart=new PatternDepartVertex(graph,departId,s0.getLon(),s0.getLat(),s0.getId(),tripPattern);
    patternDepartNodes.put(new T2<Stop,Trip>(s0,trip),psv0depart);
    if (i != 0) {
      psv0arrive=psv1arrive;
      PatternDwell dwell=new PatternDwell(psv0arrive,psv0depart,i,tripPattern);
      if (dwellTime == 0) {
        potentiallyUselessDwells.add(dwell);
      }
    }
    psv1arrive=new PatternArriveVertex(graph,arriveId,s1.getLon(),s1.getLat(),s1.getId(),tripPattern);
    patternArriveNodes.put(new T2<Stop,Trip>(s1,trip),psv1arrive);
    PatternHop hop=new PatternHop(psv0depart,psv1arrive,s0,s1,i,tripPattern);
    hop.setGeometry(getHopGeometry(trip.getShapeId(),st0,st1,psv0depart,psv1arrive));
    int arrivalTime=st1.getArrivalTime();
    int departureTime=st0.getDepartureTime();
    int runningTime=arrivalTime - departureTime;
    tripPattern.addHop(i,0,departureTime,runningTime,arrivalTime,dwellTime,st0.getStopHeadsign(),trip);
    TransitStopDepart stopDepart=stopDepartNodes.get(s0);
    TransitStopArrive stopArrive=stopArriveNodes.get(s1);
    new PatternBoard(stopDepart,psv0depart,tripPattern,i,mode);
    new PatternAlight(psv1arrive,stopArrive,tripPattern,i,mode);
  }
  tripPattern.setTripFlags(0,((trip.getWheelchairAccessible() == 1) ? TripPattern.FLAG_WHEELCHAIR_ACCESSIBLE : 0) | (((trip.getRoute().getBikesAllowed() == 2 && trip.getTripBikesAllowed() != 1) || trip.getTripBikesAllowed() == 2) ? TripPattern.FLAG_BIKES_ALLOWED : 0));
  return tripPattern;
}
