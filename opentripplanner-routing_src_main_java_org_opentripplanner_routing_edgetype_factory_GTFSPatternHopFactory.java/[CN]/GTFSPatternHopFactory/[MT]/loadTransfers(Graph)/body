{
  Collection<Transfer> transfers=_dao.getAllTransfers();
  TransferTable transferTable=graph.getTransferTable();
  for (  Transfer t : transfers) {
    Stop fromStop=t.getFromStop();
    Stop toStop=t.getToStop();
    Route fromRoute=t.getFromRoute();
    Route toRoute=t.getToRoute();
    Trip fromTrip=t.getFromTrip();
    Trip toTrip=t.getToTrip();
    Vertex fromVertex=context.stopArriveNodes.get(fromStop);
    Vertex toVertex=context.stopDepartNodes.get(toStop);
switch (t.getTransferType()) {
case 1:
      boolean hasTimedTransferEdge=false;
    for (    Edge outgoingEdge : fromVertex.getOutgoing()) {
      if (outgoingEdge instanceof TimedTransferEdge) {
        if (outgoingEdge.getToVertex() == toVertex) {
          hasTimedTransferEdge=true;
          break;
        }
      }
    }
  if (!hasTimedTransferEdge) {
    new TimedTransferEdge(fromVertex,toVertex);
  }
transferTable.addTransferTime(fromStop,toStop,fromRoute,toRoute,fromTrip,toTrip,StopTransfer.TIMED_TRANSFER);
break;
case 2:
transferTable.addTransferTime(fromStop,toStop,fromRoute,toRoute,fromTrip,toTrip,t.getMinTransferTime());
break;
case 3:
transferTable.addTransferTime(fromStop,toStop,fromRoute,toRoute,fromTrip,toTrip,StopTransfer.FORBIDDEN_TRANSFER);
break;
case 0:
default :
transferTable.addTransferTime(fromStop,toStop,fromRoute,toRoute,fromTrip,toTrip,StopTransfer.PREFERRED_TRANSFER);
break;
}
}
}
