{
  TableTripPattern tripPattern=new TableTripPattern(trip,stopPattern,getServiceId(trip));
  getTripPatternIndex(tripPattern);
  TraverseMode mode=GtfsLibrary.getTraverseMode(trip.getRoute());
  ArrayList<PatternHop> hops=new ArrayList<PatternHop>();
  PatternArriveVertex psv0arrive, psv1arrive=null;
  PatternDepartVertex psv0depart;
  for (int hopIndex=0; hopIndex < stopTimes.size() - 1; hopIndex++) {
    StopTime st0=stopTimes.get(hopIndex);
    Stop s0=st0.getStop();
    StopTime st1=stopTimes.get(hopIndex + 1);
    Stop s1=st1.getStop();
    psv0depart=new PatternDepartVertex(graph,tripPattern,st0);
    context.patternDepartNodes.put(new T2<Stop,Trip>(s0,trip),psv0depart);
    if (hopIndex != 0) {
      psv0arrive=psv1arrive;
      PatternDwell dwell=new PatternDwell(psv0arrive,psv0depart,hopIndex,tripPattern);
      if (st0.getArrivalTime() == st0.getDepartureTime())       potentiallyUselessDwells.add(dwell);
    }
    psv1arrive=new PatternArriveVertex(graph,tripPattern,st1);
    context.patternArriveNodes.put(new T2<Stop,Trip>(st1.getStop(),trip),psv1arrive);
    PatternHop hop=new PatternHop(psv0depart,psv1arrive,s0,s1,hopIndex);
    hops.add(hop);
    TransitStopDepart stopDepart=context.stopDepartNodes.get(s0);
    if (stopDepart == null) {
      s0=_dao.getStopForId(new AgencyAndId(s0.getId().getAgencyId(),s0.getParentStation()));
      stopDepart=context.stopDepartNodes.get(s0);
      if (stopDepart == null) {
        _log.warn(GraphBuilderAnnotation.register(graph,Variety.STOP_AT_ENTRANCE_IRREPARABLE,st0));
        continue;
      }
 else {
        _log.warn(GraphBuilderAnnotation.register(graph,Variety.STOP_AT_ENTRANCE,st0));
      }
    }
    TransitStopArrive stopArrive=context.stopArriveNodes.get(s1);
    if (stopArrive == null) {
      s1=_dao.getStopForId(new AgencyAndId(s1.getId().getAgencyId(),s1.getParentStation()));
      stopArrive=context.stopArriveNodes.get(s1);
      if (stopArrive == null) {
        _log.warn(GraphBuilderAnnotation.register(graph,Variety.STOP_AT_ENTRANCE_IRREPARABLE,st1));
        continue;
      }
 else {
        _log.warn(GraphBuilderAnnotation.register(graph,Variety.STOP_AT_ENTRANCE,st1));
      }
    }
    new TransitBoardAlight(stopDepart,psv0depart,hopIndex,mode);
    new TransitBoardAlight(psv1arrive,stopArrive,hopIndex,mode);
  }
  return new T2<TableTripPattern,List<PatternHop>>(tripPattern,hops);
}
