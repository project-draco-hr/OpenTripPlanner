{
  if (fareServiceFactory == null) {
    fareServiceFactory=new DefaultFareServiceFactory();
  }
  fareServiceFactory.setDao(_dao);
  loadStops(graph);
  loadPathways(graph);
  _log.debug("Loading hops");
  clearCachedData();
  Collection<Trip> trips=_dao.getAllTrips();
  HashMap<ScheduledStopPattern,BasicTripPattern> patterns=new HashMap<ScheduledStopPattern,BasicTripPattern>();
  int index=0;
  HashMap<Trip,List<Frequency>> tripFrequencies=new HashMap<Trip,List<Frequency>>();
  for (  Frequency freq : _dao.getAllFrequencies()) {
    List<Frequency> freqs=tripFrequencies.get(freq.getTrip());
    if (freqs == null) {
      freqs=new ArrayList<Frequency>();
      tripFrequencies.put(freq.getTrip(),freqs);
    }
    freqs.add(freq);
  }
  for (  Trip trip : trips) {
    if (index % 10000 == 0)     _log.debug("trips=" + index + "/"+ trips.size());
    index++;
    List<StopTime> originalStopTimes=getNonduplicateStopTimesForTrip(trip);
    interpolateStopTimes(originalStopTimes);
    if (originalStopTimes.size() < 2) {
      _log.warn(GraphBuilderAnnotation.register(graph,Variety.TRIP_DEGENERATE,trip));
      continue;
    }
    List<List<StopTime>> allStopTimes=new ArrayList<List<StopTime>>();
    List<Frequency> frequencies=tripFrequencies.get(trip);
    ScheduledStopPattern stopPattern=stopPatternfromTrip(trip,_dao);
    BasicTripPattern tripPattern=patterns.get(stopPattern);
    String blockId=trip.getBlockId();
    if (frequencies == null) {
      allStopTimes.add(originalStopTimes);
    }
 else {
      for (      Frequency freq : frequencies) {
        for (int i=freq.getStartTime(); i < freq.getEndTime(); i+=freq.getHeadwaySecs()) {
          int diff=i - originalStopTimes.get(0).getArrivalTime();
          List<StopTime> newStopTimes=new ArrayList<StopTime>();
          for (          StopTime st : originalStopTimes) {
            StopTime modified=cloneStopTime(st);
            if (st.isArrivalTimeSet())             modified.setArrivalTime(st.getArrivalTime() + diff);
            if (st.isDepartureTimeSet())             modified.setDepartureTime(st.getDepartureTime() + diff);
            newStopTimes.add(modified);
          }
          allStopTimes.add(newStopTimes);
        }
      }
    }
    for (    List<StopTime> stopTimes : allStopTimes) {
      boolean simple=false;
      if (tripPattern == null) {
        tripPattern=makeTripPattern(graph,trip,stopTimes);
        patterns.put(stopPattern,tripPattern);
        if (blockId != null && !blockId.equals("")) {
          addTripToInterliningMap(trip,stopTimes,tripPattern);
        }
      }
 else {
        int insertionPoint=tripPattern.getDepartureTimeInsertionPoint(stopTimes.get(0).getDepartureTime());
        if (insertionPoint < 0) {
          insertionPoint=-(insertionPoint + 1);
          if (!tripPattern.stopTimesIdentical(stopTimes,insertionPoint)) {
            _log.warn(GraphBuilderAnnotation.register(graph,Variety.TRIP_DUPLICATE_DEPARTURE,trip.getId(),tripPattern.getTrip(insertionPoint)));
            simple=true;
            createSimpleHops(graph,trip,stopTimes);
          }
 else {
            _log.warn(GraphBuilderAnnotation.register(graph,Variety.TRIP_DUPLICATE,trip.getId(),tripPattern.getTrip(insertionPoint)));
            break;
          }
        }
 else {
          StopTime st1=null;
          int i;
          for (i=0; i < stopTimes.size() - 1; i++) {
            StopTime st0=stopTimes.get(i);
            st1=stopTimes.get(i + 1);
            int dwellTime=st0.getDepartureTime() - st0.getArrivalTime();
            int runningTime=st1.getArrivalTime() - st0.getDepartureTime();
            try {
              tripPattern.addHop(i,insertionPoint,st0.getDepartureTime(),runningTime,st1.getArrivalTime(),dwellTime,st0.getStopHeadsign(),trip);
            }
 catch (            TripOvertakingException e) {
              _log.warn(GraphBuilderAnnotation.register(graph,Variety.TRIP_DUPLICATE_DEPARTURE,e.overtaker,e.overtaken,e.stopIndex));
              for (i=i - 1; i >= 0; --i) {
                tripPattern.removeHop(i,insertionPoint);
              }
              createSimpleHops(graph,trip,stopTimes);
              simple=true;
              break;
            }
          }
        }
        if (!simple) {
          if (blockId != null && !blockId.equals("")) {
            addTripToInterliningMap(trip,stopTimes,tripPattern);
          }
          tripPattern.setTripFlags(insertionPoint,((trip.getWheelchairAccessible() == 1) ? TripPattern.FLAG_WHEELCHAIR_ACCESSIBLE : 0) | (((trip.getRoute().getBikesAllowed() == 2 && trip.getTripBikesAllowed() != 1) || trip.getTripBikesAllowed() == 2) ? TripPattern.FLAG_BIKES_ALLOWED : 0));
        }
      }
    }
  }
  for (  List<InterliningTrip> blockTrips : tripsForBlock.values()) {
    if (blockTrips.size() == 1) {
      continue;
    }
    Collections.sort(blockTrips);
    for (int i=0; i < blockTrips.size() - 1; ++i) {
      InterliningTrip fromInterlineTrip=blockTrips.get(i);
      InterliningTrip toInterlineTrip=blockTrips.get(i + 1);
      Trip fromTrip=fromInterlineTrip.trip;
      Trip toTrip=toInterlineTrip.trip;
      StopTime st0=fromInterlineTrip.lastStopTime;
      StopTime st1=toInterlineTrip.firstStopTime;
      Stop s0=st0.getStop();
      Stop s1=st1.getStop();
      Trip fromExemplar=fromInterlineTrip.tripPattern.exemplar;
      Trip toExemplar=toInterlineTrip.tripPattern.exemplar;
      List<StopTime> fromStopTimes=getNonduplicateStopTimesForTrip(fromExemplar);
      int exemplarStopSequence0=fromStopTimes.get(fromStopTimes.size() - 1).getStopSequence();
      List<StopTime> toStopTimes=getNonduplicateStopTimesForTrip(toExemplar);
      int exemplarStopSequence1=toStopTimes.get(0).getStopSequence();
      PatternInterlineDwell dwell;
      InterlineSwitchoverKey dwellKey=new InterlineSwitchoverKey(s0,s1,fromInterlineTrip.tripPattern,toInterlineTrip.tripPattern);
      dwell=getInterlineDwell(dwellKey);
      if (dwell == null) {
        String startId=id(s0.getId()) + "_" + id(fromExemplar.getId())+ "_"+ exemplarStopSequence0+ "_A";
        Vertex startJourney=graph.getVertex(startId);
        String endId=id(s1.getId()) + "_" + id(toExemplar.getId())+ "_"+ exemplarStopSequence1+ "_D";
        Vertex endJourney=graph.getVertex(endId);
        dwell=new PatternInterlineDwell(startJourney,endJourney,toTrip);
        putInterlineDwell(dwellKey,dwell);
      }
      int dwellTime=st1.getDepartureTime() - st0.getArrivalTime();
      dwell.addTrip(fromTrip.getId(),toTrip.getId(),dwellTime,fromInterlineTrip.getPatternIndex(),toInterlineTrip.getPatternIndex());
    }
  }
  loadTransfers(graph);
  deleteUselessDwells(graph);
  clearCachedData();
  graph.putService(FareService.class,fareServiceFactory.makeFareService());
}
