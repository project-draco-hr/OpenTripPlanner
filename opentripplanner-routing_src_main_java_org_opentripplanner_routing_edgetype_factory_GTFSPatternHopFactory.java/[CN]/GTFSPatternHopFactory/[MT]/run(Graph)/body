{
  if (fareServiceFactory == null) {
    fareServiceFactory=new DefaultFareServiceFactory();
  }
  fareServiceFactory.setDao(_dao);
  loadStops(graph);
  loadPathways(graph);
  loadAgencies(graph);
  clearCachedData();
  _log.debug("building hops from trips");
  Collection<Trip> trips=_dao.getAllTrips();
  int tripCount=0;
  HashMap<Trip,List<Frequency>> tripFrequencies=new HashMap<Trip,List<Frequency>>();
  for (  Frequency freq : _dao.getAllFrequencies()) {
    List<Frequency> freqs=tripFrequencies.get(freq.getTrip());
    if (freqs == null) {
      freqs=new ArrayList<Frequency>();
      tripFrequencies.put(freq.getTrip(),freqs);
    }
    freqs.add(freq);
  }
  TRIP:   for (  Trip trip : trips) {
    tripCount++;
    if (tripCount % 100000 == 0)     _log.debug("trips=" + tripCount + "/"+ trips.size());
    List<StopTime> stopTimes=getNonduplicateStopTimesForTrip(trip);
    filterStopTimes(stopTimes,graph);
    interpolateStopTimes(stopTimes);
    if (stopTimes.size() < 2) {
      _log.warn(GraphBuilderAnnotation.register(graph,Variety.TRIP_DEGENERATE,trip));
      continue TRIP;
    }
    List<Frequency> frequencies=tripFrequencies.get(trip);
    if (frequencies != null) {
      Frequency frequency=frequencies.get(0);
      if (frequencies.size() > 1 || frequency.getStartTime() != stopTimes.get(0).getDepartureTime() || frequency.getEndTime() - frequency.getStartTime() > frequency.getHeadwaySecs()) {
        FrequencyBasedTripPattern frequencyPattern=makeFrequencyPattern(graph,trip,stopTimes);
        if (frequencyPattern != null)         frequencyPattern.createRanges(frequencies);
        continue TRIP;
      }
    }
    ScheduledStopPattern stopPattern=ScheduledStopPattern.fromTrip(trip,_dao);
    TripPattern tripPattern=patterns.get(stopPattern);
    if (tripPattern == null) {
      tripPattern=new TripPattern(trip,stopPattern);
      makePatternVerticesAndEdges(graph,tripPattern,trip,stopTimes);
      patterns.put(stopPattern,tripPattern);
    }
    tripPattern.addTrip(trip,stopTimes);
    String blockId=trip.getBlockId();
    if (blockId != null && !blockId.equals("")) {
      addTripToInterliningMap(trip,stopTimes,tripPattern);
    }
  }
  for (  List<InterliningTrip> blockTrips : tripsForBlock.values()) {
    if (blockTrips.size() == 1) {
      continue;
    }
    Collections.sort(blockTrips);
    for (int i=0; i < blockTrips.size() - 1; ++i) {
      InterliningTrip fromInterlineTrip=blockTrips.get(i);
      InterliningTrip toInterlineTrip=blockTrips.get(i + 1);
      Trip fromTrip=fromInterlineTrip.trip;
      Trip toTrip=toInterlineTrip.trip;
      StopTime st0=fromInterlineTrip.lastStopTime;
      StopTime st1=toInterlineTrip.firstStopTime;
      Stop s0=st0.getStop();
      Stop s1=st1.getStop();
      if (st0.getPickupType() == 1) {
        continue;
      }
      Trip fromExemplar=fromInterlineTrip.tripPattern.exemplar;
      Trip toExemplar=toInterlineTrip.tripPattern.exemplar;
      InterlineSwitchoverKey dwellKey=new InterlineSwitchoverKey(s0,s1,fromInterlineTrip.tripPattern,toInterlineTrip.tripPattern);
      PatternInterlineDwell dwell=getInterlineDwell(dwellKey);
      if (dwell == null) {
        Vertex startJourney=patternArriveNodes.get(new T2<Stop,Trip>(s0,fromExemplar));
        Vertex endJourney=patternDepartNodes.get(new T2<Stop,Trip>(s1,toExemplar));
        dwell=new PatternInterlineDwell(startJourney,endJourney,toTrip);
        interlineDwells.put(dwellKey,dwell);
      }
      int dwellTime=st1.getDepartureTime() - st0.getArrivalTime();
      dwell.addTrip(fromTrip.getId(),toTrip.getId(),dwellTime,fromInterlineTrip.getPatternIndex(),toInterlineTrip.getPatternIndex());
    }
  }
  loadTransfers(graph);
  if (_deleteUselessDwells)   deleteUselessDwells(graph);
  clearCachedData();
  graph.putService(FareService.class,fareServiceFactory.makeFareService());
}
