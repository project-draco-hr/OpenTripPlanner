{
  Collection<Trip> trips=_dao.getAllTrips();
  HashMap<StopPattern2,TripPattern> patterns=new HashMap<StopPattern2,TripPattern>();
  int index=0;
  for (  Trip trip : trips) {
    if (index % 1000 == 0)     _log.debug("trips=" + index + "/"+ trips.size());
    index++;
    List<StopTime> stopTimes=_dao.getStopTimesForTrip(trip);
    if (stopTimes.isEmpty())     continue;
    StopPattern2 stopPattern=stopPatternfromTrip(trip,_dao);
    TripPattern tripPattern=patterns.get(stopPattern);
    int lastStop=stopTimes.size() - 1;
    if (tripPattern == null) {
      tripPattern=new TripPattern(trip,stopTimes);
      Geometry geometry=getTripGeometry(trip);
      LocationIndexedLine lol=null;
      List<ShapePoint> shapePoints=null;
      if (geometry != null) {
        shapePoints=_dao.getShapePointsForShapeId(trip.getShapeId());
        lol=new LocationIndexedLine(geometry);
      }
      for (int i=0; i < lastStop; i++) {
        StopTime st0=stopTimes.get(i);
        Stop s0=st0.getStop();
        StopTime st1=stopTimes.get(i + 1);
        Stop s1=st1.getStop();
        int runningTime=st1.getArrivalTime() - st0.getDepartureTime();
        Vertex startJourney=graph.addVertex(id(s0.getId()) + "_" + id(trip.getId()),s0.getLon(),s0.getLat());
        Vertex endJourney=graph.addVertex(id(s1.getId()) + "_" + id(trip.getId()),s1.getLon(),s1.getLat());
        PatternHop hop=new PatternHop(startJourney,endJourney,s0,s1,i,tripPattern);
        if (geometry != null) {
          hop.setGeometry(getHopGeometry(shapePoints,lol,st0,st1,startJourney,endJourney));
        }
        tripPattern.addHop(i,0,st0.getDepartureTime(),runningTime);
        graph.addEdge(hop);
        Vertex startStation=graph.getVertex(id(s0.getId()));
        Vertex endStation=graph.getVertex(id(s1.getId()));
        PatternBoard boarding=new PatternBoard(startStation,startJourney,tripPattern,i);
        graph.addEdge(boarding);
        graph.addEdge(new Alight(endJourney,endStation));
      }
      patterns.put(stopPattern,tripPattern);
    }
 else {
      int insertionPoint=tripPattern.getInsertionPoint(stopTimes.get(0).getDepartureTime());
      if (insertionPoint < 0) {
        _log.warn("duplicate first departure time for trip " + trip.getId() + ".  This will be handled correctly but inefficiently.");
        createSimpleHops(graph,trip,stopTimes);
      }
 else {
        for (int i=0; i < lastStop; i++) {
          StopTime st0=stopTimes.get(i);
          StopTime st1=stopTimes.get(i + 1);
          int runningTime=st1.getArrivalTime() - st0.getDepartureTime();
          try {
            tripPattern.addHop(i,insertionPoint,st0.getDepartureTime(),runningTime);
          }
 catch (          TripOvertakingException e) {
            _log.warn("trip " + trip.getId() + "overtakes another trip with the same stops.  This will be handled correctly but inefficiently.");
            for (; i >= 0; --i) {
              tripPattern.removeHop(i,insertionPoint);
            }
            createSimpleHops(graph,trip,stopTimes);
            break;
          }
        }
      }
    }
  }
  loadTransfers(graph);
}
