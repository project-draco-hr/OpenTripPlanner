{
  HashSet<TripPattern> possiblySimplePatterns=new HashSet<TripPattern>();
  HashSet<TripPattern> notSimplePatterns=new HashSet<TripPattern>();
  for (  PatternDwell dwell : potentiallyUselessDwells) {
    TripPattern pattern=(TripPattern)dwell.getPattern();
    boolean useless=true;
    for (int i=0; i < pattern.getNumDwells(); ++i) {
      if (pattern.getDwellTime(dwell.getStopIndex(),i) != 0) {
        useless=false;
        break;
      }
    }
    if (!useless) {
      possiblySimplePatterns.remove(pattern);
      notSimplePatterns.add(pattern);
      continue;
    }
    Vertex v=dwell.getFromVertex();
    v.mergeFrom(graph,dwell.getToVertex());
    if (!notSimplePatterns.contains(pattern)) {
      possiblySimplePatterns.add(pattern);
    }
  }
  for (  TripPattern pattern : possiblySimplePatterns) {
    pattern.simplify();
  }
}
