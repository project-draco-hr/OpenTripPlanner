{
  ArrayList<Hop> hops=new ArrayList<Hop>();
  boolean tripWheelchairAccessible=trip.getWheelchairAccessible() == 1;
  PatternStopVertex psv0arrive, psv0depart, psv1arrive=null;
  for (int i=0; i < stopTimes.size() - 1; i++) {
    StopTime st0=stopTimes.get(i);
    Stop s0=st0.getStop();
    StopTime st1=stopTimes.get(i + 1);
    Stop s1=st1.getStop();
    Vertex startStation=stopDepartNodes.get(s0);
    Vertex endStation=stopArriveNodes.get(s1);
    if (psv1arrive == null) {
      psv0arrive=new PatternArriveVertex(graph,trip,st0);
    }
 else {
      psv0arrive=psv1arrive;
    }
    psv0depart=new PatternDepartVertex(graph,trip,st0);
    psv1arrive=new PatternArriveVertex(graph,trip,st1);
    new Dwell(psv0arrive,psv0depart,st0);
    Hop hop=new Hop(psv0depart,psv1arrive,st0,st1,trip);
    hop.setGeometry(getHopGeometry(trip.getShapeId(),st0,st1,psv0depart,psv1arrive));
    hops.add(hop);
    if (st0.getPickupType() != 1) {
      new Board(startStation,psv0depart,hop,tripWheelchairAccessible && s0.getWheelchairBoarding() == 1,st0.getStop().getZoneId(),trip,st0.getPickupType());
    }
    if (st0.getDropOffType() != 1) {
      new Alight(psv1arrive,endStation,hop,tripWheelchairAccessible && s1.getWheelchairBoarding() == 1,st0.getStop().getZoneId(),trip,st0.getDropOffType());
    }
  }
}
