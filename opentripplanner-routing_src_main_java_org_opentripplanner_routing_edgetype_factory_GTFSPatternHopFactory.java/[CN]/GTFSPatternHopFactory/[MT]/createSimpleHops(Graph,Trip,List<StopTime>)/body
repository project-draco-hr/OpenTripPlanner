{
  String tripId=id(trip.getId());
  ArrayList<Hop> hops=new ArrayList<Hop>();
  LineString geometry=getTripGeometry(trip);
  LocationIndexedLine lol=null;
  List<ShapePoint> shapePoints=null;
  if (geometry != null) {
    shapePoints=_dao.getShapePointsForShapeId(trip.getShapeId());
    lol=new LocationIndexedLine(geometry);
  }
  for (int i=0; i < stopTimes.size() - 1; i++) {
    StopTime st0=stopTimes.get(i);
    Stop s0=st0.getStop();
    StopTime st1=stopTimes.get(i + 1);
    Stop s1=st1.getStop();
    Vertex startStation=graph.getVertex(id(s0.getId()));
    Vertex endStation=graph.getVertex(id(s1.getId()));
    Vertex startJourneyArrive=graph.addVertex(id(s0.getId()) + "_" + tripId,s0.getLon(),s0.getLat());
    Vertex startJourneyDepart=graph.addVertex(id(s0.getId()) + "_" + tripId,s0.getLon(),s0.getLat());
    Vertex endJourney=graph.addVertex(id(s1.getId()) + "_" + tripId,s1.getLon(),s1.getLat());
    Dwell dwell=new Dwell(startJourneyArrive,startJourneyDepart,st0);
    graph.addEdge(dwell);
    Hop hop=new Hop(startJourneyDepart,endJourney,st0,st1);
    if (geometry != null) {
      hop.setGeometry(getHopGeometry(shapePoints,lol,st0,st1,startJourneyDepart,endJourney));
    }
    hops.add(hop);
    Board boarding=new Board(startStation,startJourneyDepart,hop);
    graph.addEdge(boarding);
    graph.addEdge(new Alight(endJourney,endStation,hop));
  }
}
