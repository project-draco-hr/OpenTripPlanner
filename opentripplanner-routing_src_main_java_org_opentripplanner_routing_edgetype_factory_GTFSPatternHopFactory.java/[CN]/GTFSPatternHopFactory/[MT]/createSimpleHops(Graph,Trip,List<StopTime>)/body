{
  String tripId=id(trip.getId());
  ArrayList<Hop> hops=new ArrayList<Hop>();
  boolean tripWheelchairAccessible=trip.getWheelchairAccessible() == 1;
  for (int i=0; i < stopTimes.size() - 1; i++) {
    StopTime st0=stopTimes.get(i);
    Stop s0=st0.getStop();
    StopTime st1=stopTimes.get(i + 1);
    Stop s1=st1.getStop();
    Vertex startStation=graph.getVertex(departureVertexId(id(s0.getId())));
    Vertex endStation=graph.getVertex(arrivalVertexId(id(s1.getId())));
    Vertex startJourneyArrive=graph.addVertex(id(s0.getId()) + "_" + tripId+ "_"+ st0.getStopSequence()+ "_A",s0.getName(),s0.getId(),s0.getLon(),s0.getLat());
    Vertex startJourneyDepart=graph.addVertex(id(s0.getId()) + "_" + tripId+ "_"+ st0.getStopSequence()+ "_D",s0.getName(),s0.getId(),s0.getLon(),s0.getLat());
    Vertex endJourneyArrive=graph.addVertex(id(s1.getId()) + "_" + tripId+ "_"+ st1.getStopSequence()+ "_A",s1.getName(),s1.getId(),s1.getLon(),s1.getLat());
    Dwell dwell=new Dwell(startJourneyArrive,startJourneyDepart,st0);
    graph.addEdge(dwell);
    Hop hop=new Hop(startJourneyDepart,endJourneyArrive,st0,st1,trip);
    hop.setGeometry(getHopGeometry(trip.getShapeId(),st0,st1,startJourneyDepart,endJourneyArrive));
    hops.add(hop);
    if (st0.getPickupType() != 1) {
      Board boarding=new Board(startStation,startJourneyDepart,hop,tripWheelchairAccessible && s0.getWheelchairBoarding() == 1,st0.getStop().getZoneId(),trip);
      graph.addEdge(boarding);
    }
    if (st0.getDropOffType() != 1) {
      graph.addEdge(new Alight(endJourneyArrive,endStation,hop,tripWheelchairAccessible && s1.getWheelchairBoarding() != 0,st0.getStop().getZoneId(),trip));
    }
  }
}
