{
  String id=null;
  List<AttributeData> attributes=Lists.newArrayList();
  if (feature.getNodeType() != JsonNodeType.OBJECT)   return;
  JsonNode type=feature.get("type");
  if (type == null || !type.asText().equalsIgnoreCase("Feature"))   return;
  JsonNode props=feature.get("properties");
  if (props == null || props.getNodeType() != JsonNodeType.OBJECT)   return;
  JsonNode structured=props.get("structured");
  if (structured == null || structured.getNodeType() != JsonNodeType.OBJECT)   return;
  Iterator<Entry<String,JsonNode>> catIter=structured.fields();
  while (catIter.hasNext()) {
    Entry<String,JsonNode> catEntry=catIter.next();
    String catName=catEntry.getKey();
    JsonNode catNode=catEntry.getValue();
    Iterator<Entry<String,JsonNode>> attrIter=catNode.fields();
    while (attrIter.hasNext()) {
      Entry<String,JsonNode> attrEntry=attrIter.next();
      String attrName=attrEntry.getKey();
      int magnitude=attrEntry.getValue().asInt();
      attributes.add(new AttributeData(Joiner.on(':').join(catName,attrName),magnitude));
    }
  }
  JsonNode geom=feature.get("geometry");
  Geometry jtsGeom=null;
  if (geom != null && geom.getNodeType() == JsonNodeType.OBJECT) {
    GeometryDeserializer deserializer=new GeometryDeserializer();
    jtsGeom=deserializer.parseGeometry(geom);
  }
  addFeature(id,jtsGeom,attributes);
}
