{
  Graph graph;
  if (_baseGraph != null) {
    try {
      graph=Graph.load(new File(_baseGraph),LoadLevel.FULL);
    }
 catch (    Exception e) {
      throw new RuntimeException("error loading base graph");
    }
  }
 else {
    graph=_graphService.getGraph();
  }
  if (_graphBundle == null) {
    throw new RuntimeException("graphBuilderTask has no attribute graphBundle.");
  }
  graph.setBundle(_graphBundle);
  File graphPath=_graphBundle.getGraphPath();
  if (graphPath.exists() && !_alwaysRebuild) {
    _log.info("graph already exists and alwaysRebuild=false => skipping graph build");
    return;
  }
  if (!graphPath.canWrite()) {
    throw new RuntimeException("Cannot write to graph path " + graphPath);
  }
  ArrayList<String> provided=new ArrayList<String>();
  boolean bad=false;
  for (  GraphBuilder builder : _graphBuilders) {
    List<String> prerequisites=builder.getPrerequisites();
    for (    String prereq : prerequisites) {
      if (!provided.contains(prereq)) {
        _log.error("Graph builder " + builder + " requires "+ prereq+ " but no previous stages provide it");
        bad=true;
      }
    }
    provided.addAll(builder.provides());
  }
  if (_baseGraph != null)   _log.warn("base graph loaded, not enforcing prerequisites");
 else   if (bad)   throw new RuntimeException("Prerequisites unsatisfied");
  for (  GraphBuilder builder : _graphBuilders) {
    builder.checkInputs();
  }
  HashMap<Class<?>,Object> extra=new HashMap<Class<?>,Object>();
  for (  GraphBuilder load : _graphBuilders)   load.buildGraph(graph,extra);
  if (_modeList != null) {
    ContractionHierarchySet chs=new ContractionHierarchySet(graph,_modeList,_contractionFactor);
    chs.build();
    graph.setHierarchies(chs);
  }
  GraphBuilderAnnotation.logSummary(graph.getBuilderAnnotations());
  try {
    graph.save(graphPath);
  }
 catch (  Exception ex) {
    throw new IllegalStateException(ex);
  }
  _graphService.refreshGraph();
}
