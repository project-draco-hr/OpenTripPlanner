{
  final int ROUNDS=3;
  int finalRound=ROUNDS - 1;
  int penultimateRound=ROUNDS - 2;
  if (graph.index.transfersForStop == null) {
    graph.index.initializeProfileTransfers();
  }
  findStreetOptions();
  findClosestPatterns();
  LOG.info("from stops: {}",fromStops);
  LOG.info("to stops: {}",toStops);
  this.window=new TimeWindow(request.fromTime,request.toTime,graph.index.servicesRunning(request.date));
  Set<PatternRide> queue=Sets.newHashSet();
  for (  Entry<TripPattern,StopAtDistance> entry : fromStops.entrySet()) {
    TripPattern pattern=entry.getKey();
    StopAtDistance sd=entry.getValue();
    for (int i=0; i < pattern.getStops().size(); ++i) {
      if (pattern.getStops().get(i) == sd.stop) {
        ProfileTransfer xfer=new ProfileTransfer(null,pattern,null,sd.stop,sd.distance);
        if (request.modes.contains(pattern.mode)) {
          queue.add(new PatternRide(pattern,i,null,xfer));
        }
      }
    }
  }
  for (int round=0; round < ROUNDS; ++round) {
    for (    PatternRide pr : queue) {
      makeRides(pr);
    }
    if (round != finalRound) {
      queue.clear();
      for (      Ride ride : rides.values()) {
        for (        ProfileTransfer tr : graph.index.transfersForStop.get(ride.to)) {
          if (round == penultimateRound && !toStops.containsKey(tr.tp2))           continue;
          if (ride.containsPattern(tr.tp1)) {
            if (pathContainsRoute(ride,tr.tp2.route))             continue;
            if (tr.s1 != tr.s2 && pathContainsStop(ride,tr.s2))             continue;
            for (int i=0; i < tr.tp2.getStops().size(); ++i) {
              if (tr.tp2.getStops().get(i) == tr.s2) {
                if (request.modes.contains(tr.tp2.mode)) {
                  queue.add(new PatternRide(tr.tp2,i,ride,tr));
                }
              }
            }
          }
        }
      }
      rides.clear();
    }
  }
  List<Option> options=Lists.newArrayList();
  for (  Ride ride : targetRides) {
    int dist=toStops.get(ride.patternRides.get(0).pattern).distance;
    Option option=new Option(ride,dist,window,request.walkSpeed);
    if (!option.hasEmptyRides())     options.add(option);
  }
  for (  Option option : directOptions) {
    options.add(option);
  }
  return new ProfileResponse(options,request.orderBy,request.limit);
}
