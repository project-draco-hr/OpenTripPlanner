{
  SimpleIsochrone.MinMap<T2<TripPattern,QualifiedMode>,StopAtDistance> closest=new SimpleIsochrone.MinMap<>();
  for (  StopAtDistance stopDist : stopClusters.values()) {
    for (    Stop stop : stopDist.stopCluster.children) {
      for (      TripPattern pattern : graph.index.patternsForStop.get(stop)) {
        closest.putMin(new T2(pattern,stopDist.qmode),stopDist);
      }
    }
  }
  Multimap<TripPattern,StopAtDistance> result=ArrayListMultimap.create();
  for (  Entry<T2<TripPattern,QualifiedMode>,StopAtDistance> entry : closest.entrySet()) {
    result.put(entry.getKey().first,entry.getValue());
  }
  final int MAX_PATTERNS=1000;
  if (result.size() > MAX_PATTERNS) {
    LOG.warn("Excessively long list of patterns. {} patterns, max allowed is {}.",closest.size(),MAX_PATTERNS);
  }
  return result;
}
