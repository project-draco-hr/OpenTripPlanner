{
  BooleanQuery query=new BooleanQuery();
  BooleanQuery termQuery=new BooleanQuery();
  for (  String term : queryString.split(" ")) {
    if (autocomplete) {
      termQuery.add(new PrefixQuery(new Term("name",term)),BooleanClause.Occur.SHOULD);
    }
 else {
      termQuery.add(new FuzzyQuery(new Term("name",term)),BooleanClause.Occur.SHOULD);
    }
    termQuery.add(new TermQuery(new Term("code",term)),BooleanClause.Occur.SHOULD);
  }
  query.add(termQuery,BooleanClause.Occur.MUST);
  if (stops || clusters || corners) {
    BooleanQuery typeQuery=new BooleanQuery();
    if (stops) {
      typeQuery.add(new TermQuery(new Term("category",Category.STOP.name())),BooleanClause.Occur.SHOULD);
    }
    if (clusters) {
      typeQuery.add(new TermQuery(new Term("category",Category.CLUSTER.name())),BooleanClause.Occur.SHOULD);
    }
    if (corners) {
      typeQuery.add(new TermQuery(new Term("category",Category.CORNER.name())),BooleanClause.Occur.SHOULD);
    }
    query.add(typeQuery,BooleanClause.Occur.MUST);
  }
  List<LuceneResult> result=Lists.newArrayList();
  try {
    TopScoreDocCollector collector=TopScoreDocCollector.create(10,true);
    searcher.search(query,collector);
    ScoreDoc[] docs=collector.topDocs().scoreDocs;
    for (int i=0; i < docs.length; i++) {
      LuceneResult lr=new LuceneResult();
      Document doc=searcher.doc(docs[i].doc);
      lr.lat=doc.getField("lat").numericValue().doubleValue();
      lr.lng=doc.getField("lon").numericValue().doubleValue();
      String category=doc.getField("category").stringValue().toLowerCase();
      String code;
      if (doc.getField("code") != null) {
        code="(" + doc.getField("code").stringValue() + ")";
      }
 else {
        code="";
      }
      if (doc.getField("category").stringValue().equals(Category.STOP.name()) || doc.getField("category").stringValue().equals(Category.CLUSTER.name())) {
        lr.id=doc.getField("id").stringValue();
      }
      String name=doc.getField("name").stringValue();
      lr.description=category + " " + name+ " "+ code;
      result.add(lr);
    }
  }
 catch (  Exception ex) {
    LOG.error("Error during Lucene search: {}",ex.toString());
    ex.printStackTrace();
  }
 finally {
    return result;
  }
}
