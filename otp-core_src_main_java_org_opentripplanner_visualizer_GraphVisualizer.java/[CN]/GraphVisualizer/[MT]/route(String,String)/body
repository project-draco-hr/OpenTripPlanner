{
  Date when;
  try {
    when=dateFormat.parse(searchDate.getText());
  }
 catch (  ParseException e) {
    searchDate.setText("Format: " + dateFormat.toPattern());
    return;
  }
  TraverseModeSet modeSet=new TraverseModeSet();
  modeSet.setWalk(walkCheckBox.isSelected());
  modeSet.setBicycle(bikeCheckBox.isSelected());
  modeSet.setFerry(ferryCheckBox.isSelected());
  modeSet.setTrainish(trainCheckBox.isSelected());
  modeSet.setBusish(busCheckBox.isSelected());
  modeSet.setCar(carCheckBox.isSelected());
  modeSet.setCustomMotorVehicle(cmvCheckBox.isSelected());
  if (transitCheckBox.isSelected())   modeSet.setTransit(true);
  RoutingRequest options=new RoutingRequest(modeSet);
  options.setWalkBoardCost(Integer.parseInt(boardingPenaltyField.getText()) * 60);
  options.setBikeBoardCost(Integer.parseInt(boardingPenaltyField.getText()) * 60 * 2);
  options.setOptimize(getSelectedOptimizeType());
  options.setMaxWalkDistance(Integer.parseInt(maxWalkField.getText()));
  options.setDateTime(when);
  options.setFromString(from);
  options.setToString(to);
  options.setWalkSpeed(Float.parseFloat(walkSpeed.getText()));
  options.setBikeSpeed(Float.parseFloat(bikeSpeed.getText()));
  options.numItineraries=1;
  System.out.println("--------");
  System.out.println("Path from " + from + " to "+ to+ " at "+ when);
  System.out.println("\tModes: " + modeSet);
  System.out.println("\tOptions: " + options);
  List<GraphPath> paths=pathservice.getPaths(options);
  if (paths == null) {
    System.out.println("no path");
    showGraph.highlightGraphPath(null);
    return;
  }
  GraphPath gp=paths.get(0);
  for (  State s : gp.states) {
    System.out.print(s.toString() + " <- ");
    System.out.println(s.getBackEdge());
  }
  showGraph.highlightGraphPath(gp);
  options.cleanup();
}
