{
  final List<AgencyAndId> SIR_PAID_STOPS=makeMtaStopList("S31","S30");
  final List<AgencyAndId> SUBWAY_FREE_TRANSFER_STOPS=makeMtaStopList("R11","B08","629");
  final List<AgencyAndId> SIR_BONUS_STOPS=makeMtaStopList("140","420","419","418","M22","M23","R27","R26");
  final List<AgencyAndId> SIR_BONUS_ROUTES=makeMtaStopList("M5","M20","M15-SBS");
  final List<AgencyAndId> CANARSIE=makeMtaStopList("L29","303345");
  LinkedList<State> states=path.states;
  List<Ride> rides=new ArrayList<Ride>();
  Ride newRide=null;
  final int SUBWAY=1;
  final int SIR=2;
  final int LOCAL_BUS=3;
  final int EXPRESS_BUS=30;
  final int EXPENSIVE_EXPRESS_BUS=34;
  final int WALK=-1;
  for (  State state : states) {
    Edge backEdge=state.getBackEdge();
    if (backEdge instanceof StreetEdge) {
      if (newRide == null || !newRide.classifier.equals(WALK)) {
        if (rides.size() == 0 || !rides.get(rides.size() - 1).classifier.equals(WALK)) {
          newRide=new Ride();
          newRide.classifier=WALK;
          rides.add(newRide);
        }
      }
      continue;
    }
    if (!(backEdge instanceof HopEdge)) {
      newRide=null;
      continue;
    }
    AgencyAndId routeId=state.getRoute();
    if (routeId == null) {
      newRide=null;
    }
 else {
      if (newRide == null || !routeId.equals(newRide.route)) {
        newRide=new Ride();
        rides.add(newRide);
        newRide.firstStop=((HopEdge)backEdge).getStartStop();
        newRide.route=routeId;
        Trip trip=state.getBackEdgeNarrative().getTrip();
        Route route=trip.getRoute();
        int type=route.getType();
        newRide.classifier=type;
        String shortName=route.getShortName();
        if (shortName == null) {
          newRide.classifier=SUBWAY;
        }
 else         if (shortName.equals("BxM4C")) {
          newRide.classifier=EXPENSIVE_EXPRESS_BUS;
        }
 else         if (shortName.startsWith("X") || shortName.startsWith("BxM") || shortName.startsWith("QM")|| shortName.startsWith("BM")) {
          newRide.classifier=EXPRESS_BUS;
        }
        newRide.startTime=state.getTime();
      }
      newRide.lastStop=((HopEdge)backEdge).getStartStop();
    }
  }
  if (rides.size() == 0) {
    return null;
  }
  NycFareState state=NycFareState.INIT;
  boolean lexFreeTransfer=false;
  boolean canarsieFreeTransfer=false;
  boolean siLocalBus=false;
  boolean sirBonusTransfer=false;
  float totalFare=0;
  for (  Ride ride : rides) {
    AgencyAndId firstStopId=null;
    AgencyAndId lastStopId=null;
    if (ride.firstStop != null) {
      firstStopId=ride.firstStop.getId();
      lastStopId=ride.lastStop.getId();
    }
switch (state) {
case INIT:
      lexFreeTransfer=siLocalBus=canarsieFreeTransfer=false;
    if (ride.classifier.equals(WALK)) {
    }
 else     if (ride.classifier.equals(SUBWAY)) {
      state=NycFareState.SUBWAY_PRE_TRANSFER;
      totalFare+=ORDINARY_FARE;
      if (SUBWAY_FREE_TRANSFER_STOPS.contains(ride.lastStop.getId())) {
        lexFreeTransfer=true;
      }
      if (CANARSIE.contains(ride.lastStop.getId())) {
        canarsieFreeTransfer=true;
      }
    }
 else     if (ride.classifier.equals(SIR)) {
      state=NycFareState.SIR_PRE_TRANSFER;
      if (SIR_PAID_STOPS.contains(firstStopId) || SIR_PAID_STOPS.contains(lastStopId)) {
        totalFare+=ORDINARY_FARE;
      }
    }
 else     if (ride.classifier.equals(LOCAL_BUS)) {
      state=NycFareState.BUS_PRE_TRANSFER;
      totalFare+=ORDINARY_FARE;
      if (CANARSIE.contains(ride.lastStop.getId())) {
        canarsieFreeTransfer=true;
      }
      siLocalBus=ride.route.getId().startsWith("S");
    }
 else     if (ride.classifier.equals(EXPRESS_BUS)) {
      state=NycFareState.BUS_PRE_TRANSFER;
      totalFare+=EXPRESS_FARE;
    }
 else     if (ride.classifier.equals(EXPENSIVE_EXPRESS_BUS)) {
      state=NycFareState.EXPENSIVE_EXPRESS_BUS;
      totalFare+=EXPENSIVE_EXPRESS_FARE;
    }
  break;
case SUBWAY_PRE_TRANSFER_WALKED:
if (ride.classifier.equals(SUBWAY)) {
  if (!(lexFreeTransfer && SUBWAY_FREE_TRANSFER_STOPS.contains(ride.firstStop.getId()))) {
    totalFare+=ORDINARY_FARE;
  }
  lexFreeTransfer=canarsieFreeTransfer=false;
  if (SUBWAY_FREE_TRANSFER_STOPS.contains(ride.lastStop.getId())) {
    lexFreeTransfer=true;
  }
  if (CANARSIE.contains(ride.lastStop.getId())) {
    canarsieFreeTransfer=true;
  }
}
case SUBWAY_PRE_TRANSFER:
if (ride.classifier.equals(WALK)) {
state=NycFareState.SUBWAY_PRE_TRANSFER_WALKED;
}
 else if (ride.classifier.equals(SIR)) {
state=NycFareState.SIR_POST_TRANSFER_FROM_SUBWAY;
}
 else if (ride.classifier.equals(LOCAL_BUS)) {
if (CANARSIE.contains(ride.firstStop.getId()) && canarsieFreeTransfer) {
  state=NycFareState.BUS_PRE_TRANSFER;
}
 else {
  state=NycFareState.INIT;
}
}
 else if (ride.classifier.equals(EXPRESS_BUS)) {
totalFare+=EXPRESS_FARE - ORDINARY_FARE;
}
 else if (ride.classifier.equals(EXPENSIVE_EXPRESS_BUS)) {
totalFare+=EXPENSIVE_EXPRESS_FARE;
}
break;
case BUS_PRE_TRANSFER:
if (ride.classifier.equals(SUBWAY)) {
if (CANARSIE.contains(ride.firstStop.getId()) && canarsieFreeTransfer) {
state=NycFareState.SUBWAY_PRE_TRANSFER;
}
 else {
state=NycFareState.INIT;
}
}
 else if (ride.classifier.equals(SIR)) {
if (siLocalBus) {
sirBonusTransfer=true;
state=NycFareState.SIR_PRE_TRANSFER;
}
 else {
state=NycFareState.INIT;
}
}
 else if (ride.classifier.equals(LOCAL_BUS)) {
state=NycFareState.INIT;
}
 else if (ride.classifier.equals(EXPRESS_BUS)) {
totalFare+=EXPRESS_FARE - ORDINARY_FARE;
state=NycFareState.INIT;
}
 else if (ride.classifier.equals(EXPENSIVE_EXPRESS_BUS)) {
totalFare+=EXPENSIVE_EXPRESS_FARE;
}
break;
case SIR_PRE_TRANSFER:
if (ride.classifier.equals(SUBWAY)) {
if (sirBonusTransfer && !SIR_BONUS_STOPS.contains(ride.firstStop.getId())) {
totalFare+=ORDINARY_FARE;
}
if (CANARSIE.contains(ride.lastStop.getId())) {
canarsieFreeTransfer=true;
}
state=NycFareState.SUBWAY_POST_TRANSFER;
}
 else if (ride.classifier.equals(SIR)) {
_log.warn("Should not transfer from SIR to SIR");
}
 else if (ride.classifier.equals(LOCAL_BUS)) {
if (!SIR_BONUS_ROUTES.contains(ride.route)) {
totalFare+=ORDINARY_FARE;
}
state=NycFareState.BUS_PRE_TRANSFER;
}
 else if (ride.classifier.equals(EXPRESS_BUS)) {
totalFare+=EXPRESS_BUS;
state=NycFareState.BUS_PRE_TRANSFER;
}
 else if (ride.classifier.equals(EXPENSIVE_EXPRESS_BUS)) {
totalFare+=EXPENSIVE_EXPRESS_BUS;
state=NycFareState.BUS_PRE_TRANSFER;
}
break;
case SIR_POST_TRANSFER_FROM_SUBWAY:
if (ride.classifier.equals(SUBWAY)) {
totalFare+=ORDINARY_FARE;
state=NycFareState.SUBWAY_PRE_TRANSFER;
}
 else if (ride.classifier.equals(SIR)) {
_log.warn("Should not transfer from SIR to SIR");
}
 else if (ride.classifier.equals(LOCAL_BUS)) {
if (!ride.route.getId().startsWith("S")) {
totalFare+=ORDINARY_FARE;
state=NycFareState.BUS_PRE_TRANSFER;
}
 else {
state=NycFareState.INIT;
}
}
 else if (ride.classifier.equals(EXPRESS_BUS)) {
totalFare+=EXPRESS_FARE;
state=NycFareState.INIT;
}
 else if (ride.classifier.equals(EXPENSIVE_EXPRESS_BUS)) {
totalFare+=EXPENSIVE_EXPRESS_FARE;
state=NycFareState.BUS_PRE_TRANSFER;
}
break;
case SUBWAY_POST_TRANSFER:
if (ride.classifier.equals(WALK)) {
if (!canarsieFreeTransfer) {
state=NycFareState.INIT;
}
}
 else if (ride.classifier.equals(SIR)) {
totalFare+=ORDINARY_FARE;
state=NycFareState.SIR_PRE_TRANSFER;
}
 else if (ride.classifier.equals(LOCAL_BUS)) {
if (!(CANARSIE.contains(ride.firstStop.getId()) && canarsieFreeTransfer)) {
totalFare+=ORDINARY_FARE;
}
state=NycFareState.INIT;
}
 else if (ride.classifier.equals(SUBWAY)) {
totalFare+=ORDINARY_FARE;
state=NycFareState.SUBWAY_PRE_TRANSFER;
}
 else if (ride.classifier.equals(EXPRESS_BUS)) {
totalFare+=EXPRESS_FARE;
state=NycFareState.BUS_PRE_TRANSFER;
}
 else if (ride.classifier.equals(EXPENSIVE_EXPRESS_BUS)) {
totalFare+=EXPENSIVE_EXPRESS_FARE;
state=NycFareState.BUS_PRE_TRANSFER;
}
}
}
Currency currency=Currency.getInstance("USD");
Fare fare=new Fare();
fare.addFare(FareType.regular,new WrappedCurrency(currency),(int)Math.round(totalFare * Math.pow(10,currency.getDefaultFractionDigits())));
return fare;
}
