{
  float lineWidth=(float)(1.0f + 5.0f / Math.sqrt(context.metersPerPixel));
  Collection<Vertex> vertices=context.graph.streetIndex.getVerticesForEnvelope(context.bbox);
  Collection<StreetEdge> edges=context.graph.streetIndex.getEdgesForEnvelope(context.bbox);
  ShapeWriter shapeWriter=new ShapeWriter(new IdentityPointTransformation(),new PointShapeFactory.Point());
  GeometryFactory geomFactory=new GeometryFactory();
  Stroke stroke=new BasicStroke(lineWidth * 1.4f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_BEVEL);
  Stroke halfStroke=new BasicStroke(lineWidth * 0.6f + 1.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_BEVEL);
  Stroke arrowStroke=new ShapeStroke(new Polygon(new int[]{0,0,30},new int[]{0,20,10},3),lineWidth / 2,5.0f * lineWidth,2.5f * lineWidth);
  BasicStroke finStroke=new BasicStroke(1.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_BEVEL);
  Font font=new Font(Font.SANS_SERIF,Font.PLAIN,Math.round(lineWidth));
  context.graphics.setFont(font);
  context.graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  context.graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  BufferParameters bufParams=new BufferParameters();
  bufParams.setSingleSided(true);
  bufParams.setJoinStyle(BufferParameters.JOIN_BEVEL);
  EdgeVisualAttributes evAttrs=new EdgeVisualAttributes();
  for (  Edge edge : edges) {
    evAttrs.color=null;
    evAttrs.label=null;
    Geometry edgeGeom=edge.getGeometry();
    if (edgeGeom == null)     continue;
    if (!context.bbox.intersects(edgeGeom.getEnvelopeInternal()))     continue;
    boolean render=evRenderer.renderEdge(edge,evAttrs);
    if (!render)     continue;
    Geometry midLineGeom=context.transform.transform(edgeGeom);
    OffsetCurveBuilder offsetBuilder=new OffsetCurveBuilder(new PrecisionModel(),bufParams);
    Coordinate[] coords=offsetBuilder.getOffsetCurve(midLineGeom.getCoordinates(),lineWidth * 0.4);
    LineString offsetLine=geomFactory.createLineString(coords);
    Shape midLineShape=shapeWriter.toShape(midLineGeom);
    Shape offsetShape=shapeWriter.toShape(offsetLine);
    context.graphics.setStroke(halfStroke);
    context.graphics.setColor(evAttrs.color);
    context.graphics.draw(offsetShape);
    if (lineWidth > 6.0f) {
      context.graphics.setColor(Color.WHITE);
      context.graphics.setStroke(arrowStroke);
      context.graphics.draw(offsetShape);
    }
    if (lineWidth > 4.0f) {
      context.graphics.setColor(Color.BLACK);
      context.graphics.setStroke(finStroke);
      context.graphics.draw(midLineShape);
    }
    if (evAttrs.label != null && lineWidth > 8.0f) {
      context.graphics.setColor(Color.BLACK);
      context.graphics.setStroke(new TextStroke("    " + evAttrs.label + "                              ",font,false,true));
      context.graphics.draw(offsetShape);
    }
  }
  VertexVisualAttributes vvAttrs=new VertexVisualAttributes();
  for (  Vertex vertex : vertices) {
    vvAttrs.color=null;
    vvAttrs.label=null;
    Point point=geomFactory.createPoint(new Coordinate(vertex.getLon(),vertex.getLat()));
    if (!context.bbox.contains(point.getCoordinate()))     continue;
    boolean render=evRenderer.renderVertex(vertex,vvAttrs);
    if (!render)     continue;
    Point tilePoint=(Point)context.transform.transform(point);
    Shape shape=shapeWriter.toShape(tilePoint);
    context.graphics.setColor(vvAttrs.color);
    context.graphics.setStroke(stroke);
    context.graphics.draw(shape);
    if (vvAttrs.label != null && context.metersPerPixel < 1.0) {
      context.graphics.setColor(Color.BLACK);
      context.graphics.drawString(vvAttrs.label,(float)tilePoint.getX(),(float)tilePoint.getY());
    }
  }
}
