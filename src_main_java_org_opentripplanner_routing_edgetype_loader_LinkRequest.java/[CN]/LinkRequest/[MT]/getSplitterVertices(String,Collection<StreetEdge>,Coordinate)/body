{
  if (edges.size() < 1) {
    return null;
  }
  HashSet<StreetEdge> edgeSet=new HashSet<StreetEdge>(edges);
  LinkedList<P2<StreetEdge>> replacement=linker.replacements.get(edgeSet);
  if (replacement == null) {
    replacement=new LinkedList<P2<StreetEdge>>();
    Iterator<StreetEdge> iter=edges.iterator();
    StreetEdge first=iter.next();
    StreetEdge second=null;
    while (iter.hasNext()) {
      StreetEdge edge=iter.next();
      if (edge.getFromVertex() == first.getToVertex() && edge.getToVertex() == first.getFromVertex()) {
        second=edge;
      }
    }
    StreetEdge secondClone;
    if (second == null) {
      secondClone=null;
    }
 else {
      secondClone=((StreetEdge)second).clone();
    }
    P2<StreetEdge> newEdges=new P2<StreetEdge>(((StreetEdge)first).clone(),secondClone);
    replacement.add(newEdges);
    linker.replacements.put(edgeSet,replacement);
  }
  double bestDist=Double.MAX_VALUE;
  P2<StreetEdge> bestPair=null;
  Point p=GeometryUtils.getGeometryFactory().createPoint(coordinate);
  for (  P2<StreetEdge> pair : replacement) {
    StreetEdge e1=pair.first;
    double dist=e1.getGeometry().distance(p);
    if (dist < bestDist) {
      bestDist=dist;
      bestPair=pair;
    }
  }
  return split(replacement,label,bestPair,coordinate);
}
