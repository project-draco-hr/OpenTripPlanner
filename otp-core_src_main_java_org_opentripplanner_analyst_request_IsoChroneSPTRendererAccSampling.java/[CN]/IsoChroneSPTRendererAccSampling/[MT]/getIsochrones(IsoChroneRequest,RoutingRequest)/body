{
  final double D0=sampleGridRenderer.getOffRoadDistanceMeters(isoChroneRequest.getPrecisionMeters());
  SampleGridRequest tgRequest=new SampleGridRequest();
  tgRequest.setMaxTimeSec(isoChroneRequest.getMaxTimeSec());
  tgRequest.setPrecisionMeters(isoChroneRequest.getPrecisionMeters());
  ZSampleGrid<WTWD> sampleGrid=sampleGridRenderer.getSampleGrid(tgRequest,sptRequest);
  long t0=System.currentTimeMillis();
  ZMetric<WTWD> zMetric=new ZMetric<WTWD>(){
    @Override public int cut(    WTWD zA,    WTWD zB,    WTWD z0){
      double t0=z0.tw / z0.w;
      double tA=zA.d > z0.d ? Double.POSITIVE_INFINITY : zA.tw / zA.w;
      double tB=zB.d > z0.d ? Double.POSITIVE_INFINITY : zB.tw / zB.w;
      if (tA < t0 && t0 <= tB)       return 1;
      if (tB < t0 && t0 <= tA)       return -1;
      return 0;
    }
    @Override public double interpolate(    WTWD zA,    WTWD zB,    WTWD z0){
      if (zA.d > z0.d || zB.d > z0.d) {
        if (zA.d > z0.d && zB.d > z0.d)         throw new AssertionError("dA > d0 && dB > d0");
        double k=zA.d == zB.d ? 0.5 : (z0.d - zA.d) / (zB.d - zA.d);
        return k;
      }
 else {
        double tA=zA.tw / zA.w;
        double tB=zB.tw / zB.w;
        double t0=z0.tw / z0.w;
        double k=tA == tB ? 0.5 : (t0 - tA) / (tB - tA);
        return k;
      }
    }
  }
;
  DelaunayIsolineBuilder<WTWD> isolineBuilder=new DelaunayIsolineBuilder<WTWD>(sampleGrid.delaunayTriangulate(),zMetric);
  isolineBuilder.setDebug(isoChroneRequest.isIncludeDebugGeometry());
  List<IsochroneData> isochrones=new ArrayList<IsochroneData>();
  for (  Integer cutoffSec : isoChroneRequest.getCutoffSecList()) {
    WTWD z0=new WTWD();
    z0.w=1.0;
    z0.tw=cutoffSec;
    z0.d=D0;
    IsochroneData isochrone=new IsochroneData(cutoffSec,isolineBuilder.computeIsoline(z0));
    if (isoChroneRequest.isIncludeDebugGeometry())     isochrone.setDebugGeometry(isolineBuilder.getDebugGeometry());
    isochrones.add(isochrone);
  }
  long t1=System.currentTimeMillis();
  LOG.info("Computed {} isochrones in {}msec",isochrones.size(),(int)(t1 - t0));
  return isochrones;
}
