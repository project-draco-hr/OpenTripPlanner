{
  HashSet<Vertex> remainingTargets=null;
  if (targets != null)   remainingTargets=(HashSet<Vertex>)targets.clone();
  while (!queue.empty()) {
    State su=queue.extract_min();
    if (!spt.visit(su))     continue;
    Vertex u=su.getVertex();
    if (nodeLimit-- <= 0)     break;
    if (remainingTargets != null) {
      remainingTargets.remove(u);
      if (remainingTargets.isEmpty())       break;
    }
    Iterable<Edge> outgoing=u.getOutgoing();
    for (    Edge edge : outgoing) {
      if (routeOn != null && !routeOn.contains(edge.getToVertex()))       continue;
      State sv=edge.traverse(su);
      if (sv != null && sv.getVertex() != taboo && spt.add(sv) && !sv.exceedsHopLimit(hopLimit) && !sv.exceedsWeightLimit(weightLimit))       queue.insert(sv,sv.getWeight());
    }
  }
  return spt;
}
