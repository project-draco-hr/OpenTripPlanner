{
  SPTVertex spt_u, spt_v;
  closed.add(taboo);
  while (!queue.empty()) {
    spt_u=queue.peek_min();
    if (spt_u.weightSum > weightLimit) {
      return spt;
    }
    Vertex fromv=spt_u.mirror;
    if (fromv == target)     break;
    queue.extract_min();
    closed.add(fromv);
    Iterable<Edge> outgoing=graph.getOutgoing(spt_u.mirror);
    for (    Edge edge : outgoing) {
      State state=spt_u.state;
      TraverseResult wr=edge.traverse(state,options);
      if (wr == null) {
        continue;
      }
      if (wr.weight < 0) {
        throw new NegativeWeightException(String.valueOf(wr.weight));
      }
      EdgeNarrative er=wr.getEdgeNarrative();
      Vertex toVertex=er.getToVertex();
      if (closed.contains(toVertex)) {
        continue;
      }
      double new_w=spt_u.weightSum + wr.weight;
      spt_v=spt.addVertex(toVertex,wr.state,new_w,options,spt_u.hops + 1);
      if (spt_v != null) {
        spt_v.setParent(spt_u,edge,er);
        if (spt_u.hops < hopLimit) {
          queue.insert_or_dec_key(spt_v,new_w);
        }
      }
    }
  }
  return spt;
}
