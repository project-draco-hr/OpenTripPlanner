{
  RoutingContext rctx=s0.getContext();
  RoutingRequest options=s0.getOptions();
  if (options.wheelchairAccessible && !getPattern().wheelchairAccessible(stopIndex)) {
    return null;
  }
  ;
  boolean leavingTransit=(boarding && options.isArriveBy()) || (!boarding && !options.isArriveBy());
  if (leavingTransit) {
    if (s0.getBackEdge() instanceof TransitBoardAlight) {
      return null;
    }
    StateEditor s1=s0.edit(this);
    s1.setTripId(null);
    s1.setLastAlightedTimeSeconds(s0.getTimeSeconds());
    s1.setPreviousStop(getStop());
    s1.setLastPattern(this.getPattern());
    if (arrivalTimeAtStop > 0) {
      int wait=(int)Math.abs(s0.getTimeSeconds() - arrivalTimeAtStop);
      s1.incrementTimeInSeconds(wait);
      s1.incrementWeight(wait * options.waitAtBeginningFactor);
      s1.setInitialWaitTimeSeconds(wait);
    }
    if (options.isReverseOptimizing())     s1.incrementWeight(options.getBoardCost(s0.getNonTransitMode()));
    if (options.isReverseOptimizeOnTheFly()) {
      int thisDeparture=s0.getTripTimes().getDepartureTime(stopIndex);
      int numTrips=getPattern().getNumScheduledTrips();
      int nextDeparture;
      s1.setLastNextArrivalDelta(Integer.MAX_VALUE);
      for (int tripIndex=0; tripIndex < numTrips; tripIndex++) {
        nextDeparture=getPattern().getDepartureTime(stopIndex,tripIndex);
        if (nextDeparture > thisDeparture) {
          s1.setLastNextArrivalDelta(nextDeparture - thisDeparture);
          break;
        }
      }
    }
    s1.setBackMode(getMode());
    return s1.makeState();
  }
 else {
    if (s0.getLastPattern() == this.getPattern()) {
      return null;
    }
    if (!options.getModes().get(modeMask)) {
      return null;
    }
    if (options.bannedRoutes != null && options.bannedRoutes.matches(getPattern().route)) {
      return null;
    }
    TableTripPattern tripPattern=this.getPattern();
    int bestWait=-1;
    TripTimes bestTripTimes=null;
    ServiceDay bestServiceDay=null;
    for (    ServiceDay sd : rctx.serviceDays) {
      Timetable timetable=tripPattern.scheduledTimetable;
      if (rctx.timetableSnapshot != null) {
        timetable=rctx.timetableSnapshot.resolve(tripPattern,sd.getServiceDate());
      }
      TripTimes tripTimes=timetable.getNextTrip(s0,sd,stopIndex,boarding);
      if (tripTimes != null) {
        int wait=boarding ? (int)(sd.time(tripTimes.getDepartureTime(stopIndex)) - s0.getTimeSeconds()) : (int)(s0.getTimeSeconds() - sd.time(tripTimes.getArrivalTime(stopIndex - 1)));
        if (wait < 0)         LOG.error("Negative wait time when boarding.");
        if (bestWait < 0 || wait < bestWait) {
          bestWait=wait;
          bestServiceDay=sd;
          bestTripTimes=tripTimes;
        }
      }
    }
    if (bestWait < 0)     return null;
    Trip trip=bestTripTimes.getTrip();
    if (options.tripIsBanned(trip))     return null;
    long preferences_penalty=options.preferencesPenaltyForRoute(getPattern().route);
    int transferPenalty=0;
    if (s0.isEverBoarded()) {
      TransferTable transferTable=options.getRoutingContext().transferTable;
      int transferTime=transferTable.getTransferTime(s0.getPreviousStop(),getStop(),s0.getPreviousTrip(),trip,boarding);
      transferPenalty=transferTable.determineTransferPenalty(transferTime,options.nonpreferredTransferPenalty);
    }
    StateEditor s1=s0.edit(this);
    s1.setBackMode(getMode());
    s1.setServiceDay(bestServiceDay);
    s1.setTripTimes(bestTripTimes);
    s1.incrementTimeInSeconds(bestWait);
    s1.incrementNumBoardings();
    s1.setTripId(trip.getId());
    s1.setPreviousTrip(trip);
    s1.setZone(getPattern().getZone(stopIndex));
    s1.setRoute(trip.getRoute().getId());
    double wait_cost=bestWait;
    if (!s0.isEverBoarded() && !options.isReverseOptimizing()) {
      wait_cost*=options.waitAtBeginningFactor;
      s1.setInitialWaitTimeSeconds(bestWait);
    }
 else {
      wait_cost*=options.waitReluctance;
    }
    s1.incrementWeight(preferences_penalty);
    s1.incrementWeight(transferPenalty);
    if (options.isReverseOptimizing()) {
      s1.incrementWeight(wait_cost);
    }
 else {
      s1.incrementWeight(wait_cost + options.getBoardCost(s0.getNonTransitMode()));
    }
    if (options.isReverseOptimizeOnTheFly() && !options.isReverseOptimizing() && s0.isEverBoarded()&& s0.getLastNextArrivalDelta() <= bestWait && s0.getLastNextArrivalDelta() > -1) {
      State optimized=s1.makeState().optimizeOrReverse(true,true);
      if (optimized == null)       LOG.error("Null optimized state. This shouldn't happen.");
      return optimized;
    }
    return s1.makeState();
  }
}
