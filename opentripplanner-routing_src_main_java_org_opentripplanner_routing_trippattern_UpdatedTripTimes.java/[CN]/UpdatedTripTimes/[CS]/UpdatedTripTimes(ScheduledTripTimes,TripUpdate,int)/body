{
  super(sched);
  this.offset=offset;
  int nUpdates=tripUpdate.getUpdates().size();
  this.arrivals=new int[nUpdates];
  this.departures=new int[nUpdates];
  int ui=0;
  for (  Update update : tripUpdate.getUpdates()) {
switch (update.status) {
case PASSED:
      arrivals[ui]=TripTimes.PASSED;
    departures[ui]=TripTimes.PASSED;
  break;
case CANCEL:
arrivals[ui]=TripTimes.CANCELED;
departures[ui]=TripTimes.CANCELED;
break;
case UNKNOWN:
case PLANNED:
arrivals[ui]=sched.getArrivalTime(offset + ui - 1);
departures[ui]=sched.getDepartureTime(offset + ui);
break;
case ARRIVED:
case PREDICTION:
arrivals[ui]=update.arrive;
departures[ui]=update.depart;
break;
}
ui+=1;
}
this.compact();
}
