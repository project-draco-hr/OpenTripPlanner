{
  try {
    FeatureSource<SimpleFeatureType,SimpleFeature> featureSource=_featureSourceFactory.getFeatureSource();
    CoordinateReferenceSystem sourceCRS=featureSource.getInfo().getCRS();
    Hints hints=new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,Boolean.TRUE);
    CRSAuthorityFactory factory=ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG",hints);
    CoordinateReferenceSystem worldCRS=factory.createCoordinateReferenceSystem("EPSG:4326");
    DefaultQuery query=new DefaultQuery();
    query.setCoordinateSystem(sourceCRS);
    query.setCoordinateSystemReproject(worldCRS);
    FeatureCollection<SimpleFeatureType,SimpleFeature> features=featureSource.getFeatures(query);
    HashMap<Coordinate,TreeSet<String>> coordinateToStreetNames=getCoordinatesToStreetNames(features);
    features=featureSource.getFeatures(query);
    HashMap<String,HashMap<Coordinate,Integer>> intersectionNameToId=new HashMap<String,HashMap<Coordinate,Integer>>();
    SimpleFeatureConverter<String> streetIdConverter=_schema.getIdConverter();
    SimpleFeatureConverter<String> streetNameConverter=_schema.getNameConverter();
    SimpleFeatureConverter<P2<StreetTraversalPermission>> permissionConverter=_schema.getPermissionConverter();
    HashMap<Coordinate,Intersection> intersectionsByLocation=new HashMap<Coordinate,Intersection>();
    SimpleFeatureConverter<P2<Double>> safetyConverter=_schema.getBicycleSafetyConverter();
    SimpleFeatureConverter<Boolean> slopeOverrideCoverter=_schema.getSlopeOverrideConverter();
    HashSet<Object> seen=new HashSet<Object>();
    List<SimpleFeature> featureList=new ArrayList<SimpleFeature>();
    Iterator<SimpleFeature> it2=features.iterator();
    while (it2.hasNext()) {
      featureList.add(it2.next());
    }
    features.close(it2);
    for (    SimpleFeature feature : featureList) {
      LineString geom=toLineString((Geometry)feature.getDefaultGeometry());
      Object o=streetIdConverter.convert(feature);
      String id="" + o;
      if (o != null && seen.contains(id)) {
        continue;
      }
      seen.add(id);
      String name=streetNameConverter.convert(feature);
      Coordinate[] coordinates=geom.getCoordinates();
      Coordinate startCoordinate=new Coordinate(Math.round(coordinates[0].x * 1048576) / 1048576.0,Math.round(coordinates[0].y * 1048576) / 1048576.0);
      Coordinate endCoordinate=new Coordinate(Math.round(coordinates[coordinates.length - 1].x * 1048576) / 1048576.0,Math.round(coordinates[coordinates.length - 1].y * 1048576) / 1048576.0);
      String startIntersectionName=getIntersectionName(coordinateToStreetNames,intersectionNameToId,startCoordinate);
      if (startIntersectionName == "null") {
        log.warn("No intersection name for " + name);
      }
      String endIntersectionName=getIntersectionName(coordinateToStreetNames,intersectionNameToId,endCoordinate);
      Intersection startIntersection=intersectionsByLocation.get(startCoordinate);
      if (startIntersection == null) {
        startIntersection=new Intersection(startIntersectionName,startCoordinate.x,startCoordinate.y);
        intersectionsByLocation.put(startCoordinate,startIntersection);
      }
      Intersection endIntersection=intersectionsByLocation.get(endCoordinate);
      if (endIntersection == null) {
        endIntersection=new Intersection(endIntersectionName,endCoordinate.x,endCoordinate.y);
        intersectionsByLocation.put(endCoordinate,endIntersection);
      }
      IntersectionVertex startCorner=new IntersectionVertex(startIntersection,geom,false);
      while (graph.addVertex(startCorner) != startCorner) {
        startCorner.angle=(startCorner.angle + 1) % 360;
      }
      IntersectionVertex endCorner=new IntersectionVertex(endIntersection,geom,true);
      while (graph.addVertex(endCorner) != endCorner) {
        endCorner.angle=(endCorner.angle + 1) % 360;
      }
      double length=JTS.orthodromicDistance(coordinates[0],coordinates[coordinates.length - 1],worldCRS);
      Street street=new Street(startCorner,endCorner,name,length);
      street.setGeometry(geom);
      startCorner.outStreet=street;
      endCorner.inStreet=street;
      Street backStreet=new Street(endCorner,startCorner,name,length);
      backStreet.setGeometry((LineString)geom.reverse());
      startCorner.inStreet=backStreet;
      endCorner.outStreet=backStreet;
      boolean slopeOverride=slopeOverrideCoverter.convert(feature);
      street.setSlopeOverride(slopeOverride);
      backStreet.setSlopeOverride(slopeOverride);
      P2<StreetTraversalPermission> pair=permissionConverter.convert(feature);
      street.setTraversalPermission(pair.getFirst());
      backStreet.setTraversalPermission(pair.getSecond());
      P2<Double> effectiveLength;
      if (safetyConverter != null) {
        effectiveLength=safetyConverter.convert(feature);
        if (effectiveLength != null) {
          street.setBicycleSafetyEffectiveLength(effectiveLength.getFirst() * length);
          backStreet.setBicycleSafetyEffectiveLength(effectiveLength.getSecond() * length);
        }
      }
    }
    StreetUtils.unify(graph,intersectionsByLocation.values());
    features.close(it2);
  }
 catch (  Exception ex) {
    throw new IllegalStateException("error loading shapefile street data",ex);
  }
}
