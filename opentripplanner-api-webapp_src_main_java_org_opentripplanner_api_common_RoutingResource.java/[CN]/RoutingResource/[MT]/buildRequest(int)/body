{
  RoutingRequest request=new RoutingRequest();
  request.setRouterId(get(routerId,n,""));
  request.setFrom(get(fromPlace,n,null));
  request.setTo(get(toPlace,n,null));
{
    String d=get(date,n,null);
    String t=get(time,n,null);
    TimeZone tz=graphService.getGraph(request.routerId).getTimeZone();
    if (d == null && t != null) {
      LOG.debug("parsing ISO datetime {}",t);
      try {
        request.setDateTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar(t).toGregorianCalendar().getTime());
      }
 catch (      DatatypeConfigurationException e) {
        request.setDateTime(d,t,tz);
      }
    }
 else {
      request.setDateTime(d,t,tz);
    }
  }
  request.setWheelchair(get(wheelchair,n,false));
  request.setNumItineraries(get(numItineraries,n,3));
  request.setMaxWalkDistance(get(maxWalkDistance,n,840.0));
  request.setWalkSpeed(get(walkSpeed,n,1.33));
  OptimizeType opt=get(optimize,n,OptimizeType.QUICK);
{
    Double tsafe=get(triangleSafetyFactor,n,null);
    Double tslope=get(triangleSlopeFactor,n,null);
    Double ttime=get(triangleTimeFactor,n,null);
    if (tsafe != null || tslope != null || ttime != null) {
      if (tsafe == null || tslope == null || ttime == null) {
        throw new ParameterException(Message.UNDERSPECIFIED_TRIANGLE);
      }
      if (opt == null) {
        opt=OptimizeType.TRIANGLE;
      }
 else       if (opt != OptimizeType.TRIANGLE) {
        throw new ParameterException(Message.TRIANGLE_OPTIMIZE_TYPE_NOT_SET);
      }
      if (Math.abs(tsafe + tslope + ttime - 1) > Math.ulp(1) * 3) {
        throw new ParameterException(Message.TRIANGLE_NOT_AFFINE);
      }
      request.setTriangleSafetyFactor(tsafe);
      request.setTriangleSlopeFactor(tslope);
      request.setTriangleTimeFactor(ttime);
    }
 else     if (opt == OptimizeType.TRIANGLE) {
      throw new ParameterException(Message.TRIANGLE_VALUES_NOT_SET);
    }
  }
  request.setArriveBy(get(arriveBy,n,false));
  request.setShowIntermediateStops(get(showIntermediateStops,n,false));
  if (intermediatePlaces != null && intermediatePlaces.size() > 0 && !intermediatePlaces.get(0).equals("")) {
    request.setIntermediatePlaces(intermediatePlaces);
  }
  if (intermediatePlacesOrdered == null)   intermediatePlacesOrdered=true;
  request.setIntermediatePlacesOrdered(intermediatePlacesOrdered);
  request.setPreferredRoutes(get(preferredRoutes,n,""));
  request.setUnpreferredRoutes(get(unpreferredRoutes,n,""));
  request.setBannedRoutes(get(bannedRoutes,n,""));
  if (opt == OptimizeType.TRANSFERS) {
    opt=OptimizeType.QUICK;
    request.setTransferPenalty(get(transferPenalty,n,0) + 1800);
  }
 else {
    request.setTransferPenalty(get(transferPenalty,n,0));
  }
  request.setBatch(get(batch,n,new Boolean(false)));
  request.setOptimize(opt);
  TraverseModeSet modeSet=get(modes,n,new TraverseModeSet("WALK,TRANSIT"));
  request.setModes(modeSet);
  if (modeSet.getBicycle() && modeSet.getWalk()) {
    request.setBikeSpeed(3.5);
  }
  request.setMinTransferTime(get(minTransferTime,n,0));
  request.setMaxTransfers(get(maxTransfers,n,2));
  final long NOW_THRESHOLD_MILLIS=15 * 60 * 60* 1000;
  boolean tripPlannedForNow=Math.abs(request.getDateTime().getTime() - new Date().getTime()) < NOW_THRESHOLD_MILLIS;
  request.setUseBikeRentalAvailabilityInformation(tripPlannedForNow);
  if (request.getIntermediatePlaces() != null && (request.getModes().isTransit() || (request.getModes().getWalk() && request.getModes().getBicycle())))   throw new UnsupportedOperationException("TSP is not supported for transit or bike share trips");
  String startTransitStopId=get(this.startTransitStopId,n,null);
  if (startTransitStopId != null && !"".equals(startTransitStopId)) {
    request.setStartTransitStopId(AgencyAndId.convertFromString(startTransitStopId));
  }
  return request;
}
