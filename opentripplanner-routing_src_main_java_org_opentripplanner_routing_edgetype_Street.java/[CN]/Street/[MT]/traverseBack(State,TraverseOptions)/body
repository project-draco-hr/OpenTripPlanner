{
  if (!canTraverse(wo)) {
    return null;
  }
  State s1=s0.clone();
  double time=length / wo.speed;
  double weight;
  if (wo.modes.contains(TraverseMode.BICYCLE) && wo.optimizeFor.equals(OptimizeType.SAFE)) {
    if (bicycleSafetyEffectiveLength < length * 0.99) {
      System.out.println("a shorter path on : " + getName() + ": "+ bicycleSafetyEffectiveLength+ " / "+ length);
    }
    weight=bicycleSafetyEffectiveLength / wo.speed;
  }
 else {
    weight=time;
  }
  if (s0.walkDistance > wo.maxWalkDistance && wo.modes.getTransit()) {
    weight*=100;
  }
  s1.walkDistance+=this.length;
  s1.incrementTimeInSeconds(-(int)time);
  return new TraverseResult(weight,s1);
}
