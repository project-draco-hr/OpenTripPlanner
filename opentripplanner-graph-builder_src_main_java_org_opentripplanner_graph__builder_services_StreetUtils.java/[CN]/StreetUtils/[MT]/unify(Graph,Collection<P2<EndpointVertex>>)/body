{
  for (  P2<EndpointVertex> corner : endpoints) {
    GraphVertex vIn=graph.getGraphVertex(corner.getFirst());
    GraphVertex vOut=graph.getGraphVertex(corner.getSecond());
    if (vOut.getDegreeOut() == 2 && vIn.getDegreeIn() == 2) {
      Collection<Edge> edges=vOut.getOutgoing();
      Iterator<Edge> it=edges.iterator();
      Edge out1=it.next();
      Edge out2=it.next();
      edges=vIn.getIncoming();
      it=edges.iterator();
      Edge in1=it.next();
      Edge in2=it.next();
      if (out1.getName() == out2.getName() && out1.getName() != null) {
        GenericVertex tov1=(GenericVertex)out1.getToVertex();
        GenericVertex tov2=(GenericVertex)out2.getToVertex();
        graph.removeVertex(vOut.vertex);
        graph.removeVertex(vIn.vertex);
        for (        Edge e : vIn.getIncoming()) {
          graph.getGraphVertex(e.getFromVertex()).removeOutgoing(e);
        }
        graph.getGraphVertex(tov1).removeIncoming(out1);
        graph.getGraphVertex(tov2).removeIncoming(out2);
        GenericVertex fromv1=(GenericVertex)in1.getFromVertex();
        GenericVertex fromv2=(GenericVertex)in2.getFromVertex();
        if (fromv1.getCoordinate().equals(tov1.getCoordinate())) {
          GenericVertex tmp=fromv1;
          fromv1=fromv2;
          fromv2=tmp;
        }
        tov1.mergeFrom(graph,fromv1);
        tov2.mergeFrom(graph,fromv2);
      }
    }
  }
}
