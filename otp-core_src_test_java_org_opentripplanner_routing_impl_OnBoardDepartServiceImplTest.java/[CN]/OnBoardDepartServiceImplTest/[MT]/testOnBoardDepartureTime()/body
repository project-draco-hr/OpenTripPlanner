{
  Coordinate[] coordinates=new Coordinate[5];
  coordinates[0]=new Coordinate(0.0,0.0);
  coordinates[1]=new Coordinate(0.0,1.0);
  coordinates[2]=new Coordinate(2.0,1.0);
  coordinates[3]=new Coordinate(5.0,1.0);
  coordinates[4]=new Coordinate(5.0,5.0);
  PatternArriveVertex arrive=mock(PatternArriveVertex.class);
  PatternHop patternHop=mock(PatternHop.class);
  TripTimes tripTimes=mock(TripTimes.class);
  TableTripPattern tableTripPattern=mock(TableTripPattern.class);
  TransitIndexService transitIndexService=mock(TransitIndexService.class);
  Graph graph=mock(Graph.class);
  RoutingRequest routingRequest=mock(RoutingRequest.class);
  ServiceDay serviceDay=mock(ServiceDay.class);
  when(graph.getTimeZone()).thenReturn(TimeZone.getTimeZone("Greenwhich"));
  GeometryFactory geometryFactory=GeometryUtils.getGeometryFactory();
  CoordinateSequenceFactory coordinateSequenceFactory=geometryFactory.getCoordinateSequenceFactory();
  CoordinateSequence coordinateSequence=coordinateSequenceFactory.create(coordinates);
  LineString geometry=new LineString(coordinateSequence,geometryFactory);
  RoutingContext routingContext=new RoutingContext(routingRequest,graph,null,arrive);
  routingContext.serviceDays=new ArrayList<ServiceDay>(Collections.singletonList(serviceDay));
  when(graph.getService(TransitIndexService.class)).thenReturn(transitIndexService);
  when(transitIndexService.getTripPatternForTrip(any(AgencyAndId.class))).thenReturn(tableTripPattern);
  when(tableTripPattern.getPatternHops()).thenReturn(Collections.singletonList(patternHop));
  when(routingRequest.getFrom()).thenReturn(new GenericLocation());
  when(tableTripPattern.getTripTimes(anyInt())).thenReturn(tripTimes);
  when(tripTimes.getDepartureTime(anyInt())).thenReturn(0);
  when(tripTimes.getArrivalTime(anyInt())).thenReturn(20);
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(9);
  when(patternHop.getToVertex()).thenReturn(arrive);
  when(patternHop.getGeometry()).thenReturn(geometry);
  when(tripTimes.getHeadsign(anyInt())).thenReturn("The right");
  coordinates=new Coordinate[3];
  coordinates[0]=new Coordinate(3.5,1.0);
  coordinates[1]=new Coordinate(5.0,1.0);
  coordinates[2]=new Coordinate(5.0,5.0);
  coordinateSequence=coordinateSequenceFactory.create(coordinates);
  geometry=new LineString(coordinateSequence,geometryFactory);
  Vertex vertex=onBoardDepartServiceImpl.setupDepartOnBoard(routingContext);
  Edge edge=vertex.getOutgoing().toArray(new Edge[1])[0];
  assertEquals(vertex,edge.getFromVertex());
  assertEquals(arrive,edge.getToVertex());
  assertEquals("The right",edge.getDirection());
  assertEquals(geometry,edge.getGeometry());
  assertEquals(coordinates[0].x,vertex.getX(),0.0);
  assertEquals(coordinates[0].y,vertex.getY(),0.0);
}
