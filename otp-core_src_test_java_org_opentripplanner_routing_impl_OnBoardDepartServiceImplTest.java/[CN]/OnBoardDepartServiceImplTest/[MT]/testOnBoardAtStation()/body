{
  Stop stop0=new Stop();
  Stop stop1=new Stop();
  Stop stop2=new Stop();
  stop0.setId(new AgencyAndId("Station","0"));
  stop1.setId(new AgencyAndId("Station","1"));
  stop2.setId(new AgencyAndId("Station","2"));
  TransitStop station0=mock(TransitStop.class);
  TransitStop station1=mock(TransitStop.class);
  TransitStop station2=mock(TransitStop.class);
  PatternArriveVertex arrive=mock(PatternArriveVertex.class);
  PatternHop patternHop0=mock(PatternHop.class);
  PatternHop patternHop1=mock(PatternHop.class);
  TripTimes tripTimes=mock(TripTimes.class);
  TableTripPattern tableTripPattern=mock(TableTripPattern.class);
  TransitIndexService transitIndexService=mock(TransitIndexService.class);
  Graph graph=mock(Graph.class);
  RoutingRequest routingRequest=mock(RoutingRequest.class);
  ServiceDay serviceDay=mock(ServiceDay.class);
  ArrayList<PatternHop> hops=new ArrayList<PatternHop>(2);
  RoutingContext routingContext=new RoutingContext(routingRequest,graph,null,arrive);
  hops.add(patternHop0);
  hops.add(patternHop1);
  routingContext.serviceDays=new ArrayList<ServiceDay>(Collections.singletonList(serviceDay));
  when(graph.getService(TransitIndexService.class)).thenReturn(transitIndexService);
  when(transitIndexService.getTripPatternForTrip(any(AgencyAndId.class))).thenReturn(tableTripPattern);
  when(tableTripPattern.getPatternHops()).thenReturn(hops);
  when(routingRequest.getFrom()).thenReturn(new GenericLocation());
  when(tableTripPattern.getTripTimes(anyInt())).thenReturn(tripTimes);
  when(tripTimes.getDepartureTime(0)).thenReturn(0);
  when(tripTimes.getArrivalTime(0)).thenReturn(20);
  when(tripTimes.getDepartureTime(1)).thenReturn(40);
  when(tripTimes.getArrivalTime(1)).thenReturn(60);
  when(patternHop0.getBeginStop()).thenReturn(stop0);
  when(patternHop0.getStopIndex()).thenReturn(0);
  when(patternHop0.getEndStop()).thenReturn(stop1);
  when(patternHop1.getBeginStop()).thenReturn(stop1);
  when(patternHop1.getStopIndex()).thenReturn(1);
  when(patternHop1.getEndStop()).thenReturn(stop2);
  when(graph.getVertex("Station_0")).thenReturn(station0);
  when(graph.getVertex("Station_1")).thenReturn(station1);
  when(graph.getVertex("Station_2")).thenReturn(station2);
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(0);
  assertEquals(station0,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(20);
  assertEquals(station1,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(30);
  assertEquals(station1,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(40);
  assertEquals(station1,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(60);
  assertEquals(station2,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
}
