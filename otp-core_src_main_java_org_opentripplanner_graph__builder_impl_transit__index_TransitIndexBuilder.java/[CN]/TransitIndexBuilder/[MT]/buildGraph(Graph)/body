{
  LOG.debug("Building transit index");
  connectParentStations(stopsByStation);
  createRouteVariants(graph);
  indexTableTripPatternByTrip(graph);
  int totalVariants=0;
  int totalTrips=0;
  for (  List<RouteVariant> variants : variantsByRoute.values()) {
    totalVariants+=variants.size();
    for (    RouteVariant variant : variants) {
      variant.cleanup();
      totalTrips+=variant.getTrips().size();
    }
  }
  for (  Stop stop : dao.getAllStops()) {
    stops.put(stop.getId(),stop);
  }
  for (  Route route : dao.getAllRoutes()) {
    routes.put(route.getId(),route);
  }
  LOG.debug("Built transit index: " + stopsByStation.size() + " stations, "+ variantsByAgency.size()+ " agencies, "+ variantsByRoute.size()+ " routes, "+ totalTrips+ " trips, "+ totalVariants+ " variants ");
  TransitIndexServiceImpl service=(TransitIndexServiceImpl)graph.getService(TransitIndexService.class);
  if (service == null) {
    service=new TransitIndexServiceImpl(stopsByStation,variantsByAgency,variantsByRoute,variantsByTrip,preBoardEdges,preAlightEdges,tableTripPatternsByTrip,directionsByRoute,stopsByRoute,routes,stops,modes);
  }
 else {
    service.merge(stopsByStation,variantsByAgency,variantsByRoute,variantsByTrip,preBoardEdges,preAlightEdges,tableTripPatternsByTrip,directionsByRoute,stopsByRoute,routes,stops,modes);
  }
  insertCalendarData(service);
  addAgencies(service);
  Coordinate coord=findTransitCenter();
  service.setCenter(coord);
  service.setOvernightBreak(findOvernightBreak());
  graph.putService(TransitIndexService.class,service);
}
