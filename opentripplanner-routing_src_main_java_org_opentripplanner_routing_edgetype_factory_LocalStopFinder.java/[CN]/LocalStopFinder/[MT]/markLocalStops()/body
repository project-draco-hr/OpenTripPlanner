{
  _log.debug("Finding local stops");
  patterns=new HashSet<TripPattern>();
  transitStops=new HashMap<AgencyAndId,TransitStop>();
  int total=0;
  for (  Vertex gv : graph.getVertices()) {
    if (gv instanceof TransitStop) {
      TransitStop ts=(TransitStop)gv;
      ts.setLocal(true);
      transitStops.put(ts.getStopId(),ts);
      total++;
    }
    for (    Edge e : gv.getOutgoing()) {
      if (e instanceof TransitBoardAlight && ((TransitBoardAlight)e).isBoarding()) {
        TableTripPattern pattern=((TransitBoardAlight)e).getPattern();
        patterns.add(pattern);
      }
      if (e instanceof FrequencyBoard) {
        TripPattern pattern=((FrequencyBoard)e).getPattern();
        patterns.add(pattern);
      }
    }
  }
  neighborhoods=new HashMap<Stop,HashMap<TableTripPattern,P2<Double>>>();
  walkingOptions=new RoutingRequest(new TraverseModeSet(TraverseMode.WALK));
  bikingOptions=new RoutingRequest(new TraverseModeSet(TraverseMode.BICYCLE));
  bikingOptions.optimize=OptimizeType.SAFE;
  int nonLocal=0;
  for (  TripPattern pattern : patterns) {
    List<Stop> stops=getStops(pattern);
    HashMap<TableTripPattern,P2<Double>> previousDistances=null;
    HashMap<TableTripPattern,P2<Double>> distances=null;
    for (int i=0; i < stops.size() - 1; ++i) {
      Stop stop=stops.get(i);
      TransitStop transitStop=getVertexForStop(stop);
      previousDistances=distances;
      distances=getNeighborhood(stop);
      HashMap<TableTripPattern,P2<Double>> nextDistances=null;
      Stop nextStop=stops.get(i + 1);
      nextDistances=getNeighborhood(nextStop);
      if (previousDistances == null) {
        if (transitStop.isLocal()) {
          nonLocal++;
        }
        transitStop.setLocal(false);
        continue;
      }
 else {
        boolean local=true;
        for (        Entry<TableTripPattern,P2<Double>> entry : distances.entrySet()) {
          TableTripPattern key=entry.getKey();
          if (key == pattern) {
            continue;
          }
          P2<Double> distance=entry.getValue();
          P2<Double> previousDistance=previousDistances.get(key);
          P2<Double> nextDistance=nextDistances.get(key);
          if (previousDistance == null) {
            if (nextDistance == null || nextDistance.getFirst() > distance.getFirst() || nextDistance.getSecond() > distance.getSecond()) {
              local=false;
              break;
            }
          }
 else           if (distance.getFirst() + MAX_SUBOPTIMAL_DISTANCE < previousDistance.getFirst() && (nextDistance == null || nextDistance.getFirst() > distance.getFirst())) {
            local=false;
            break;
          }
 else           if (distance.getSecond() + MAX_SUBOPTIMAL_DISTANCE < previousDistance.getSecond() && (nextDistance == null || nextDistance.getSecond() > distance.getSecond())) {
            local=false;
            break;
          }
        }
        if (local == false) {
          if (transitStop.isLocal()) {
            nonLocal++;
          }
          transitStop.setLocal(false);
        }
      }
    }
    Stop stop=stops.get(stops.size() - 1);
    TransitStop transitStop=getVertexForStop(stop);
    if (transitStop.isLocal()) {
      nonLocal++;
    }
    transitStop.setLocal(false);
  }
  _log.debug("Local stops: " + (total - nonLocal) + " / "+ total);
}
