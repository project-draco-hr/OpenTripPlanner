{
  long wayIndex=0;
  long wayCount=osmdb.getWays().size();
  WAY:   for (  OSMWay way : osmdb.getWays()) {
    if (wayIndex % 10000 == 0)     LOG.debug("ways=" + wayIndex + "/"+ wayCount);
    wayIndex++;
    WayProperties wayData=wayPropertySet.getDataForWay(way);
    setWayName(way);
    StreetTraversalPermission permissions=OSMFilter.getPermissionsForWay(way,wayData.getPermission(),graph);
    if (!OSMFilter.isWayRoutable(way) || permissions.allowsNothing())     continue;
    ArrayList<Long> nodes=new ArrayList<Long>(way.getNodeRefs().size());
    long last=-1;
    double lastLat=-1, lastLon=-1;
    String lastLevel=null;
    for (    long nodeId : way.getNodeRefs()) {
      OSMNode node=osmdb.getNode(nodeId);
      if (node == null)       continue WAY;
      boolean levelsDiffer=false;
      String level=node.getTag("level");
      if (lastLevel == null) {
        if (level != null) {
          levelsDiffer=true;
        }
      }
 else {
        if (!lastLevel.equals(level)) {
          levelsDiffer=true;
        }
      }
      if (nodeId != last && (node.lat != lastLat || node.lon != lastLon || levelsDiffer))       nodes.add(nodeId);
      last=nodeId;
      lastLon=node.lon;
      lastLat=node.lat;
      lastLevel=level;
    }
    IntersectionVertex startEndpoint=null, endEndpoint=null;
    ArrayList<Coordinate> segmentCoordinates=new ArrayList<Coordinate>();
    Long startNode=null;
    OSMNode osmStartNode=null;
    for (int i=0; i < nodes.size() - 1; i++) {
      OSMNode segmentStartOSMNode=osmdb.getNode(nodes.get(i));
      if (segmentStartOSMNode == null) {
        continue;
      }
      Long endNode=nodes.get(i + 1);
      if (osmStartNode == null) {
        startNode=nodes.get(i);
        osmStartNode=segmentStartOSMNode;
      }
      OSMNode osmEndNode=osmdb.getNode(endNode);
      if (osmStartNode == null || osmEndNode == null)       continue;
      LineString geometry;
      if (segmentCoordinates.size() == 0) {
        segmentCoordinates.add(getCoordinate(osmStartNode));
      }
      if (intersectionNodes.containsKey(endNode) || i == nodes.size() - 2 || nodes.subList(0,i).contains(nodes.get(i)) || osmEndNode.hasTag("ele") || osmEndNode.isStop() || osmEndNode.isBollard()) {
        segmentCoordinates.add(getCoordinate(osmEndNode));
        geometry=GeometryUtils.getGeometryFactory().createLineString(segmentCoordinates.toArray(new Coordinate[0]));
        segmentCoordinates.clear();
      }
 else {
        segmentCoordinates.add(getCoordinate(osmEndNode));
        continue;
      }
      if (startEndpoint == null) {
        startEndpoint=getVertexForOsmNode(osmStartNode,way);
        String ele=segmentStartOSMNode.getTag("ele");
        if (ele != null) {
          Double elevation=ElevationUtils.parseEleTag(ele);
          if (elevation != null) {
            elevationData.put(startEndpoint,elevation);
          }
        }
      }
 else {
        startEndpoint=endEndpoint;
      }
      endEndpoint=getVertexForOsmNode(osmEndNode,way);
      String ele=osmEndNode.getTag("ele");
      if (ele != null) {
        Double elevation=ElevationUtils.parseEleTag(ele);
        if (elevation != null) {
          elevationData.put(endEndpoint,elevation);
        }
      }
      P2<StreetEdge> streets=getEdgesForStreet(startEndpoint,endEndpoint,way,i,osmStartNode.getId(),osmEndNode.getId(),permissions,geometry);
      StreetEdge street=streets.first;
      StreetEdge backStreet=streets.second;
      applyWayProperties(street,backStreet,wayData,way);
      applyEdgesToTurnRestrictions(way,startNode,endNode,street,backStreet);
      startNode=endNode;
      osmStartNode=osmdb.getNode(startNode);
    }
  }
}
