{
  TObjectIntMap<String> indexForStopId=new TObjectIntHashMap<>();
  for (  Stop stop : gtfs.stops.values()) {
    int stopIndex=stopIdForIndex.size();
    indexForStopId.put(stop.stop_id,stopIndex);
    stopIdForIndex.add(stop.stop_id);
    if (streetLayer != null) {
      int streetVertexIndex=streetLayer.linkTransitStop(stop.stop_lat,stop.stop_lon,300);
      streetVertexForStop.add(streetVertexIndex);
    }
  }
  LOG.info("Grouping trips by stop pattern and creating trip schedules.");
  Map<TripPatternKey,TripPattern> tripPatternForStopSequence=new HashMap<>();
  int nTripsAdded=0;
  for (  String tripId : gtfs.trips.keySet()) {
    Trip trip=gtfs.trips.get(tripId);
    TripPatternKey tripPatternKey=new TripPatternKey(trip.route.route_id);
    TIntList arrivals=new TIntArrayList(TYPICAL_NUMBER_OF_STOPS_PER_TRIP);
    TIntList departures=new TIntArrayList(TYPICAL_NUMBER_OF_STOPS_PER_TRIP);
    for (    StopTime st : gtfs.getOrderedStopTimesForTrip(tripId)) {
      int stopIndex=indexForStopId.get(st.stop_id);
      tripPatternKey.addStopTime(st,indexForStopId);
      arrivals.add(st.arrival_time);
      departures.add(st.departure_time);
    }
    TripPattern tripPattern=tripPatternForStopSequence.get(tripPatternKey);
    if (tripPattern == null) {
      tripPattern=new TripPattern(tripPatternKey);
      tripPatternForStopSequence.put(tripPatternKey,tripPattern);
      tripPatterns.add(tripPattern);
    }
    tripPattern.setOrVerifyDirection(trip.direction_id);
    tripPattern.addTrip(new TripSchedule(trip,arrivals.toArray(),departures.toArray()));
    nTripsAdded+=1;
  }
  LOG.info("Done creating {} trips on {} patterns.",nTripsAdded,tripPatternForStopSequence.size());
}
