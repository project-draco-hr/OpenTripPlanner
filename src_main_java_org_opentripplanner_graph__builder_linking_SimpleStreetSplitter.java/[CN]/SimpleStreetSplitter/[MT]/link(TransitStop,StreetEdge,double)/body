{
  LineString orig=edge.getGeometry();
  LineString transformed=equirectangularProject(orig,xscale);
  LocationIndexedLine il=new LocationIndexedLine(transformed);
  LinearLocation ll=il.project(new Coordinate(tstop.getLon() * xscale,tstop.getLat()));
  if (ll.getSegmentIndex() == 0 && ll.getSegmentFraction() < 0.05) {
    makeLinkEdges(tstop,(StreetVertex)edge.getFromVertex());
  }
 else   if (ll.getSegmentIndex() == orig.getNumPoints() - 1) {
    makeLinkEdges(tstop,(StreetVertex)edge.getToVertex());
  }
 else   if (ll.getSegmentIndex() == orig.getNumPoints() - 2 && ll.getSegmentFraction() > 0.95) {
    makeLinkEdges(tstop,(StreetVertex)edge.getToVertex());
  }
 else {
    SplitterVertex v0=split(edge,ll);
    Vertex fromv=edge.getFromVertex();
    if (fromv instanceof SplitterVertex)     fromv=((SplitterVertex)fromv).opposite;
    Vertex tov=edge.getToVertex();
    if (tov instanceof SplitterVertex)     tov=((SplitterVertex)tov).opposite;
    StreetEdge back=null;
    if (fromv != null && tov != null) {
      for (      StreetEdge other : Iterables.filter(tov.getOutgoing(),StreetEdge.class)) {
        if (other.getToVertex() == fromv) {
          back=other;
          break;
        }
      }
    }
    if (back != null) {
      orig=back.getGeometry();
      transformed=equirectangularProject(orig,xscale);
      il=new LocationIndexedLine(transformed);
      ll=il.project(new Coordinate(tstop.getLon() * xscale,tstop.getLat()));
      SplitterVertex v1=split(back,ll);
      v1.opposite=v0;
      v0.opposite=v1;
    }
    makeLinkEdges(tstop,v0);
  }
}
