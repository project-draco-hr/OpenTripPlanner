{
  ContractionHierarchySet hierarchies=_graphService.getContractionHierarchySet();
  ContractionHierarchy hierarchy=null;
  hierarchy=hierarchies.getHierarchy(options);
  if (hierarchy == null || (options.remainingWeightHeuristic instanceof TableRemainingWeightHeuristic && options.getModes().getTransit())) {
    Graph _graph=hierarchies.getGraph();
    if (options.isArriveBy()) {
      ShortestPathTree spt=AStar.getShortestPathTreeBack(_graph,fromVertex,toVertex,state,options);
      if (spt == null) {
        return null;
      }
      List<GraphPath> paths=spt.getPaths(fromVertex,true);
      for (      GraphPath path : paths)       path.reverse();
      return paths;
    }
 else {
      ShortestPathTree spt=AStar.getShortestPathTree(_graph,fromVertex,toVertex,state,options);
      if (spt == null) {
        return null;
      }
      return spt.getPaths(toVertex,true);
    }
  }
  GraphPath path=hierarchy.getShortestPath(fromVertex,toVertex,state,options);
  if (path == null)   return Collections.emptyList();
  return Arrays.asList(path);
}
