{
  Map<Vertex,HashMap<Vertex,GraphPath>> paths=new HashMap<Vertex,HashMap<Vertex,GraphPath>>();
  HashMap<Vertex,GraphPath> firstLegPaths=new HashMap<Vertex,GraphPath>();
  paths.put(fromVertex,firstLegPaths);
  for (  Vertex v : intermediates) {
    List<GraphPath> firstPaths=route(fromVertex,v,state,options);
    if (!firstPaths.isEmpty()) {
      firstLegPaths.put(v,firstPaths.get(0));
    }
    HashMap<Vertex,GraphPath> outPaths=new HashMap<Vertex,GraphPath>();
    paths.put(v,outPaths);
    for (    Vertex tv : intermediates) {
      if (v == tv)       continue;
      List<GraphPath> morePaths=route(v,tv,state,options);
      if (!morePaths.isEmpty()) {
        outPaths.put(tv,morePaths.get(0));
      }
    }
    List<GraphPath> lastPaths=route(v,toVertex,state,options);
    if (!lastPaths.isEmpty())     outPaths.put(toVertex,lastPaths.get(0));
  }
  HashSet<Vertex> vertices=new HashSet<Vertex>();
  vertices.addAll(intermediates);
  GraphPath shortestPath=TSPPathFinder.findShortestPath(toVertex,fromVertex,paths,vertices,state,options);
  return shortestPath;
}
