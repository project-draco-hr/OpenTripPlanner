{
  Map<Vertex,HashMap<Vertex,GraphPath>> paths=new HashMap<Vertex,HashMap<Vertex,GraphPath>>();
  HashMap<Vertex,GraphPath> firstLegPaths=new HashMap<Vertex,GraphPath>();
  paths.put(fromVertex,firstLegPaths);
  for (  Vertex v : intermediates) {
    HashMap<Vertex,GraphPath> outPaths=new HashMap<Vertex,GraphPath>();
    paths.put(v,outPaths);
    GraphPath path=route(fromVertex,v,state,options);
    firstLegPaths.put(v,path);
    for (    Vertex tv : intermediates) {
      path=route(v,tv,state,options);
      outPaths.put(tv,path);
    }
    path=route(v,toVertex,state,options);
    outPaths.put(toVertex,path);
  }
  HashSet<Vertex> vertices=new HashSet<Vertex>();
  vertices.addAll(intermediates);
  GraphPath shortestPath=TSPPathFinder.findShortestPath(toVertex,fromVertex,paths,vertices,state,options);
  return shortestPath;
}
