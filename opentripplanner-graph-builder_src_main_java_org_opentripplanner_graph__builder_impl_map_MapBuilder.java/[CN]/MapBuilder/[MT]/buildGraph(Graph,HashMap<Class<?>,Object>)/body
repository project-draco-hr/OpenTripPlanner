{
  TransitIndexService transit=graph.getService(TransitIndexService.class);
  StreetMatcher matcher=new StreetMatcher(graph);
  EdgesForRoute edgesForRoute=new EdgesForRoute();
  extra.put(EdgesForRoute.class,edgesForRoute);
  for (  AgencyAndId route : transit.getAllRouteIds()) {
    for (    RouteVariant variant : transit.getVariantsForRoute(route)) {
      Geometry geometry=variant.getGeometry();
      if (variant.getTraverseMode() == TraverseMode.BUS) {
        log.debug("Matching: " + variant + " ncoords = "+ geometry.getNumPoints());
        List<Edge> edges=matcher.match(geometry);
        if (edges == null) {
          log.warn("Could not match " + variant.getName() + " to street network");
          continue;
        }
        List<Coordinate> coordinates=new ArrayList<Coordinate>();
        for (        Edge e : edges) {
          coordinates.addAll(Arrays.asList(e.getGeometry().getCoordinates()));
          MapUtils.addToMapList(edgesForRoute.edgesForRoute,route,e);
        }
        Coordinate[] coordinateArray=new Coordinate[coordinates.size()];
        LineString ls=GeometryUtils.getGeometryFactory().createLineString(coordinates.toArray(coordinateArray));
        variant.setGeometry(ls);
      }
    }
  }
}
