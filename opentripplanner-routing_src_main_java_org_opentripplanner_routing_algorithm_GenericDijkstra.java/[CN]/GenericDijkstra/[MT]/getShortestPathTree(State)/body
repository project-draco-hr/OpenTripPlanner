{
  ShortestPathTree spt=createShortestPathTree();
  OTPPriorityQueue<State> queue=createPriorityQueue();
  spt.add(initialState);
  queue.insert(initialState,initialState.getWeight());
  Map<Vertex,List<Edge>> extraEdges=null;
  if (_extraEdgesStrategy != null) {
    extraEdges=new HashMap<Vertex,List<Edge>>();
    _extraEdgesStrategy.addOutgoingEdgesForOrigin(extraEdges,initialState.getVertex());
  }
  while (!queue.empty()) {
    State u=queue.extract_min();
    Vertex u_vertex=u.getVertex();
    if (_verbose) {
      System.out.println("min," + u.getWeight());
      System.out.println(u_vertex);
    }
    if (_searchTerminationStrategy != null && !_searchTerminationStrategy.shouldSearchContinue(initialState.getVertex(),null,u,spt,options))     break;
    for (    Edge edge : getEdgesForVertex(graph,extraEdges,u_vertex,options)) {
      if (_skipEdgeStrategy != null && _skipEdgeStrategy.shouldSkipEdge(initialState.getVertex(),null,u,edge,spt,options))       continue;
      for (State v=edge.traverse(u); v != null; v=v.getNextResult()) {
        if (_skipTraverseResultStrategy != null && _skipTraverseResultStrategy.shouldSkipTraversalResult(initialState.getVertex(),null,u,v,spt,options))         continue;
        if (_verbose)         System.out.printf("  w = %f + %f = %f %s",u.getWeight(),v.getWeightDelta(),v.getWeight(),v.getVertex());
        if (v.exceedsWeightLimit(options.maxWeight))         continue;
        if (spt.add(v))         queue.insert(v,v.getWeight());
      }
    }
    spt.postVisit(u);
  }
  return spt;
}
