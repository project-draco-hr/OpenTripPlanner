{
  long beginOsmNodeId=way.nodes[beginIdx];
  long endOsmNodeId=way.nodes[endIdx];
  int beginVertexIndex=getVertexIndexForOsmNode(beginOsmNodeId);
  int endVertexIndex=getVertexIndexForOsmNode(endOsmNodeId);
  int nNodes=endIdx - beginIdx + 1;
  List<Node> nodes=new ArrayList<>(nNodes);
  for (int n=beginIdx; n <= endIdx; n++) {
    long nodeId=way.nodes[n];
    Node node=osm.nodes.get(nodeId);
    nodes.add(node);
  }
  int edgeLengthMillimeters=getEdgeLengthMillimeters(nodes);
  if (edgeLengthMillimeters < 0) {
    LOG.warn("Street segment was too long to be represented, skipping.");
    return;
  }
  EdgeStore.Edge newForwardEdge=edgeStore.addStreetPair(beginVertexIndex,endVertexIndex,edgeLengthMillimeters);
  newForwardEdge.setGeometry(nodes);
  pointsPerEdgeHistogram.add(nNodes);
}
