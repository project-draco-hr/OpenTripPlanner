{
  Vertex near_a=graph.getVertex("near_1_agency_A");
  Vertex near_b=graph.getVertex("near_1_agency_B");
  Vertex near_c=graph.getVertex("near_1_agency_C");
  Vertex near_e=graph.getVertex("near_1_agency_E");
  Vertex stop_d=graph.getVertex("agency:D");
  Vertex split_d=null;
  for (  StreetTransitLink e : Iterables.filter(stop_d.getOutgoing(),StreetTransitLink.class)) {
    split_d=e.getToVertex();
  }
  RoutingRequest options=new RoutingRequest();
  options.wheelchairAccessible=true;
  options.dateTime=TestUtils.dateInSeconds("America/New_York",2009,8,18,0,0,0);
  ShortestPathTree spt;
  GraphPath path;
  options.setRoutingContext(graph,near_a,near_b);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(near_b,false);
  assertNotNull(path);
  options.setRoutingContext(graph,near_a,near_c);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(near_c,false);
  assertNull(path);
  options.setRoutingContext(graph,near_a,near_e);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(near_e,false);
  assertNotNull(path);
  GregorianCalendar time=new GregorianCalendar(2009,8,18,0,0,0);
  time.setTimeZone(TimeZone.getTimeZone("America/New_York"));
  options.dateTime=TestUtils.toSeconds(time);
  options.setRoutingContext(graph,near_a,split_d);
  spt=aStar.getShortestPathTree(options);
  time.add(Calendar.HOUR,1);
  time.add(Calendar.SECOND,1);
  path=spt.getPath(split_d,false);
  assertNotNull(path);
  assertEquals(TestUtils.toSeconds(time),path.getEndTime());
}
