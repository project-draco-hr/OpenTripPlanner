{
  context=GtfsLibrary.readGtfs(new File(ConstantsForTests.FAKE_GTFS));
  graph=new Graph();
  GTFSPatternHopFactory factory=new GTFSPatternHopFactory(context);
  factory.run(graph);
  graph.putService(CalendarServiceData.class,GtfsLibrary.createCalendarServiceData(context.getDao()));
  String[] stops={"agency_A","agency_B","agency_C","agency_D","agency_E"};
  for (int i=0; i < stops.length; ++i) {
    TransitStop stop=(TransitStop)(graph.getVertex(stops[i]));
    IntersectionVertex front=new IntersectionVertex(graph,"near_1_" + stop.getStopId(),stop.getX() + 0.0001,stop.getY() + 0.0001);
    IntersectionVertex back=new IntersectionVertex(graph,"near_2_" + stop.getStopId(),stop.getX() - 0.0001,stop.getY() - 0.0001);
    PlainStreetEdge street1=new PlainStreetEdge(front,back,GeometryUtils.makeLineString(stop.getX() + 0.0001,stop.getY() + 0.0001,stop.getX() - 0.0001,stop.getY() - 0.0001),"street",100,StreetTraversalPermission.ALL,false);
    PlainStreetEdge street2=new PlainStreetEdge(back,front,GeometryUtils.makeLineString(stop.getX() - 0.0001,stop.getY() - 0.0001,stop.getX() + 0.0001,stop.getY() + 0.0001),"street",100,StreetTraversalPermission.ALL,true);
  }
  NetworkLinker nl=new NetworkLinker(graph);
  nl.createLinkage();
}
