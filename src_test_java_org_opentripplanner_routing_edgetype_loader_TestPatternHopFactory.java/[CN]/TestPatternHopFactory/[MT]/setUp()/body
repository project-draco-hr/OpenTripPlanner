{
  context=GtfsLibrary.readGtfs(new File(ConstantsForTests.FAKE_GTFS));
  graph=new Graph();
  feedId=context.getFeedId().getId();
  GTFSPatternHopFactory factory=new GTFSPatternHopFactory(context);
  factory.run(graph);
  graph.putService(CalendarServiceData.class,GtfsLibrary.createCalendarServiceData(context.getDao()));
  String[] stops={feedId + ":A",feedId + ":B",feedId + ":C",feedId + ":D",feedId + ":E",feedId + ":entrance_a",feedId + ":entrance_b"};
  for (int i=0; i < stops.length; ++i) {
    TransitStop stop=(TransitStop)(graph.getVertex(stops[i]));
    IntersectionVertex front=new IntersectionVertex(graph,"near_1_" + stop.getStopId(),stop.getX() + 0.0001,stop.getY() + 0.0001);
    IntersectionVertex back=new IntersectionVertex(graph,"near_2_" + stop.getStopId(),stop.getX() - 0.0001,stop.getY() - 0.0001);
    StreetEdge street1=new StreetEdge(front,back,GeometryUtils.makeLineString(stop.getX() + 0.0001,stop.getY() + 0.0001,stop.getX() - 0.0001,stop.getY() - 0.0001),"street",100,StreetTraversalPermission.ALL,false);
    StreetEdge street2=new StreetEdge(back,front,GeometryUtils.makeLineString(stop.getX() - 0.0001,stop.getY() - 0.0001,stop.getX() + 0.0001,stop.getY() + 0.0001),"street",100,StreetTraversalPermission.ALL,true);
  }
  StreetLinkerModule ttsnm=new StreetLinkerModule();
  graph.hasStreets=true;
  graph.hasTransit=true;
  ttsnm.buildGraph(graph,new HashMap<Class<?>,Object>());
}
