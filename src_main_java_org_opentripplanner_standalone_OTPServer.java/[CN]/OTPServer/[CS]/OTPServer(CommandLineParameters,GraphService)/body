{
  LOG.info("Wiring up and configuring server.");
  graphService=gs;
  routingRequest=new RoutingRequest();
  sptService=new GenericAStar();
  if (params.longDistance) {
    LongDistancePathService pathService=new LongDistancePathService(graphService,sptService);
    pathService.setTimeout(10);
    this.pathService=pathService;
  }
 else {
    RetryingPathServiceImpl pathService=new RetryingPathServiceImpl(graphService,sptService);
    pathService.setFirstPathTimeout(10.0);
    pathService.setMultiPathTimeout(1.0);
    this.pathService=pathService;
  }
  planGenerator=new PlanGenerator(graphService,pathService);
  if (params.analyst) {
    geometryIndex=new GeometryIndex(graphService);
    sampleFactory=new SampleFactory(geometryIndex);
    tileCache=new TileCache(sampleFactory);
    sptCache=new SPTCache(sptService,graphService);
    renderer=new Renderer(tileCache,sptCache);
    sampleGridRenderer=new SampleGridRenderer(graphService,sptService);
    isoChroneSPTRenderer=new IsoChroneSPTRendererAccSampling(graphService,sptService,sampleGridRenderer);
    surfaceCache=new SurfaceCache(20);
    pointSetCache=new PointSetCache(sampleFactory);
  }
}
