{
  LOG.info("Wiring up and configuring server.");
  this.params=params;
  graphService=gs;
  routingRequest=new RoutingRequest();
  sptServiceFactory=new GenericAStarFactory();
  if (params.longDistance) {
    LongDistancePathService pathService=new LongDistancePathService(graphService,sptServiceFactory);
    pathService.timeout=10;
    this.pathService=pathService;
  }
 else {
    RetryingPathServiceImpl pathService=new RetryingPathServiceImpl(graphService,sptServiceFactory);
    pathService.setFirstPathTimeout(10.0);
    pathService.setMultiPathTimeout(1.0);
    this.pathService=pathService;
  }
  planGenerator=new PlanGenerator(graphService,pathService);
  tileRendererManager=new TileRendererManager(graphService);
  if (params.analyst) {
    tileCache=new TileCache(graphService);
    sptCache=new SPTCache(sptServiceFactory,graphService);
    renderer=new Renderer(tileCache,sptCache);
    sampleGridRenderer=new SampleGridRenderer(graphService,sptServiceFactory);
    isoChroneSPTRenderer=new IsoChroneSPTRendererAccSampling(graphService,sptServiceFactory,sampleGridRenderer);
    surfaceCache=new SurfaceCache(30);
    pointSetCache=new DiskBackedPointSetCache(100,new File(params.pointSetDirectory));
  }
}
