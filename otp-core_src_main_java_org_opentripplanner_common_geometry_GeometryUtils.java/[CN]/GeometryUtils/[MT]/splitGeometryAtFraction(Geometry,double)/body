{
  LineString empty=new LineString(null,gf);
  Coordinate[] coordinates=geometry.getCoordinates();
  CoordinateSequence sequence=gf.getCoordinateSequenceFactory().create(coordinates);
  LineString total=new LineString(sequence,gf);
  if (coordinates.length < 2)   return new P2<LineString>(empty,empty);
  if (fraction <= 0)   return new P2<LineString>(empty,total);
  if (fraction >= 1)   return new P2<LineString>(total,empty);
  double totalDistance=total.getLength();
  double requestedDistance=totalDistance * fraction;
  double fractionalIndex=binarySearchCoordinates(coordinates,requestedDistance);
  int lowIndex=(int)Math.floor(fractionalIndex);
  int highIndex=(int)Math.ceil(fractionalIndex);
  if (lowIndex == highIndex) {
    return splitGeometryAtPoint(geometry,coordinates[lowIndex]);
  }
 else {
    double lowFactor=highIndex - fractionalIndex;
    double highFactor=fractionalIndex - lowIndex;
    double x=coordinates[lowIndex].x * lowFactor + coordinates[highIndex].x * highFactor;
    double y=coordinates[lowIndex].y * lowFactor + coordinates[highIndex].y * highFactor;
    Coordinate splitCoordinate=new Coordinate(x,y);
    Coordinate[] beginning=new Coordinate[lowIndex + 2];
    Coordinate[] ending=new Coordinate[coordinates.length - lowIndex];
    for (int i=0; i <= lowIndex; i++) {
      beginning[i]=coordinates[i];
    }
    beginning[lowIndex + 1]=splitCoordinate;
    CoordinateSequence firstSequence=gf.getCoordinateSequenceFactory().create(beginning);
    LineString firstLineString=new LineString(firstSequence,gf);
    for (int i=coordinates.length - 1; i >= highIndex; i--) {
      ending[i - lowIndex]=coordinates[i];
    }
    ending[0]=splitCoordinate;
    CoordinateSequence secondSequence=gf.getCoordinateSequenceFactory().create(ending);
    LineString secondLineString=new LineString(secondSequence,gf);
    return new P2<LineString>(firstLineString,secondLineString);
  }
}
