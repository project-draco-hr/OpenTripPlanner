{
  LineString empty=new LineString(null,gf);
  Coordinate[] coordinates=geometry.getCoordinates();
  CoordinateSequence sequence=gf.getCoordinateSequenceFactory().create(coordinates);
  LineString total=new LineString(sequence,gf);
  if (coordinates.length < 2)   return new P2<LineString>(empty,empty);
  if (fraction <= 0)   return new P2<LineString>(empty,total);
  if (fraction >= 1)   return new P2<LineString>(total,empty);
  double totalDistance=total.getLength();
  double requestedDistance=totalDistance * fraction;
  double fractionalIndex=binarySearchCoordinates(coordinates,requestedDistance);
  int lowIndex=(int)Math.floor(fractionalIndex);
  int highIndex=(int)Math.ceil(fractionalIndex);
  Coordinate coordinate=coordinates[lowIndex];
  if (lowIndex != highIndex) {
    double lowFactor=highIndex - fractionalIndex;
    double highFactor=fractionalIndex - lowIndex;
    double x=coordinates[lowIndex].x * lowFactor + coordinates[highIndex].x * highFactor;
    double y=coordinates[lowIndex].y * lowFactor + coordinates[highIndex].y * highFactor;
    coordinate=new Coordinate(x,y);
  }
  return splitGeometryAtPoint(geometry,coordinate);
}
