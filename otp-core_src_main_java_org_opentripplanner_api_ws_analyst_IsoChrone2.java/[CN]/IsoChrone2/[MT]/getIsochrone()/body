{
  if (debug == null)   debug=false;
  if (precisionMeters == null)   precisionMeters=200;
  IsoChroneRequest isoChroneRequest=new IsoChroneRequest(cutoffSecList);
  isoChroneRequest.setIncludeDebugGeometry(debug);
  isoChroneRequest.setPrecisionMeters(precisionMeters);
  RoutingRequest sptRequest=buildRequest(0);
  List<IsochroneData> isochrones;
  if (algorithm == null || "accSampling".equals(algorithm)) {
    isochrones=accSamplingRenderer.getIsochrones(isoChroneRequest,sptRequest);
  }
 else   if ("recursiveGrid".equals(algorithm)) {
    isochrones=recursiveGridRenderer.getIsochrones(isoChroneRequest,sptRequest);
  }
 else {
    throw new IllegalArgumentException("Unknown algorithm: " + algorithm);
  }
  StringWriter geoJsonWriter=new StringWriter();
  GeoJSONBuilder geoJsonBuilder=new GeoJSONBuilder(geoJsonWriter);
  geoJsonBuilder.array();
  for (  IsochroneData isochrone : isochrones) {
    geoJsonBuilder.object();
    geoJsonBuilder.key("type").value("Feature");
    geoJsonBuilder.key("properties").object();
    geoJsonBuilder.key("name").value("Isochrone " + isochrone.getCutoffSec() + " sec");
    geoJsonBuilder.endObject();
    geoJsonBuilder.key("geometry");
    geoJsonBuilder.writeGeom(isochrone.getGeometry());
    Geometry debugGeometry=isochrone.getDebugGeometry();
    if (debug && debugGeometry != null) {
      geoJsonBuilder.key("debugGeometry");
      geoJsonBuilder.writeGeom(debugGeometry);
    }
    geoJsonBuilder.endObject();
  }
  geoJsonBuilder.endArray();
  CacheControl cc=new CacheControl();
  cc.setMaxAge(3600);
  cc.setNoCache(false);
  return Response.ok(geoJsonWriter.toString()).cacheControl(cc).build();
}
