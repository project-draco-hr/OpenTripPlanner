{
  this.timeCutoffMinutes=timeCutoffMinutes;
  LOG.info("Caching distances to nearby street intersections from each transit stop...");
  for (  TransitStop tstop : graph.index.stopVertexForStop.values()) {
    RoutingRequest rr=new RoutingRequest(TraverseMode.WALK);
    rr.batch=(true);
    rr.setRoutingContext(graph,tstop,tstop);
    rr.rctx.pathParsers=new PathParser[]{new ProfilePropagationPathParser()};
    rr.worstTime=(rr.dateTime + timeCutoffMinutes * 60);
    AStar astar=new AStar();
    rr.longDistance=true;
    rr.dominanceFunction=new DominanceFunction.LeastWalk();
    rr.setNumItineraries(1);
    ShortestPathTree spt=astar.getShortestPathTree(rr,5);
    int[] distances=new int[spt.getVertexCount() * 2];
    int i=0;
    for (    Vertex vertex : spt.getVertices()) {
      State state=spt.getState(vertex);
      if (state == null)       continue;
      distances[i++]=vertex.getIndex();
      distances[i++]=(int)state.getWalkDistance();
    }
    distancesForStop.put(tstop,distances);
    rr.cleanup();
  }
  LOG.info("Done caching distances to nearby street intersections from each transit stop.");
}
