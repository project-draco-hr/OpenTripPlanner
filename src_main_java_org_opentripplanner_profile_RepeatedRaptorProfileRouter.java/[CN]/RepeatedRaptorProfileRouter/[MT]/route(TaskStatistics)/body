{
  long computationStartTime=System.currentTimeMillis();
  LOG.info("Begin profile request");
  if (raptorWorkerData == null) {
    long dataStart=System.currentTimeMillis();
    raptorWorkerData=getRaptorWorkerData(request,graph,sampleSet,ts);
    ts.raptorData=(int)(System.currentTimeMillis() - dataStart);
  }
 else {
    ts.raptorData=0;
  }
  LOG.info("Done.");
  long initialStopStart=System.currentTimeMillis();
  LOG.info("Finding initial stops");
  TIntIntMap accessTimes=findInitialStops(false,raptorWorkerData);
  LOG.info("Found {} initial transit stops",accessTimes.size());
  int[] nonTransitTimes=new int[Vertex.getMaxIndex()];
  Arrays.fill(nonTransitTimes,Integer.MAX_VALUE);
  for (  State state : walkOnlySpt.getAllStates()) {
    int time=(int)(state.getWalkDistance() / request.walkSpeed);
    int vidx=state.getVertex().getIndex();
    int otime=nonTransitTimes[vidx];
    if (otime > time)     nonTransitTimes[vidx]=time;
  }
  ts.initialStopSearch=(int)(System.currentTimeMillis() - initialStopStart);
  ts.initialStopCount=accessTimes.size();
  long walkSearchStart=System.currentTimeMillis();
  if (sampleSet != null) {
    nonTransitTimes=sampleSet.eval(nonTransitTimes);
  }
  ts.walkSearch=(int)(System.currentTimeMillis() - walkSearchStart);
  RaptorWorker worker=new RaptorWorker(raptorWorkerData,request);
  propagatedTimesStore=worker.runRaptor(graph,accessTimes,nonTransitTimes,ts);
  for (  int min : propagatedTimesStore.mins) {
    if (min != RaptorWorker.UNREACHED)     ts.targetsReached++;
  }
  if (sampleSet == null) {
    timeSurfaceRangeSet=new TimeSurface.RangeSet();
    timeSurfaceRangeSet.min=new TimeSurface(this);
    timeSurfaceRangeSet.avg=new TimeSurface(this);
    timeSurfaceRangeSet.max=new TimeSurface(this);
    propagatedTimesStore.makeSurfaces(timeSurfaceRangeSet);
  }
  ts.compute=(int)(System.currentTimeMillis() - computationStartTime);
  LOG.info("Profile request finished in {} seconds",(ts.compute) / 1000.0);
}
