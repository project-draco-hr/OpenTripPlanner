{
  long computationStartTime=System.currentTimeMillis();
  LOG.info("Begin profile request");
  if (request.scenario != null && request.scenario.modifications != null) {
    for (    AddTripPattern atp : Iterables.filter(request.scenario.modifications,AddTripPattern.class)) {
      atp.materialize(graph);
    }
  }
  LOG.info("Make data...");
  long startData=System.currentTimeMillis();
  DayOfWeek dayOfWeek=DayOfWeek.of(request.date.getDayOfWeek());
  TimeWindow window=new TimeWindow(request.fromTime,request.toTime + RaptorWorker.MAX_DURATION,graph.index.servicesRunning(request.date),dayOfWeek);
  RaptorWorkerData raptorWorkerData;
  if (sampleSet == null)   raptorWorkerData=new RaptorWorkerData(graph,window,request.scenario,ts);
 else   raptorWorkerData=new RaptorWorkerData(graph,window,request.scenario,sampleSet,ts);
  ts.raptorData=(int)(System.currentTimeMillis() - startData);
  LOG.info("Done.");
  long initialStopStart=System.currentTimeMillis();
  LOG.info("Finding initial stops");
  TIntIntMap accessTimes=findInitialStops(false,raptorWorkerData);
  LOG.info("Found {} initial transit stops",accessTimes.size());
  int[] timesAtVertices=new int[Vertex.getMaxIndex()];
  Arrays.fill(timesAtVertices,Integer.MAX_VALUE);
  for (  State state : walkOnlySpt.getAllStates()) {
    int time=(int)(state.getWalkDistance() / request.walkSpeed);
    int vidx=state.getVertex().getIndex();
    int otime=timesAtVertices[vidx];
    if (otime > time)     timesAtVertices[vidx]=time;
  }
  ts.initialStopSearch=(int)(System.currentTimeMillis() - initialStopStart);
  ts.initialStopCount=accessTimes.size();
  long walkSearchStart=System.currentTimeMillis();
  int[] walkTimes;
  if (sampleSet == null) {
    walkTimes=timesAtVertices;
  }
 else {
    walkTimes=sampleSet.eval(timesAtVertices);
  }
  ts.walkSearch=(int)(System.currentTimeMillis() - walkSearchStart);
  RaptorWorker worker=new RaptorWorker(raptorWorkerData,request);
  propagatedTimesStore=worker.runRaptor(graph,accessTimes,walkTimes,ts);
  if (sampleSet == null) {
    timeSurfaceRangeSet=new TimeSurface.RangeSet();
    timeSurfaceRangeSet.min=new TimeSurface(this);
    timeSurfaceRangeSet.avg=new TimeSurface(this);
    timeSurfaceRangeSet.max=new TimeSurface(this);
    propagatedTimesStore.makeSurfaces(timeSurfaceRangeSet);
  }
  ts.compute=(int)(System.currentTimeMillis() - computationStartTime);
  LOG.info("Profile request finished in {} seconds",(ts.compute) / 1000.0);
}
