{
  double lat=dest ? request.toLat : request.fromLat;
  double lon=dest ? request.toLon : request.fromLon;
  QualifiedModeSet modes=dest ? request.egressModes : request.accessModes;
  RoutingRequest rr=new RoutingRequest(modes);
  rr.batch=true;
  rr.from=new GenericLocation(lat,lon);
  rr.to=rr.from;
  rr.setRoutingContext(graph);
  rr.rctx.pathParsers=new PathParser[]{new InitialStopSearchPathParser()};
  rr.dateTime=request.date.toDateMidnight(DateTimeZone.forTimeZone(graph.getTimeZone())).getMillis() / 1000 + request.fromTime;
  if (rr.modes.contains(TraverseMode.BICYCLE)) {
    rr.dominanceFunction=new DominanceFunction.EarliestArrival();
    rr.worstTime=rr.dateTime + request.maxBikeTime * 60;
  }
 else {
    rr.maxWalkDistance=2000;
    rr.softWalkLimiting=false;
    rr.dominanceFunction=new DominanceFunction.LeastWalk();
  }
  rr.numItineraries=1;
  rr.longDistance=true;
  Collection<AddTripPattern.TemporaryStop> stops;
  if (request.scenario != null && request.scenario.modifications != null) {
    stops=Lists.newArrayList();
    for (    AddTripPattern atp : Iterables.filter(request.scenario.modifications,AddTripPattern.class)) {
      for (      AddTripPattern.TemporaryStop tstop : atp.temporaryStops) {
        stops.add(tstop);
      }
    }
  }
 else {
    stops=Collections.emptyList();
  }
  AStar aStar=new AStar();
  walkOnlySpt=aStar.getShortestPathTree(rr,5);
  return data.findStopsNear(walkOnlySpt,graph);
}
