{
  LOG.info("Finding initial stops");
  double lat=dest ? request.toLat : request.fromLat;
  double lon=dest ? request.toLon : request.fromLon;
  QualifiedModeSet modes=dest ? request.egressModes : request.accessModes;
  RoutingRequest rr=new RoutingRequest(modes);
  rr.batch=true;
  rr.from=new GenericLocation(lat,lon);
  rr.to=rr.from;
  rr.setRoutingContext(graph);
  rr.rctx.pathParsers=new PathParser[]{new InitialStopSearchPathParser()};
  rr.dateTime=request.date.toDateMidnight(DateTimeZone.forTimeZone(graph.getTimeZone())).getMillis() / 1000 + request.fromTime;
  rr.walkSpeed=request.walkSpeed;
  rr.bikeSpeed=request.bikeSpeed;
  if (data == null) {
    rr.worstTime=rr.dateTime + 120 * 60;
    rr.dominanceFunction=new DominanceFunction.EarliestArrival();
  }
 else {
    if (rr.modes.contains(TraverseMode.BICYCLE)) {
      rr.dominanceFunction=new DominanceFunction.EarliestArrival();
      rr.worstTime=rr.dateTime + request.maxBikeTime * 60;
    }
 else {
      rr.maxWalkDistance=Math.min(request.maxWalkTime * 60 * request.walkSpeed,GraphIndex.MAX_WALK_METERS);
      rr.softWalkLimiting=false;
      rr.dominanceFunction=new DominanceFunction.LeastWalk();
    }
  }
  rr.numItineraries=1;
  rr.longDistance=true;
  AStar aStar=new AStar();
  preTransitSpt=aStar.getShortestPathTree(rr,5);
  if (data != null) {
    TIntIntMap accessTimes=data.findStopsNear(preTransitSpt,graph,rr.modes.contains(TraverseMode.BICYCLE),request.walkSpeed);
    LOG.info("Found {} transit stops",accessTimes.size());
    return accessTimes;
  }
 else {
    return null;
  }
}
