{
  long computationStartTime=System.currentTimeMillis();
  LOG.info("Begin profile request");
  LOG.info("Finding initial stops");
  Collection<State> states=findInitialStops(false);
  LOG.info("Found {} initial stops",states.size());
  final RoutingRequest rr=new RoutingRequest();
  rr.batch=true;
  rr.maxTransfers=3;
  rr.arriveBy=false;
  rr.modes=new TraverseModeSet("WALK,TRANSIT");
  rr.from=new GenericLocation(request.fromLat,request.fromLon);
  rr.to=request.analyst ? new GenericLocation(request.fromLat,request.fromLon) : new GenericLocation(request.toLat,request.toLon);
  rr.dateTime=request.date.toDateMidnight(DateTimeZone.forTimeZone(graph.getTimeZone())).getMillis() / 1000 + request.fromTime;
  rr.setRoutingContext(graph);
  Map<TripPattern,TripTimeSubset> timetables=TripTimeSubset.indexGraph(graph,request.date,request.fromTime,request.toTime + 120 * 60);
  int i=1;
  PathDiscardingRaptorStateStore rss=new PathDiscardingRaptorStateStore(rr.maxTransfers + 2,request.toTime + 120 * 60);
  for (int startTime=request.toTime - 60; startTime >= request.fromTime; startTime-=60) {
    rss.restart();
    for (    State state : states) {
      rss.put((TransitStop)state.getVertex(),(int)(state.getElapsedTimeSeconds() + startTime));
    }
    if (++i % 30 == 0)     LOG.info("Completed {} RAPTOR searches",i);
    Raptor raptor=new Raptor(rss,rr,timetables);
    raptor.run();
    for (TObjectIntIterator<TransitStop> it=raptor.iterator(); it.hasNext(); ) {
      it.advance();
      int et=it.value() - startTime;
      TransitStop v=it.key();
      if (et < mins.get(v))       mins.put(v,et);
      if (et > maxs.get(v))       maxs.put(v,et);
      accumulator.putIfAbsent(v,0);
      counts.putIfAbsent(v,0);
      accumulator.adjustValue(v,et);
      counts.increment(v);
    }
  }
  LOG.info("Profile request complete, propagating to the street network");
  makeSurfaces();
  LOG.info("Profile request finished in {} seconds",(System.currentTimeMillis() - computationStartTime) / 1000.0);
}
