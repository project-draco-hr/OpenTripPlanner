{
  long computationStartTime=System.currentTimeMillis();
  LOG.info("Begin profile request");
  LOG.info("Finding initial stops");
  TObjectIntMap<TransitStop> accessTimes=findInitialStops(false);
  LOG.info("Found {} initial transit stops",accessTimes.size());
  int i=1;
  Map<TripPattern,TripTimeSubset> timetables=TripTimeSubset.indexGraph(graph,request.date,request.fromTime,request.toTime + MAX_DURATION);
  if (banRoute != null) {
    Route route=graph.index.routeForId.get(banRoute);
    LOG.info("Banning route {}",route);
    int n=0;
    for (    TripPattern pattern : graph.index.patternsForRoute.get(route)) {
      timetables.remove(pattern);
      n++;
    }
    LOG.info("Removed {} patterns.",n);
  }
  for (int startTime=request.toTime - 60; startTime >= request.fromTime; startTime-=60) {
    PathDiscardingRaptorStateStore rss=new PathDiscardingRaptorStateStore(MAX_TRANSFERS + 2);
    if (++i % 30 == 0) {
      LOG.info("Completed {} RAPTOR searches",i);
    }
    rss.maxTime=startTime + MAX_DURATION;
    rss.restart();
    for (TObjectIntIterator<TransitStop> it=accessTimes.iterator(); it.hasNext(); ) {
      it.advance();
      rss.put(it.key(),startTime + it.value(),true);
    }
    Raptor raptor=new Raptor(graph,MAX_TRANSFERS,request.walkSpeed,rss,startTime,request.date,timetables);
    raptor.run();
    for (TObjectIntIterator<TransitStop> it=raptor.iterator(); it.hasNext(); ) {
      it.advance();
      int et=it.value() - startTime;
      TransitStop v=it.key();
      if (et < mins.get(v))       mins.put(v,et);
      if (et > maxs.get(v))       maxs.put(v,et);
      accumulator.putIfAbsent(v,0);
      counts.putIfAbsent(v,0);
      accumulator.adjustValue(v,et);
      counts.increment(v);
    }
  }
  LOG.info("Profile request finished in {} seconds",(System.currentTimeMillis() - computationStartTime) / 1000.0);
}
