{
  long computationStartTime=System.currentTimeMillis();
  LOG.info("Begin profile request");
  LOG.info("Finding initial stops");
  TObjectIntMap<TransitStop> accessTimes=findInitialStops(false);
  LOG.info("Found {} initial transit stops",accessTimes.size());
  Map<TripPattern,TripTimeSubset> timetables=TripTimeSubset.indexGraph(graph,request.date,request.fromTime,request.toTime + MAX_DURATION);
  if (banAgency != null) {
    for (    Route route : graph.index.routeForId.values()) {
      if (route.getAgency().getId().equals(banAgency)) {
        LOG.info("Banning route {}",route);
        int n=0;
        for (        TripPattern pattern : graph.index.patternsForRoute.get(route)) {
          timetables.remove(pattern);
          n++;
        }
        LOG.info("Removed {} patterns.",n);
      }
    }
  }
  PathDiscardingRaptorStateStore rss=new PathDiscardingRaptorStateStore((MAX_TRANSFERS + 1) * 2 + 1);
  int iterations=(request.toTime - request.fromTime) / 60 * stepMinutes + 1;
  TIntObjectMap<int[]> timesAtStops=new TIntObjectHashMap<int[]>();
  for (int i=0, departureTime=request.toTime - 60 * stepMinutes; departureTime >= request.fromTime; departureTime-=60 * stepMinutes) {
    if (++i % 5 == 0) {
      LOG.info("Completed {} RAPTOR searches",i);
    }
    rss.maxTime=departureTime + MAX_DURATION;
    rss.restart();
    for (TObjectIntIterator<TransitStop> it=accessTimes.iterator(); it.hasNext(); ) {
      it.advance();
      rss.put(it.key(),departureTime + it.value(),true);
    }
    Raptor raptor=new Raptor(graph,MAX_TRANSFERS,request.walkSpeed,rss,departureTime,request.date,timetables);
    raptor.run();
    for (TObjectIntIterator<TransitStop> it=rss.iterator(); it.hasNext(); ) {
      it.advance();
      int time=it.value();
      int tsidx=it.key().getIndex();
      if (time == Integer.MAX_VALUE)       continue;
      time-=departureTime;
      int[] times;
      if (timesAtStops.containsKey(tsidx)) {
        times=timesAtStops.get(tsidx);
      }
 else {
        times=new int[iterations];
        Arrays.fill(times,Integer.MAX_VALUE);
        timesAtStops.put(tsidx,times);
      }
      times[i]=time;
    }
  }
  LOG.info("Profile request complete, creating time surfaces.");
  makeSurfaces(timesAtStops,iterations);
  LOG.info("Profile request finished in {} seconds",(System.currentTimeMillis() - computationStartTime) / 1000.0);
}
