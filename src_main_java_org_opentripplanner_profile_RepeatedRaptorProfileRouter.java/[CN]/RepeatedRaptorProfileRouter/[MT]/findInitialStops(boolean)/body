{
  double lat=dest ? request.toLat : request.fromLat;
  double lon=dest ? request.toLon : request.fromLon;
  QualifiedModeSet modes=dest ? request.accessModes : request.egressModes;
  RoutingRequest rr=new RoutingRequest(TraverseMode.WALK);
  rr.dominanceFunction=new DominanceFunction.EarliestArrival();
  rr.batch=true;
  rr.from=new GenericLocation(lat,lon);
  rr.walkSpeed=request.walkSpeed;
  rr.to=rr.from;
  rr.setRoutingContext(graph);
  rr.dateTime=request.date.toDateMidnight(DateTimeZone.forTimeZone(graph.getTimeZone())).getMillis() / 1000 + request.fromTime;
  rr.worstTime=(rr.dateTime + request.maxWalkTime * 60);
  AStar astar=new AStar();
  rr.longDistance=true;
  rr.setNumItineraries(1);
  ShortestPathTree spt=astar.getShortestPathTree(rr,5);
  TObjectIntMap<TransitStop> accessTimes=new TObjectIntHashMap<TransitStop>();
  for (  TransitStop tstop : graph.index.stopVertexForStop.values()) {
    State s=spt.getState(tstop);
    if (s != null) {
      accessTimes.put(tstop,(int)s.getElapsedTimeSeconds());
    }
  }
  timeSurfaceRangeSet=new TimeSurface.RangeSet();
  timeSurfaceRangeSet.min=new TimeSurface(spt,false);
  timeSurfaceRangeSet.max=new TimeSurface(spt,false);
  timeSurfaceRangeSet.avg=new TimeSurface(spt,false);
  rr.cleanup();
  return accessTimes;
}
