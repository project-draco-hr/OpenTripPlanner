{
  P2<LineString> geoms=GeometryUtils.splitGeometryAtPoint(getGeometry(),v.getCoordinate());
  StreetEdge e1=null;
  StreetEdge e2=null;
  if (destructive) {
    e1=new StreetEdge((StreetVertex)fromv,v,geoms.first,name,0,permission,this.isBack());
    e2=new StreetEdge(v,(StreetVertex)tov,geoms.second,name,0,permission,this.isBack());
    e1.calculateLengthFromGeometry();
    e2.calculateLengthFromGeometry();
    if (!isBack()) {
      double frac=(double)e1.length_mm / (e1.length_mm + e2.length_mm);
      e1.length_mm=(int)(length_mm * frac);
      e2.length_mm=length_mm - e1.length_mm;
    }
 else {
      double frac=(double)e2.length_mm / (e1.length_mm + e2.length_mm);
      e2.length_mm=(int)(length_mm * frac);
      e1.length_mm=length_mm - e2.length_mm;
    }
    if (e1.length_mm < 0 || e2.length_mm < 0) {
      e1.tov.removeIncoming(e1);
      e1.fromv.removeOutgoing(e1);
      e2.tov.removeIncoming(e2);
      e2.fromv.removeOutgoing(e2);
      throw new IllegalStateException("Split street is longer than original street!");
    }
    for (    StreetEdge e : new StreetEdge[]{e1,e2}) {
      e.setBicycleSafetyFactor(getBicycleSafetyFactor());
      e.setHasBogusName(hasBogusName());
      e.setStairs(isStairs());
      e.setWheelchairAccessible(isWheelchairAccessible());
      e.setBack(isBack());
    }
  }
 else {
    if (((TemporarySplitterVertex)v).isEndVertex()) {
      e1=new TemporaryPartialStreetEdge(this,(StreetVertex)fromv,(TemporarySplitterVertex)v,geoms.first,name,0);
      e1.calculateLengthFromGeometry();
      e1.setNoThruTraffic(this.isNoThruTraffic());
      e1.setStreetClass(this.getStreetClass());
    }
 else {
      e2=new TemporaryPartialStreetEdge(this,(TemporarySplitterVertex)v,(StreetVertex)tov,geoms.second,name,0);
      e2.calculateLengthFromGeometry();
      e2.setNoThruTraffic(this.isNoThruTraffic());
      e2.setStreetClass(this.getStreetClass());
    }
  }
  return new P2<StreetEdge>(e1,e2);
}
