{
  Leg leg=new Leg();
  Edge[] edges=new Edge[states.length - 1];
  leg.startTime=makeCalendar(states[0]);
  leg.endTime=makeCalendar(states[states.length - 1]);
  leg.distance=0.0;
  for (int i=0; i < edges.length; i++) {
    edges[i]=states[i + 1].getBackEdge();
    leg.distance+=edges[i].getDistance();
  }
  addModeAndAlerts(leg,states);
  TimeZone timeZone=leg.startTime.getTimeZone();
  leg.agencyTimeZoneOffset=timeZone.getOffset(leg.startTime.getTimeInMillis());
  addTripFields(leg,states,transitIndexService);
  addPlaces(leg,states,edges,showIntermediateStops);
  if (leg.isTransitLeg())   addRealTimeData(leg,states);
  CoordinateArrayListSequence coordinates=makeCoordinates(edges);
  Geometry geometry=GeometryUtils.getGeometryFactory().createLineString(coordinates);
  leg.legGeometry=PolylineEncoder.createEncodings(geometry);
  leg.interlineWithPreviousLeg=states[0].getBackEdge() instanceof PatternInterlineDwell;
  if (states[0].getBackEdge() instanceof FrequencyBoard) {
    State preBoardState=states[0].getBackState();
    FrequencyBoard fb=(FrequencyBoard)states[0].getBackEdge();
    FrequencyBasedTripPattern pt=fb.getPattern();
    int boardTime=preBoardState.getServiceDay().secondsSinceMidnight(preBoardState.getTimeSeconds());
    int period=pt.getPeriod(fb.getStopIndex(),boardTime);
    leg.isNonExactFrequency=pt.isExact();
    leg.headway=period;
  }
  leg.rentedBike=states[0].isBikeRenting() && states[states.length - 1].isBikeRenting();
  return leg;
}
