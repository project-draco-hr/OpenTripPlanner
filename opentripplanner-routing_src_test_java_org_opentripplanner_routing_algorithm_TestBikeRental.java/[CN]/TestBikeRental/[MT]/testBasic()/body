{
  Graph graph=new Graph();
  StreetVertex v1=new IntersectionVertex(graph,"v1",new Coordinate(-77.0492,38.856),"v1");
  StreetVertex v2=new IntersectionVertex(graph,"v2",new Coordinate(-77.0492,38.857),"v2");
  StreetVertex v3=new IntersectionVertex(graph,"v3",new Coordinate(-77.0492,38.858),"v3");
  Edge walk=new PlainStreetEdge(v1,v2,GeometryUtils.makeLineString(-77.0492,38.856,-77.0492,38.857),"S. Crystal Dr",87,StreetTraversalPermission.PEDESTRIAN,false);
  Edge mustBike=new PlainStreetEdge(v2,v3,GeometryUtils.makeLineString(-77.0492,38.857,-77.0492,38.858),"S. Crystal Dr",87,StreetTraversalPermission.BICYCLE,false);
  TraverseOptions options=new TraverseOptions(new TraverseModeSet("WALK,TRANSIT"));
  ShortestPathTree tree=AStar.getShortestPathTree(graph,v1,v3,1000,options);
  GraphPath path=tree.getPath(v3,false);
  assertNull(path);
  options=new TraverseOptions(new TraverseModeSet("BICYCLE,TRANSIT"));
  options.freezeTraverseMode();
  tree=AStar.getShortestPathTree(graph,v1,v3,1000,options);
  path=tree.getPath(v3,false);
  assertNull(path);
  options=new TraverseOptions(new TraverseModeSet("WALK,BICYCLE,TRANSIT"));
  options.freezeTraverseMode();
  tree=AStar.getShortestPathTree(graph,v1,v3,1000,options);
  path=tree.getPath(v3,false);
  assertNull(path);
  BikeRentalStationVertex station=new BikeRentalStationVertex(graph,"station",-77.049,36.856,"station",10);
  new StreetBikeRentalLink(station,v2);
  new StreetBikeRentalLink(v2,station);
  new RentABikeOnEdge(station,station);
  new RentABikeOffEdge(station,station);
  options=new TraverseOptions(new TraverseModeSet("WALK,BICYCLE,TRANSIT"));
  options.freezeTraverseMode();
  tree=AStar.getShortestPathTree(graph,v1,v3,1000,options);
  path=tree.getPath(v3,false);
  assertNotNull(path);
  assertFalse(path.states.getLast().isFinal());
  BikeRentalStationVertex station2=new BikeRentalStationVertex(graph,"station2",-77.049,36.857,"station",10);
  new StreetBikeRentalLink(station2,v3);
  new StreetBikeRentalLink(v3,station2);
  new RentABikeOnEdge(station2,station2);
  new RentABikeOffEdge(station2,station2);
  options=new TraverseOptions(new TraverseModeSet("WALK,BICYCLE,TRANSIT"));
  tree=AStar.getShortestPathTree(graph,v1,v3,1000,options);
  path=tree.getPath(v3,false);
  assertNotNull(path);
}
