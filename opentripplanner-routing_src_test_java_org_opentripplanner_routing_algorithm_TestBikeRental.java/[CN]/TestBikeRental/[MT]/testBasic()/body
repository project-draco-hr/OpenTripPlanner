{
  Graph graph=new Graph();
  StreetVertex v1=new IntersectionVertex(graph,"v1",-77.0492,38.856,"v1");
  StreetVertex v2=new IntersectionVertex(graph,"v2",-77.0492,38.857,"v2");
  StreetVertex v3=new IntersectionVertex(graph,"v3",-77.0492,38.858,"v3");
  Edge walk=new PlainStreetEdge(v1,v2,GeometryUtils.makeLineString(-77.0492,38.856,-77.0492,38.857),"S. Crystal Dr",87,StreetTraversalPermission.PEDESTRIAN,false);
  Edge mustBike=new PlainStreetEdge(v2,v3,GeometryUtils.makeLineString(-77.0492,38.857,-77.0492,38.858),"S. Crystal Dr",87,StreetTraversalPermission.BICYCLE,false);
  GenericAStar aStar=new GenericAStar();
  RoutingRequest options=new RoutingRequest(new TraverseModeSet("WALK,TRANSIT"));
  options.setRoutingContext(graph,v1,v3);
  ShortestPathTree tree=aStar.getShortestPathTree(options);
  GraphPath path=tree.getPath(v3,false);
  assertNull(path);
  options=new RoutingRequest(new TraverseModeSet("WALK,BICYCLE,TRANSIT"));
  options.freezeTraverseMode();
  options.setRoutingContext(graph,v1,v3);
  tree=aStar.getShortestPathTree(options);
  path=tree.getPath(v3,false);
  assertNull(path);
  BikeRentalStationVertex station=new BikeRentalStationVertex(graph,"id","station",-77.049,36.856,"station",10);
  new StreetBikeRentalLink(station,v2);
  new StreetBikeRentalLink(v2,station);
  new RentABikeOnEdge(station,station,"default");
  new RentABikeOffEdge(station,station,"default");
  options=new RoutingRequest(new TraverseModeSet("WALK,BICYCLE,TRANSIT"));
  options.freezeTraverseMode();
  options.setRoutingContext(graph,v1,v3);
  tree=aStar.getShortestPathTree(options);
  path=tree.getPath(v3,false);
  assertNull(path);
  BikeRentalStationVertex station2=new BikeRentalStationVertex(graph,"id2","station2",-77.049,36.857,"station",10);
  new StreetBikeRentalLink(station2,v3);
  new StreetBikeRentalLink(v3,station2);
  new RentABikeOnEdge(station2,station2,"default");
  new RentABikeOffEdge(station2,station2,"default");
  options=new RoutingRequest(new TraverseModeSet("WALK,BICYCLE,TRANSIT"));
  options.setRoutingContext(graph,v1,v3);
  tree=aStar.getShortestPathTree(options);
  path=tree.getPath(v3,false);
  assertNotNull(path);
}
