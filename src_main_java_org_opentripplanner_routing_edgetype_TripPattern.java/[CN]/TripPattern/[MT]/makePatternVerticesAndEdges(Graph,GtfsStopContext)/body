{
  PatternArriveVertex pav0, pav1=null;
  PatternDepartVertex pdv0;
  int nStops=stopPattern.size;
  for (int stop=0; stop < nStops - 1; stop++) {
    Stop s0=stopPattern.stops[stop];
    Stop s1=stopPattern.stops[stop + 1];
    pdv0=new PatternDepartVertex(graph,this,stop);
    departVertices[stop]=pdv0;
    if (stop > 0) {
      pav0=pav1;
      dwellEdges[stop]=new PatternDwell(pav0,pdv0,stop,this);
    }
    pav1=new PatternArriveVertex(graph,this,stop + 1);
    arriveVertices[stop + 1]=pav1;
    hopEdges[stop]=new PatternHop(pdv0,pav1,s0,s1,stop);
    TransitStopDepart stopDepart=getStopOrParent(context.stopDepartNodes,s0,graph);
    TransitStopArrive stopArrive=getStopOrParent(context.stopArriveNodes,s1,graph);
    stopVertices[stop]=stopDepart.getStopVertex();
    stopVertices[stop + 1]=stopArrive.getStopVertex();
    if (this.canBoard(stop)) {
      boardEdges[stop]=new TransitBoardAlight(stopDepart,pdv0,stop,mode);
    }
    if (this.canAlight(stop + 1)) {
      alightEdges[stop + 1]=new TransitBoardAlight(pav1,stopArrive,stop + 1,mode);
    }
  }
}
