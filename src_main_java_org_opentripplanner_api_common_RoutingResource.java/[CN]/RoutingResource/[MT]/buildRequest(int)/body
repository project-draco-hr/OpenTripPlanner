{
  RoutingRequest request=otpServer.routingRequest.clone();
  request.setFromString(get(fromPlace,n,request.getFromPlace().getRepresentation()));
  request.setToString(get(toPlace,n,request.getToPlace().getRepresentation()));
  request.routerId=routerId;
{
    String d=get(date,n,null);
    String t=get(time,n,null);
    TimeZone tz;
    Router router=otpServer.getRouter(request.routerId);
    tz=router.graph.getTimeZone();
    if (d == null && t != null) {
      LOG.debug("parsing ISO datetime {}",t);
      try {
        DatatypeFactory df=javax.xml.datatype.DatatypeFactory.newInstance();
        XMLGregorianCalendar xmlGregCal=df.newXMLGregorianCalendar(t);
        GregorianCalendar gregCal=xmlGregCal.toGregorianCalendar();
        if (xmlGregCal.getTimezone() == DatatypeConstants.FIELD_UNDEFINED) {
          gregCal.setTimeZone(tz);
        }
        Date d2=gregCal.getTime();
        request.setDateTime(d2);
      }
 catch (      DatatypeConfigurationException e) {
        request.setDateTime(d,t,tz);
      }
    }
 else {
      request.setDateTime(d,t,tz);
    }
  }
  request.setWheelchairAccessible(get(wheelchair,n,request.wheelchairAccessible));
  request.setNumItineraries(get(numItineraries,n,request.getNumItineraries()));
  request.setMaxWalkDistance(get(maxWalkDistance,n,request.getMaxWalkDistance()));
  request.setMaxPreTransitTime(get(maxPreTransitTime,n,request.maxPreTransitTime));
  request.setWalkReluctance(get(walkReluctance,n,request.walkReluctance));
  request.setWaitReluctance(get(waitReluctance,n,request.waitReluctance));
  request.setWaitAtBeginningFactor(get(waitAtBeginningFactor,n,request.waitAtBeginningFactor));
  request.walkSpeed=get(walkSpeed,n,request.walkSpeed);
  double bikeSpeedParam=get(bikeSpeed,n,request.bikeSpeed);
  request.bikeSpeed=bikeSpeedParam;
  int bikeSwitchTimeParam=get(bikeSwitchTime,n,request.bikeSwitchTime);
  request.bikeSwitchTime=bikeSwitchTimeParam;
  int bikeSwitchCostParam=get(bikeSwitchCost,n,request.bikeSwitchCost);
  request.bikeSwitchCost=bikeSwitchCostParam;
  OptimizeType opt=get(optimize,n,request.optimize);
{
    Double tsafe=get(triangleSafetyFactor,n,null);
    Double tslope=get(triangleSlopeFactor,n,null);
    Double ttime=get(triangleTimeFactor,n,null);
    if (tsafe != null || tslope != null || ttime != null) {
      if (tsafe == null || tslope == null || ttime == null) {
        throw new ParameterException(Message.UNDERSPECIFIED_TRIANGLE);
      }
      if (opt == null) {
        opt=OptimizeType.TRIANGLE;
      }
 else       if (opt != OptimizeType.TRIANGLE) {
        throw new ParameterException(Message.TRIANGLE_OPTIMIZE_TYPE_NOT_SET);
      }
      if (Math.abs(tsafe + tslope + ttime - 1) > Math.ulp(1) * 3) {
        throw new ParameterException(Message.TRIANGLE_NOT_AFFINE);
      }
      request.setTriangleSafetyFactor(tsafe);
      request.setTriangleSlopeFactor(tslope);
      request.setTriangleTimeFactor(ttime);
    }
 else     if (opt == OptimizeType.TRIANGLE) {
      throw new ParameterException(Message.TRIANGLE_VALUES_NOT_SET);
    }
  }
  request.setArriveBy(get(arriveBy,n,false));
  request.showIntermediateStops=get(showIntermediateStops,n,request.showIntermediateStops);
  if (intermediatePlaces != null && intermediatePlaces.size() > 0 && !intermediatePlaces.get(0).equals("")) {
    request.setIntermediatePlacesFromStrings(intermediatePlaces);
  }
  if (intermediatePlacesOrdered == null)   intermediatePlacesOrdered=request.intermediatePlacesOrdered;
  request.intermediatePlacesOrdered=intermediatePlacesOrdered;
  request.setPreferredRoutes(get(preferredRoutes,n,request.getPreferredRouteStr()));
  request.setOtherThanPreferredRoutesPenalty(get(otherThanPreferredRoutesPenalty,n,request.otherThanPreferredRoutesPenalty));
  request.setPreferredAgencies(get(preferredAgencies,n,request.getPreferredAgenciesStr()));
  request.setUnpreferredRoutes(get(unpreferredRoutes,n,request.getUnpreferredRouteStr()));
  request.setUnpreferredAgencies(get(unpreferredAgencies,n,request.getUnpreferredAgenciesStr()));
  request.setWalkBoardCost(get(walkBoardCost,n,request.walkBoardCost));
  request.setBikeBoardCost(get(bikeBoardCost,n,request.bikeBoardCost));
  request.setBannedRoutes(get(bannedRoutes,n,request.getBannedRouteStr()));
  request.setBannedAgencies(get(bannedAgencies,n,request.getBannedAgenciesStr()));
  HashMap<AgencyAndId,BannedStopSet> bannedTripMap=makeBannedTripMap(get(bannedTrips,n,null));
  if (bannedTripMap != null) {
    request.bannedTrips=bannedTripMap;
  }
  request.setBannedStops(get(bannedStops,n,request.getBannedStopsStr()));
  request.setBannedStopsHard(get(bannedStopsHard,n,request.getBannedStopsHardStr()));
  if (opt == OptimizeType.TRANSFERS) {
    opt=OptimizeType.QUICK;
    request.transferPenalty=get(transferPenalty,n,0) + 1800;
  }
 else {
    request.transferPenalty=(get(transferPenalty,n,request.transferPenalty));
  }
  request.batch=(get(batch,n,new Boolean(request.batch)));
  request.setOptimize(opt);
  modes.get(0).applyToRequest(request);
  if (request.allowBikeRental && bikeSpeedParam == -1) {
    request.bikeSpeed=4.3;
  }
  request.boardSlack=(get(boardSlack,n,request.boardSlack));
  request.alightSlack=(get(alightSlack,n,request.alightSlack));
  request.transferSlack=(get(minTransferTime,n,request.transferSlack));
  request.nonpreferredTransferPenalty=get(nonpreferredTransferPenalty,n,request.nonpreferredTransferPenalty);
  if (request.boardSlack + request.alightSlack > request.transferSlack) {
    throw new RuntimeException("Invalid parameters: transfer slack must " + "be greater than or equal to board slack plus alight slack");
  }
  request.setMaxTransfers(get(maxTransfers,n,request.maxTransfers));
  final long NOW_THRESHOLD_MILLIS=15 * 60 * 60* 1000;
  boolean tripPlannedForNow=Math.abs(request.getDateTime().getTime() - new Date().getTime()) < NOW_THRESHOLD_MILLIS;
  request.useBikeRentalAvailabilityInformation=(tripPlannedForNow);
  if (request.intermediatePlaces != null && (request.modes.isTransit() || (request.modes.getWalk() && request.modes.getBicycle())))   throw new UnsupportedOperationException("TSP is not supported for transit or bike share trips");
  String startTransitStopId=get(this.startTransitStopId,n,AgencyAndId.convertToString(request.startingTransitStopId));
  if (startTransitStopId != null && !"".equals(startTransitStopId)) {
    request.startingTransitStopId=(AgencyAndId.convertFromString(startTransitStopId));
  }
  String startTransitTripId=get(this.startTransitTripId,n,AgencyAndId.convertToString(request.startingTransitTripId));
  if (startTransitTripId != null && !"".equals(startTransitTripId)) {
    request.startingTransitTripId=(AgencyAndId.convertFromString(startTransitTripId));
  }
  request.clampInitialWait=(get(clampInitialWait,n,request.clampInitialWait));
  request.reverseOptimizeOnTheFly=(get(reverseOptimizeOnTheFly,n,request.reverseOptimizeOnTheFly));
  request.ignoreRealtimeUpdates=(get(ignoreRealtimeUpdates,n,request.ignoreRealtimeUpdates));
  request.disableRemainingWeightHeuristic=(get(disableRemainingWeightHeuristic,n,request.disableRemainingWeightHeuristic));
  String localeSpec=get(locale,n,"en");
  String[] localeSpecParts=localeSpec.split("_");
  Locale locale;
switch (localeSpecParts.length) {
case 1:
    locale=new Locale(localeSpecParts[0]);
  break;
case 2:
locale=new Locale(localeSpecParts[0]);
break;
case 3:
locale=new Locale(localeSpecParts[0]);
break;
default :
LOG.debug("Bogus locale " + localeSpec + ", defaulting to en");
locale=new Locale("en");
}
request.locale=locale;
return request;
}
