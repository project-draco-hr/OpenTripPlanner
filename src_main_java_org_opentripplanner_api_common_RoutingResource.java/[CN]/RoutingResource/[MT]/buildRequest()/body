{
  Router router=otpServer.getRouter(routerId);
  RoutingRequest request=router.defaultRoutingRequest.clone();
  request.routerId=routerId;
  if (fromPlace != null)   request.setFromString(fromPlace);
  if (toPlace != null)   request.setToString(toPlace);
{
    TimeZone tz;
    tz=router.graph.getTimeZone();
    if (date == null && time != null) {
      LOG.debug("parsing ISO datetime {}",time);
      try {
        DatatypeFactory df=javax.xml.datatype.DatatypeFactory.newInstance();
        XMLGregorianCalendar xmlGregCal=df.newXMLGregorianCalendar(time);
        GregorianCalendar gregCal=xmlGregCal.toGregorianCalendar();
        if (xmlGregCal.getTimezone() == DatatypeConstants.FIELD_UNDEFINED) {
          gregCal.setTimeZone(tz);
        }
        Date d2=gregCal.getTime();
        request.setDateTime(d2);
      }
 catch (      DatatypeConfigurationException e) {
        request.setDateTime(date,time,tz);
      }
    }
 else {
      request.setDateTime(date,time,tz);
    }
  }
  if (wheelchair != null)   request.setWheelchairAccessible(wheelchair);
  if (numItineraries != null)   request.setNumItineraries(numItineraries);
  if (maxWalkDistance != null) {
    request.setMaxWalkDistance(maxWalkDistance);
    request.maxTransferWalkDistance=maxWalkDistance;
  }
  if (maxPreTransitTime != null)   request.setMaxPreTransitTime(maxPreTransitTime);
  if (walkReluctance != null)   request.setWalkReluctance(walkReluctance);
  if (waitReluctance != null)   request.setWaitReluctance(waitReluctance);
  if (waitAtBeginningFactor != null)   request.setWaitAtBeginningFactor(waitAtBeginningFactor);
  if (walkSpeed != null)   request.walkSpeed=walkSpeed;
  if (bikeSpeed != null)   request.bikeSpeed=bikeSpeed;
  if (bikeSwitchTime != null)   request.bikeSwitchTime=bikeSwitchTime;
  if (bikeSwitchCost != null)   request.bikeSwitchCost=bikeSwitchCost;
  if (optimize != null) {
    request.setOptimize(optimize);
    if (optimize == OptimizeType.TRIANGLE) {
      if (triangleSafetyFactor == null || triangleSlopeFactor == null || triangleTimeFactor == null) {
        throw new ParameterException(Message.UNDERSPECIFIED_TRIANGLE);
      }
      if (triangleSafetyFactor == null && triangleSlopeFactor == null && triangleTimeFactor == null) {
        throw new ParameterException(Message.TRIANGLE_VALUES_NOT_SET);
      }
      if (Math.abs(triangleSafetyFactor + triangleSlopeFactor + triangleTimeFactor - 1) > Math.ulp(1) * 3) {
        throw new ParameterException(Message.TRIANGLE_NOT_AFFINE);
      }
      request.setTriangleSafetyFactor(triangleSafetyFactor);
      request.setTriangleSlopeFactor(triangleSlopeFactor);
      request.setTriangleTimeFactor(triangleTimeFactor);
    }
  }
  if (arriveBy != null)   request.setArriveBy(arriveBy);
  if (showIntermediateStops != null)   request.showIntermediateStops=showIntermediateStops;
  if (intermediatePlaces != null)   request.setIntermediatePlacesFromStrings(intermediatePlaces);
  if (preferredRoutes != null)   request.setPreferredRoutes(preferredRoutes);
  if (otherThanPreferredRoutesPenalty != null)   request.setOtherThanPreferredRoutesPenalty(otherThanPreferredRoutesPenalty);
  if (preferredAgencies != null)   request.setPreferredAgencies(preferredAgencies);
  if (unpreferredRoutes != null)   request.setUnpreferredRoutes(unpreferredRoutes);
  if (unpreferredAgencies != null)   request.setUnpreferredAgencies(unpreferredAgencies);
  if (walkBoardCost != null)   request.setWalkBoardCost(walkBoardCost);
  if (bikeBoardCost != null)   request.setBikeBoardCost(bikeBoardCost);
  if (bannedRoutes != null)   request.setBannedRoutes(bannedRoutes);
  if (bannedAgencies != null)   request.setBannedAgencies(bannedAgencies);
  HashMap<AgencyAndId,BannedStopSet> bannedTripMap=makeBannedTripMap(bannedTrips);
  if (bannedTripMap != null)   request.bannedTrips=bannedTripMap;
  if (bannedStops != null)   request.setBannedStops(bannedStops);
  if (bannedStopsHard != null)   request.setBannedStopsHard(bannedStopsHard);
  if (transferPenalty != null)   request.transferPenalty=transferPenalty;
  if (optimize == OptimizeType.TRANSFERS) {
    optimize=OptimizeType.QUICK;
    request.transferPenalty+=1800;
  }
  if (batch != null)   request.batch=batch;
  if (optimize != null)   request.setOptimize(optimize);
  if (modes != null) {
    modes.applyToRoutingRequest(request);
    request.setModes(request.modes);
  }
  if (request.allowBikeRental && bikeSpeed == null) {
    request.bikeSpeed=4.3;
  }
  if (boardSlack != null)   request.boardSlack=boardSlack;
  if (alightSlack != null)   request.alightSlack=alightSlack;
  if (minTransferTime != null)   request.transferSlack=minTransferTime;
  if (nonpreferredTransferPenalty != null)   request.nonpreferredTransferPenalty=nonpreferredTransferPenalty;
  if (request.boardSlack + request.alightSlack > request.transferSlack) {
    throw new RuntimeException("Invalid parameters: " + "transfer slack must be greater than or equal to board slack plus alight slack");
  }
  if (maxTransfers != null)   request.maxTransfers=maxTransfers;
  final long NOW_THRESHOLD_MILLIS=15 * 60 * 60* 1000;
  boolean tripPlannedForNow=Math.abs(request.getDateTime().getTime() - new Date().getTime()) < NOW_THRESHOLD_MILLIS;
  request.useBikeRentalAvailabilityInformation=(tripPlannedForNow);
  if (startTransitStopId != null && !startTransitStopId.isEmpty())   request.startingTransitStopId=AgencyAndId.convertFromString(startTransitStopId);
  if (startTransitTripId != null && !startTransitTripId.isEmpty())   request.startingTransitTripId=AgencyAndId.convertFromString(startTransitTripId);
  if (clampInitialWait != null)   request.clampInitialWait=clampInitialWait;
  if (reverseOptimizeOnTheFly != null)   request.reverseOptimizeOnTheFly=reverseOptimizeOnTheFly;
  if (ignoreRealtimeUpdates != null)   request.ignoreRealtimeUpdates=ignoreRealtimeUpdates;
  if (disableRemainingWeightHeuristic != null)   request.disableRemainingWeightHeuristic=disableRemainingWeightHeuristic;
  request.locale=ResourceBundleSingleton.INSTANCE.getLocale(locale);
  return request;
}
