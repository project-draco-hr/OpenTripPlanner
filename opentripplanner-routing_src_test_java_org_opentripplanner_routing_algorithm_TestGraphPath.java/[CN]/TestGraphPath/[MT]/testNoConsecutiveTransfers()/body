{
  Vertex stop_n=graph.getVertex("agency_N");
  Vertex stop_l=graph.getVertex("agency_L");
  TraverseOptions options=new TraverseOptions();
  options.setGtfsContext(context);
  ShortestPathTree spt;
  GraphPath path;
  State s0=new State(new GregorianCalendar(2009,8,7,15,0,0).getTimeInMillis());
  spt=AStar.getShortestPathTree(graph,stop_n.getLabel(),stop_l.getLabel(),s0,options);
  path=spt.getPath(stop_l);
  assertNotNull(path);
  boolean transferAllowed=true;
  for (  SPTEdge e : path.edges) {
    if (!transferAllowed) {
      assertFalse(e.payload instanceof Transfer);
    }
    if (e.payload instanceof Alight || e.payload instanceof PatternAlight) {
      transferAllowed=true;
    }
 else {
      transferAllowed=false;
    }
  }
  options.setArriveBy(true);
  State s1=new State(new GregorianCalendar(2009,8,7,12,0,0).getTimeInMillis());
  spt=AStar.getShortestPathTreeBack(graph,stop_n.getLabel(),stop_l.getLabel(),s1,options);
  path=spt.getPath(stop_n);
  path.reverse();
  assertNotNull(path);
  transferAllowed=true;
  for (  SPTEdge e : path.edges) {
    if (!transferAllowed) {
      assertFalse(e.payload instanceof Transfer);
    }
    if (e.payload instanceof Alight || e.payload instanceof PatternAlight) {
      transferAllowed=true;
    }
 else {
      transferAllowed=false;
    }
  }
}
