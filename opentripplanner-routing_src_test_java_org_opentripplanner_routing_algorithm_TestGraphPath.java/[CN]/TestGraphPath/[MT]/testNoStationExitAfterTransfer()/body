{
  StreetVertex v1=new StreetVertex("fake_intersection",GeometryUtils.makeLineString(-74,41.000001,-73.000002,41.000001),"fake intersection",10,false);
  StreetVertex v2=new StreetVertex("fake_intersection2",GeometryUtils.makeLineString(-73.000002,41.000001,-73.000003,41.000001),"fake intersection2",10,false);
  graph.addVertex(v1);
  graph.addVertex(v2);
  TurnEdge street=new TurnEdge(v1,v2);
  graph.addEdge(street);
  NetworkLinker nl=new NetworkLinker(graph);
  nl.createLinkage();
  Vertex startVertex=graph.getVertex("agency_N");
  Vertex destVertex=graph.getVertex("fake_intersection2");
  TraverseOptions options=new TraverseOptions();
  options.setGtfsContext(context);
  ShortestPathTree spt;
  GraphPath path;
  State s0=new State(new GregorianCalendar(2009,8,7,15,0,0).getTimeInMillis());
  spt=AStar.getShortestPathTree(graph,startVertex.getLabel(),destVertex.getLabel(),s0,options);
  path=spt.getPath(destVertex);
  assertNotNull(path);
  Edge prevEdge=null;
  for (  SPTEdge e : path.edges) {
    if (prevEdge instanceof Transfer) {
      assertFalse(e.payload instanceof StreetTransitLink);
    }
    prevEdge=e.payload;
  }
}
