{
  if (finished)   return;
  for (int i=0; i < HEURISTIC_STEPS_PER_MAIN_STEP; ++i) {
    if (transitQueue.empty()) {
      finished=true;
      break;
    }
    int uWeight=(int)transitQueue.peek_min_key();
    Vertex u=transitQueue.extract_min();
    maxWeightSeen=uWeight;
    for (    Edge e : routingRequest.arriveBy ? u.getOutgoing() : u.getIncoming()) {
      if (e instanceof StreetTransitLink)       continue;
      Vertex v=routingRequest.arriveBy ? e.getToVertex() : e.getFromVertex();
      double edgeWeight=e.weightLowerBound(routingRequest);
      if (Double.isInfinite(edgeWeight))       continue;
      double new_vWeight=uWeight + edgeWeight;
      double old_vWeight=verticesNearTarget.get(v);
      if (new_vWeight < old_vWeight) {
        verticesNearTarget.put(v,(int)new_vWeight);
        transitQueue.insert(v,new_vWeight);
      }
    }
  }
}
