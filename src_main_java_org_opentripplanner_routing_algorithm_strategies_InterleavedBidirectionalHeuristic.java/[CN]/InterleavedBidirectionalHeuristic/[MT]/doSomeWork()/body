{
  if (finished)   return;
  for (int i=0; i < HEURISTIC_STEPS_PER_MAIN_STEP; ++i) {
    if (transitQueue.empty()) {
      finished=true;
      break;
    }
    int uWeight=(int)transitQueue.peek_min_key();
    Vertex u=transitQueue.extract_min();
    maxWeightSeen=uWeight;
    double uWeightOld=verticesNearTarget.get(u);
    if (uWeight < uWeightOld) {
      verticesNearTarget.put(u,uWeight);
    }
 else {
      continue;
    }
    for (    Edge e : routingRequest.arriveBy ? u.getOutgoing() : u.getIncoming()) {
      if (e instanceof StreetTransitLink) {
        continue;
      }
      Vertex v=routingRequest.arriveBy ? e.getToVertex() : e.getFromVertex();
      double edgeWeight=e.weightLowerBound(routingRequest);
      if (Double.isInfinite(edgeWeight)) {
        continue;
      }
      double vWeight=uWeight + edgeWeight;
      double vWeightOld=verticesNearTarget.get(v);
      if (vWeight < vWeightOld) {
        transitQueue.insert(v,vWeight);
      }
    }
  }
}
