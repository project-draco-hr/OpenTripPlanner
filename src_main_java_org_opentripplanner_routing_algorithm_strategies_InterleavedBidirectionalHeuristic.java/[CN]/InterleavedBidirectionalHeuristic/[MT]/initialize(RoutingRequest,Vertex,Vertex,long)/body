{
  if (target == this.target) {
    LOG.debug("reusing existing heuristic");
    return;
  }
  long start=System.currentTimeMillis();
  this.target=target;
  int nVertices=graph.countVertices();
  weights=Maps.newHashMapWithExpectedSize(((int)Math.log(nVertices)) + 1);
  this.options=options;
  this.origin=origin;
  options.softWalkLimiting=false;
  options.softPreTransitLimiting=false;
  LOG.debug("initializing heuristic computation thread");
  List<State> search=streetSearch(options,false,abortTime);
  if (search == null)   return;
  LOG.debug("end foreward street search {} ms",System.currentTimeMillis() - start);
  q=new BinHeap<Vertex>();
  search=streetSearch(options,true,abortTime);
  if (search == null)   return;
  for (  State stopState : search) {
    q.insert(stopState.getVertex(),stopState.getWeight());
  }
  LOG.debug("end backward street search {} ms",System.currentTimeMillis() - start);
  options.setMaxWalkDistance(Double.POSITIVE_INFINITY);
  options.setMaxPreTransitTime(Integer.MAX_VALUE);
  LOG.debug("initialized SSSP");
  options.rctx.debugOutput.finishedPrecalculating();
}
