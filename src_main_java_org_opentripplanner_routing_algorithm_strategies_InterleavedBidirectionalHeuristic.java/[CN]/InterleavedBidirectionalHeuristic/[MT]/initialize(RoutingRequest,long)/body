{
  Vertex target=request.rctx.target;
  if (target == this.target) {
    LOG.debug("Reusing existing heuristic, the target vertex has not changed.");
    return;
  }
  LOG.debug("Initializing heuristic computation.");
  this.graph=request.rctx.graph;
  long start=System.currentTimeMillis();
  this.target=target;
  this.routingRequest=request;
  request.softWalkLimiting=false;
  request.softPreTransitLimiting=false;
  transitQueue=new BinHeap<>();
  TObjectDoubleMap<Vertex> forwardStreetSearchResults=streetSearch(request,false,abortTime);
  if (forwardStreetSearchResults == null) {
    return;
  }
  preTransitVertices=forwardStreetSearchResults.keySet();
  LOG.debug("end forward street search {} ms",System.currentTimeMillis() - start);
  postBoardingWeights=streetSearch(request,true,abortTime);
  if (postBoardingWeights == null) {
    return;
  }
  LOG.debug("end backward street search {} ms",System.currentTimeMillis() - start);
  request.setMaxWalkDistance(Double.POSITIVE_INFINITY);
  request.setMaxPreTransitTime(Integer.MAX_VALUE);
  LOG.debug("initialized SSSP");
  request.rctx.debugOutput.finishedPrecalculating();
}
