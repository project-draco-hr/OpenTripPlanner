{
  rr=rr.clone();
  if (fromTarget)   rr.setArriveBy(!rr.arriveBy);
  List<State> stopStates=Lists.newArrayList();
  ShortestPathTree spt=new BasicShortestPathTree(rr);
  BinHeap<State> pq=new BinHeap<State>();
  Vertex initVertex=fromTarget ? rr.rctx.target : rr.rctx.origin;
  State initState=new State(initVertex,rr);
  pq.insert(initState,0);
  while (!pq.empty()) {
    if (abortTime < Long.MAX_VALUE && System.currentTimeMillis() > abortTime) {
      return null;
    }
    State s=pq.extract_min();
    double w=s.getWeight();
    Vertex v=s.getVertex();
    if (v instanceof TransitVertex) {
      if (v instanceof TransitStationStop) {
        stopStates.add(s);
      }
      continue;
    }
    if (!fromTarget) {
      weights.put(v,-1);
    }
 else {
      double old_weight=weights.get(v);
      if (old_weight == -1) {
        weights.put(v,-2);
      }
 else       if (w < old_weight) {
        weights.put(v,w);
      }
    }
    for (    Edge e : rr.arriveBy ? v.getIncoming() : v.getOutgoing()) {
      State s1=e.traverse(s);
      if (s1 == null)       continue;
      if (spt.add(s1)) {
        pq.insert(s1,s1.getWeight());
      }
    }
  }
  LOG.debug("hit stops: {}",stopStates);
  return stopStates;
}
