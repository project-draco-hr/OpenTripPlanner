{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list32=iprot.readListBegin();
          struct.edges=new ArrayList<org.opentripplanner.api.thrift.definition.GraphEdge>(_list32.size);
          for (int _i33=0; _i33 < _list32.size; ++_i33) {
            org.opentripplanner.api.thrift.definition.GraphEdge _elem34;
            _elem34=new org.opentripplanner.api.thrift.definition.GraphEdge();
            _elem34.read(iprot);
            struct.edges.add(_elem34);
          }
          iprot.readListEnd();
        }
        struct.setEdgesIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 10:
  if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
    struct.compute_time_millis=iprot.readI64();
    struct.setCompute_time_millisIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
