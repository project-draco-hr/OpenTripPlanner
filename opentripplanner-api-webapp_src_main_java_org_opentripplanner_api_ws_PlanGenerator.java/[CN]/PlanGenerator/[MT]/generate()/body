{
  checkLocationsAccessible(options);
  List<GraphPath> paths=null;
  boolean tooSloped=false;
  try {
    List<NamedPlace> intermediates=options.getIntermediatePlaces();
    if (intermediates.size() == 0) {
      paths=pathService.plan(options.getFromPlace(),options.getToPlace(),options.getDateTime(),options,options.getNumItineraries());
      if (paths == null && options.getWheelchair()) {
        options.maxSlope=Double.MAX_VALUE;
        paths=pathService.plan(options.getFromPlace(),options.getToPlace(),options.getDateTime(),options,options.getNumItineraries());
        tooSloped=true;
      }
    }
 else {
      paths=pathService.plan(options.getFromPlace(),options.getToPlace(),intermediates,options.isIntermediatePlacesOrdered(),options.getDateTime(),options);
    }
  }
 catch (  VertexNotFoundException e) {
    LOG.info("Vertex not found: " + options.getFrom() + " : "+ options.getTo(),e);
    throw e;
  }
  if (paths == null || paths.size() == 0) {
    LOG.info("Path not found: " + options.getFrom() + " : "+ options.getTo());
    throw new PathNotFoundException();
  }
  TripPlan plan=generatePlan(paths,options);
  if (plan != null) {
    for (    Itinerary i : plan.itinerary) {
      i.tooSloped=tooSloped;
      if (i.legs.size() == 0) {
        LOG.warn("itinerary has no legs");
        continue;
      }
      Leg firstLeg=i.legs.get(0);
      firstLeg.from.orig=options.getFromName();
      Leg lastLeg=i.legs.get(i.legs.size() - 1);
      lastLeg.to.orig=options.getToName();
    }
  }
  return plan;
}
