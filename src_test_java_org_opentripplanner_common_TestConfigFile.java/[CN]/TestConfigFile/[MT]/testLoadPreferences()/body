{
  OTPConfigPreferences config=OTPConfigPreferences.fromFile(VALID);
  assertNotNull(config);
  assertTrue(config.nodeExists("/origins/filters/graphGeographicFilter"));
  assertTrue(config.nodeExists("/request"));
  assertFalse(config.nodeExists("/origins/filters/badFilter"));
  String val;
  Preferences node;
  node=config.node("/origins/filters/graphGeographicFilter");
  assertTrue(node.getBoolean("stopsOnly",false));
  assertTrue(node.get("stopsOnly","default").equals("true"));
  assertTrue(node.get("nothing","default").equals("default"));
  node=config.node("batch");
  assertEquals(node.getInt("threshold",999),3000);
  assertEquals(node.getDouble("pi",Math.PI),Math.PI);
  node=config.node("origins/filters");
  assertEquals("/origins/filters",node.absolutePath());
  node=config.node("/request");
  assertTrue(Arrays.asList(node.keys()).contains("routerId"));
  assertFalse(Arrays.asList(node.keys()).contains("missingThing"));
  assertEquals(config.childrenNames().length,4);
  assertEquals(config.keys().length,3);
  for (int i=1; i <= 6; i++) {
    String filename=String.format("src/test/resources/org/opentripplanner/common/invalid%d.config",i);
    config=OTPConfigPreferences.fromFile(filename);
    assertNull("For invalid input, factory method should return null.",config);
  }
}
