{
  TripDescriptor tripDescriptor=tripUpdate.getTrip();
  if (!tripDescriptor.hasTripId()) {
    LOG.warn("No trip id found for ADDED trip, skipping.");
    return false;
  }
  String tripId=tripDescriptor.getTripId();
  if (graph.index.tripForId.containsKey(tripId)) {
    LOG.warn("Graph already contains trip id of ADDED trip, skipping.");
    return false;
  }
  Long previousTime=null;
  List<StopTimeUpdate> stopTimeUpdates=tripUpdate.getStopTimeUpdateList();
  List<TransitStop> transitStops=new ArrayList<>(stopTimeUpdates.size());
  for (int index=0; index < stopTimeUpdates.size(); ++index) {
    StopTimeUpdate stopTimeUpdate=stopTimeUpdates.get(index);
    if (stopTimeUpdate.hasArrival() && stopTimeUpdate.getArrival().hasTime()) {
      Long time=stopTimeUpdate.getArrival().getTime();
      if (previousTime != null && previousTime > time) {
        LOG.warn("ADDED trip contains decreasing times, skipping.");
        return false;
      }
      previousTime=time;
    }
 else {
      if (index > 0) {
        LOG.warn("ADDED trip misses arrival time, skipping.");
        return false;
      }
    }
    if (stopTimeUpdate.hasDeparture() && stopTimeUpdate.getDeparture().hasTime()) {
      Long time=stopTimeUpdate.getDeparture().getTime();
      if (previousTime != null && previousTime > time) {
        LOG.warn("ADDED trip contains decreasing times, skipping.");
        return false;
      }
      previousTime=time;
    }
 else {
      if (index < stopTimeUpdates.size() - 1) {
        LOG.warn("ADDED trip misses departure time, skipping.");
        return false;
      }
    }
    if (stopTimeUpdate.hasScheduleRelationship() && stopTimeUpdate.getScheduleRelationship() != ScheduleRelationship.SCHEDULED) {
      LOG.warn("ADDED trip has invalid schedule relationship, skipping.");
      return false;
    }
  }
  LOG.warn("Added trips are currently unsupported. Skipping TripUpdate.");
  return false;
}
