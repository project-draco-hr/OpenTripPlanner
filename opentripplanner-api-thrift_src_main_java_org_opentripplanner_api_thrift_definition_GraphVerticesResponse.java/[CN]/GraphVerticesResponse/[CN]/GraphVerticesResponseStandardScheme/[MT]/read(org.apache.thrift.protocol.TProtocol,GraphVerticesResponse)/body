{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list48=iprot.readListBegin();
          struct.vertices=new ArrayList<org.opentripplanner.api.thrift.definition.GraphVertex>(_list48.size);
          for (int _i49=0; _i49 < _list48.size; ++_i49) {
            org.opentripplanner.api.thrift.definition.GraphVertex _elem50;
            _elem50=new org.opentripplanner.api.thrift.definition.GraphVertex();
            _elem50.read(iprot);
            struct.vertices.add(_elem50);
          }
          iprot.readListEnd();
        }
        struct.setVerticesIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 10:
  if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
    struct.compute_time_millis=iprot.readI64();
    struct.setCompute_time_millisIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
