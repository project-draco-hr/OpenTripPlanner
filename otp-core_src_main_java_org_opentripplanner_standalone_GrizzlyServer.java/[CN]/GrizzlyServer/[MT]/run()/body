{
  LOG.info("Starting OTP Grizzly server on port {} using graphs at {}",params.port,params.graphDirectory);
  HttpServer httpServer=new HttpServer();
  NetworkListener networkListener=new NetworkListener("otp_listener","0.0.0.0",params.port);
  ThreadPoolConfig threadPoolConfig=ThreadPoolConfig.defaultConfig().setCorePoolSize(1).setMaxPoolSize(Runtime.getRuntime().availableProcessors());
  networkListener.getTransport().setWorkerThreadPoolConfig(threadPoolConfig);
  httpServer.addListener(networkListener);
  ResourceConfig rc=new PackagesResourceConfig("org.opentripplanner.api");
  rc.getProperties().put(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,new String[]{AuthFilter.class.getName(),RewriteFilter.class.getName()});
  rc.getProperties().put(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS,new String[]{JsonpFilter.class.getName()});
  HttpHandler handler=ContainerFactory.createContainer(HttpHandler.class,rc,iocFactory);
  httpServer.getServerConfiguration().addHttpHandler(handler,"/otp-rest-servlet/");
  HttpHandler staticHandler=makeClientStaticHandler();
  httpServer.getServerConfiguration().addHttpHandler(staticHandler,"/");
  GraphService gs=(GraphService)iocFactory.getComponentProvider(GraphService.class).getInstance();
  Graph graph=gs.getGraph();
  httpServer.getServerConfiguration().addHttpHandler(new OTPHttpHandler(graph),"/test/*");
  for (  NetworkListener l : httpServer.getListeners()) {
    l.getFileCache().setEnabled(false);
  }
  try {
    httpServer.start();
    LOG.info("Grizzly server running.");
    Thread.currentThread().join();
  }
 catch (  BindException be) {
    LOG.error("Cannot bind to port {}. Is it already in use?",params.port);
  }
catch (  IOException ioe) {
    LOG.error("IO exception while starting server.");
  }
catch (  InterruptedException ie) {
    LOG.info("Interrupted, shutting down.");
    httpServer.stop();
  }
}
