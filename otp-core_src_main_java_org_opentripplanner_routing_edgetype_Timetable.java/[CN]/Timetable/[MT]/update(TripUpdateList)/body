{
  try {
    int tripIndex=getTripIndex(tripUpdate.getTripId());
    if (tripIndex == -1) {
      LOG.info("tripId {} not found in pattern.",tripUpdate.getTripId());
      return false;
    }
 else {
      LOG.trace("tripId {} found at index {} (in scheduled timetable)",tripUpdate.getTripId(),tripIndex);
    }
    TripTimes existingTimes=getTripTimes(tripIndex);
    ScheduledTripTimes scheduledTimes=existingTimes.getScheduledTripTimes();
    TripTimes newTimes;
    if (tripUpdate.isCancellation()) {
      newTimes=new CanceledTripTimes(scheduledTimes);
    }
 else     if (tripUpdate.hasDelay()) {
      int stopIndex=tripUpdate.findUpdateStopIndex(pattern);
      if (stopIndex == TripUpdateList.MATCH_FAILED) {
        LOG.warn("Unable to match update block to stopIds.");
        return false;
      }
      int delay=tripUpdate.getUpdates().get(0).getDelay();
      newTimes=new DecayingDelayTripTimes(scheduledTimes,stopIndex,delay);
    }
 else {
      int stopIndex=tripUpdate.findUpdateStopIndex(pattern);
      if (stopIndex == TripUpdateList.MATCH_FAILED) {
        LOG.warn("Unable to match update block to stopIds.");
        return false;
      }
      newTimes=new UpdatedTripTimes(scheduledTimes,tripUpdate,stopIndex);
      if (!newTimes.timesIncreasing()) {
        LOG.warn("Resulting UpdatedTripTimes has non-increasing times. " + "Falling back on DecayingDelayTripTimes.");
        LOG.warn(tripUpdate.toString());
        LOG.warn(newTimes.toString());
        int delay=newTimes.getDepartureDelay(stopIndex);
        newTimes=new DecayingDelayTripTimes(scheduledTimes,stopIndex,delay);
        LOG.warn(newTimes.toString());
        if (!newTimes.timesIncreasing()) {
          LOG.error("Even these trip times are non-increasing. Underlying schedule problem?");
          return false;
        }
      }
    }
    this.tripTimes.set(tripIndex,newTimes);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}
