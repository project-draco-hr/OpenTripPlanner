{
  Geometry g=(Geometry)st.getGeometry();
  Coordinate[] coords=g.getCoordinates();
  List<Coordinate> coordList=new LinkedList<Coordinate>();
  double edgeLenD=0, edgeLenM=0;
  for (int i=0; i < coords.length - 1; i++) {
    edgeLenD+=Point2D.distance(coords[i].x,coords[i].y,coords[i + 1].x,coords[i + 1].y);
    edgeLenM+=haversine(coords[i].x,coords[i].y,coords[i + 1].x,coords[i + 1].y);
  }
  coordList.add(new Coordinate(0,getElevation(coords[0])));
  for (double x=sampleFreqM; x < edgeLenM; x+=sampleFreqM) {
    if (edgeLenM - x < sampleFreqM / 2)     continue;
    Coordinate internal=getPointAlongEdge(coords,edgeLenD,x / edgeLenM);
    coordList.add(new Coordinate(x,getElevation(internal)));
  }
  coordList.add(new Coordinate(edgeLenM,getElevation(coords[coords.length - 1])));
  Coordinate coordArr[]=new Coordinate[coordList.size()];
  PackedCoordinateSequence elevPCS=new PackedCoordinateSequence.Double(coordList.toArray(coordArr));
  st.setElevationProfile(elevPCS);
}
