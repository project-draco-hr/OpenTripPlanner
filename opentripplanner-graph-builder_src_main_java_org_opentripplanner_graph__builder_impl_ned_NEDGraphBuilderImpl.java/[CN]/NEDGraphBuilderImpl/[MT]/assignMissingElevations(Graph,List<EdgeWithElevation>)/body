{
  log.debug("Assigning missing elevations");
  BinHeap<ElevationRepairState> pq=new BinHeap<ElevationRepairState>();
  BinHeap<ElevationRepairState> secondary_pq=new BinHeap<ElevationRepairState>();
  HashMap<Vertex,Double> elevations=new HashMap<Vertex,Double>();
  for (  EdgeWithElevation e : edgesWithElevation) {
    PackedCoordinateSequence profile=e.getElevationProfile();
    if (!elevations.containsKey(e.getFromVertex())) {
      double firstElevation=profile.getOrdinate(0,1);
      ElevationRepairState state=new ElevationRepairState(null,null,e.getFromVertex(),0,firstElevation);
      pq.insert(state,0);
      elevations.put(e.getFromVertex(),firstElevation);
    }
    if (!elevations.containsKey(e.getToVertex())) {
      double lastElevation=profile.getOrdinate(profile.size() - 1,1);
      ElevationRepairState state=new ElevationRepairState(null,null,e.getToVertex(),0,lastElevation);
      pq.insert(state,0);
      elevations.put(e.getToVertex(),lastElevation);
    }
  }
  while (!pq.empty()) {
    double key=pq.peek_min_key();
    ElevationRepairState state=pq.extract_min();
    if (pq.empty() && secondary_pq != null) {
      pq=secondary_pq;
      secondary_pq=null;
    }
    if (key != 0 && elevations.containsKey(state.vertex)) {
      continue;
    }
    ElevationRepairState curState=state;
    Vertex initialVertex=null;
    while (curState != null) {
      initialVertex=curState.vertex;
      curState=curState.backState;
    }
    double bestDistance=Double.MAX_VALUE;
    double bestElevation=0;
    for (    Edge e : state.vertex.getOutgoing()) {
      if (!(e instanceof EdgeWithElevation)) {
        continue;
      }
      EdgeWithElevation edge=(EdgeWithElevation)e;
      Vertex tov=e.getToVertex();
      if (tov == initialVertex)       continue;
      Double elevation=elevations.get(tov);
      if (elevation != null) {
        double distance=e.getDistance();
        if (distance < bestDistance) {
          bestDistance=distance;
          bestElevation=elevation;
        }
      }
 else {
        ElevationRepairState newState=new ElevationRepairState(edge,state,tov,e.getDistance() + state.distance,state.initialElevation);
        pq.insert(newState,e.getDistance() + state.distance);
      }
    }
    for (    Edge e : state.vertex.getIncoming()) {
      if (!(e instanceof EdgeWithElevation)) {
        continue;
      }
      EdgeWithElevation edge=(EdgeWithElevation)e;
      Vertex fromv=e.getFromVertex();
      if (fromv == initialVertex)       continue;
      Double elevation=elevations.get(fromv);
      if (elevation != null) {
        double distance=e.getDistance();
        if (distance < bestDistance) {
          bestDistance=distance;
          bestElevation=elevation;
        }
      }
 else {
        ElevationRepairState newState=new ElevationRepairState(edge,state,fromv,e.getDistance() + state.distance,state.initialElevation);
        pq.insert(newState,e.getDistance() + state.distance);
      }
    }
    if (bestDistance == Double.MAX_VALUE && state.distance > 2000) {
      log.warn("While propagating elevations, hit 2km distance limit at " + state.vertex);
      bestDistance=state.distance;
      bestElevation=state.initialElevation;
    }
    if (bestDistance != Double.MAX_VALUE) {
      double totalDistance=bestDistance + state.distance;
      while (true) {
        if (totalDistance == 0)         elevations.put(state.vertex,bestElevation);
 else {
          double elevation=(bestElevation * state.distance + state.initialElevation * bestDistance) / totalDistance;
          elevations.put(state.vertex,elevation);
        }
        if (state.backState == null)         break;
        bestDistance+=state.backEdge.getDistance();
        state=state.backState;
        if (elevations.containsKey(state.vertex))         break;
      }
    }
  }
  for (  Vertex v : graph.getVertices()) {
    Double fromElevation=elevations.get(v);
    for (    Edge e : v.getOutgoing()) {
      if (e instanceof EdgeWithElevation) {
        EdgeWithElevation edge=((EdgeWithElevation)e);
        Double toElevation=elevations.get(edge.getToVertex());
        if (fromElevation == null || toElevation == null) {
          log.warn("Unexpectedly missing elevation for edge " + edge);
          continue;
        }
        if (edge.getElevationProfile() != null && edge.getElevationProfile().size() > 2) {
          continue;
        }
        Coordinate[] coords=new Coordinate[2];
        coords[0]=new Coordinate(0,fromElevation);
        coords[1]=new Coordinate(edge.getDistance(),toElevation);
        PackedCoordinateSequence profile=new PackedCoordinateSequence.Double(coords);
        if (edge.setElevationProfile(profile,true)) {
          log.trace(GraphBuilderAnnotation.register(graph,Variety.ELEVATION_FLATTENED,edge));
        }
      }
    }
  }
}
