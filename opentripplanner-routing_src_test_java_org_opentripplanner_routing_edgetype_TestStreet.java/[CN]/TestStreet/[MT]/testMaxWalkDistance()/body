{
  Graph graph=new Graph();
  Vertex tl=graph.addVertex(new Intersection("tl",-74,41));
  Vertex tr=graph.addVertex(new Intersection("tr",-73,41));
  Vertex bl=graph.addVertex(new Intersection("bl",-74,40));
  Vertex br=graph.addVertex(new Intersection("br",-73,40));
  Street top=new Street(tl,tr,20000);
  top.setGeometry(createGeometry(tl,tr));
  graph.addEdge(top);
  Street bottom=new Street(bl,br,20000);
  bottom.setGeometry(createGeometry(bl,br));
  graph.addEdge(bottom);
  Street left=new Street(bl,tl,20000);
  left.setGeometry(createGeometry(bl,tl));
  graph.addEdge(left);
  MockTransfer transfer=new MockTransfer(br,tr,99999);
  graph.addEdge(transfer);
  TraverseOptions options=new TraverseOptions();
  ShortestPathTree spt=AStar.getShortestPathTree(graph,bl,tr,new State(0),options);
  GraphPath path=spt.getPath(tr);
  assertNotNull(path);
  boolean found=false;
  for (  SPTVertex v : path.vertices) {
    if (v.mirror == br) {
      found=true;
    }
  }
  assertFalse(found);
  options.maxWalkDistance=10000;
  spt=AStar.getShortestPathTree(graph,bl,tr,new State(0),options);
  path=spt.getPath(tr);
  assertNotNull(path);
  found=false;
  for (  SPTVertex v : path.vertices) {
    if (v.mirror == br) {
      found=true;
    }
  }
  assertTrue(found);
}
