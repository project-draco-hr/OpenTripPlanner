{
  Graph gg=new Graph();
  try {
    File file=new File("src/test/resources/simple_streets/simple_streets.shp");
    DataStore dataStore=new ShapefileDataStore(file.toURI().toURL());
    String[] typeNames=dataStore.getTypeNames();
    String typeName=typeNames[0];
    FeatureSource<SimpleFeatureType,SimpleFeature> featureSource;
    featureSource=dataStore.getFeatureSource(typeName);
    ShapefileStreetLoader loader=new ShapefileStreetLoader(gg,featureSource);
    loader.load();
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertNull("got an exception");
  }
  Vertex northVertex=null;
  for (  Vertex v : gg.getVertices()) {
    if (northVertex == null || v.getCoordinate().y > northVertex.getCoordinate().y) {
      northVertex=v;
    }
  }
  Vertex eastVertex=null;
  for (  Vertex v : gg.getVertices()) {
    if (eastVertex == null || v.getCoordinate().x > eastVertex.getCoordinate().x) {
      eastVertex=v;
    }
  }
  Edge garfieldPlBack=eastVertex.getOutgoing().iterator().next();
  TraverseOptions toWalk=new TraverseOptions(TraverseMode.WALK);
  assertNotNull(garfieldPlBack.traverse(new State(),toWalk));
  TraverseOptions toCar=new TraverseOptions(TraverseMode.CAR);
  assertNull(garfieldPlBack.traverse(new State(),toCar));
  Edge garfieldPl=eastVertex.getIncoming().iterator().next();
  assertNotNull(garfieldPl.traverse(new State(),toCar));
  ShortestPathTree spt=Dijkstra.getShortestPathTree(gg,northVertex.getLabel(),eastVertex.getLabel(),new State(new GregorianCalendar(2009,8,7,12,0,0).getTimeInMillis()),new TraverseOptions());
  GraphPath path=spt.getPath(eastVertex);
  assertNotNull(path);
  Vector<SPTEdge> edges=path.edges;
  SPTEdge seventhAve=edges.elementAt(0);
  assertEquals("south",seventhAve.payload.getDirection());
  SPTEdge sptGarfieldPl=edges.elementAt(1);
  assertEquals("east",sptGarfieldPl.payload.getDirection());
  Narrative narrative=new Narrative(path);
  String direction=narrative.getSections().elementAt(0).getDirection();
  assertEquals("southeast",direction);
}
