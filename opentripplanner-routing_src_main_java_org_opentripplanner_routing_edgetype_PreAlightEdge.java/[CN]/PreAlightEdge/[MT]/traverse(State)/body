{
  RoutingContext rctx=s0.getContext();
  RoutingRequest options=s0.getOptions();
  if (options.isArriveBy()) {
    if (!options.getModes().isTransit())     return null;
    if (s0.isAlightedLocal()) {
      return null;
    }
    TransitStop toVertex=(TransitStop)getToVertex();
    if (toVertex.isLocal() && s0.isEverBoarded()) {
      return null;
    }
    if (s0.getNumBoardings() > options.maxTransfers)     return null;
    long t0=s0.getTimeSeconds();
    long slack;
    if (s0.isEverBoarded()) {
      slack=options.getTransferSlack() - options.getBoardSlack();
    }
 else {
      slack=options.getAlightSlack();
    }
    long alight_before=t0 - slack;
    int transfer_penalty=0;
    if (s0.getLastAlightedTime() != 0) {
      TransferTable transferTable=rctx.transferTable;
      if (transferTable.hasPreferredTransfers()) {
        transfer_penalty=options.nonpreferredTransferPenalty;
      }
      int transfer_time=transferTable.getTransferTime(getFromVertex(),s0.getPreviousStop());
      if (transfer_time == TransferTable.UNKNOWN_TRANSFER) {
      }
 else       if (transfer_time >= 0) {
        long table_alight_before=s0.getLastAlightedTime() - transfer_time;
        if (table_alight_before < alight_before)         alight_before=table_alight_before;
      }
 else       if (transfer_time == TransferTable.FORBIDDEN_TRANSFER) {
        return null;
      }
 else       if (transfer_time == TransferTable.PREFERRED_TRANSFER) {
        transfer_penalty=0;
      }
 else {
        throw new IllegalStateException("Undefined value in transfer table.");
      }
      if (transfer_time == 0) {
        transfer_penalty=0;
      }
    }
 else {
    }
    if (s0.isEverBoarded()) {
      transfer_penalty+=options.transferPenalty;
    }
    StateEditor s1=s0.edit(this);
    s1.setTime(alight_before);
    s1.setEverBoarded(true);
    long wait_cost=t0 - alight_before;
    s1.incrementWeight(wait_cost + transfer_penalty);
    s1.setBackMode(getMode());
    return s1.makeState();
  }
 else {
    StateEditor s1=s0.edit(this);
    TransitStop toVertex=(TransitStop)getToVertex();
    if (toVertex.isLocal()) {
      s1.setAlightedLocal(true);
    }
    s1.alightTransit();
    s1.incrementTimeInSeconds(options.getAlightSlack());
    s1.setBackMode(getMode());
    return s1.makeState();
  }
}
