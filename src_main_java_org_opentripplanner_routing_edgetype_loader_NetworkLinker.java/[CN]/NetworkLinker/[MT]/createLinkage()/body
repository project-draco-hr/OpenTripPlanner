{
  LOG.debug("creating linkages...");
  ArrayList<Vertex> vertices=new ArrayList<Vertex>();
  vertices.addAll(graph.getVertices());
  int nUnlinked=0;
  for (  TransitStop ts : Iterables.filter(vertices,TransitStop.class)) {
    boolean alreadyLinked=false;
    for (    Edge e : ts.getOutgoing()) {
      if (e instanceof StreetTransitLink) {
        alreadyLinked=true;
        break;
      }
    }
    if (alreadyLinked)     continue;
    if (ts.isEntrance() || !ts.hasEntrances()) {
      boolean wheelchairAccessible=ts.hasWheelchairEntrance();
      if (!networkLinkerLibrary.connectVertexToStreets(ts,wheelchairAccessible).getResult()) {
        LOG.debug(graph.addBuilderAnnotation(new StopUnlinked(ts)));
        nUnlinked+=1;
      }
    }
  }
  if (nUnlinked > 0) {
    LOG.warn("{} transit stops were not close enough to the street network to be connected to it.",nUnlinked);
  }
  for (  LinkedList<P2<StreetEdge>> toAdd : networkLinkerLibrary.replacements.values()) {
    for (    P2<StreetEdge> edges : toAdd) {
      StreetEdge edge1=edges.first;
      if (edge1.getToVertex().getLabel().startsWith("split ") || edge1.getFromVertex().getLabel().startsWith("split ")) {
        continue;
      }
      edge1.getFromVertex().addOutgoing(edge1);
      edge1.getToVertex().addIncoming(edge1);
      StreetEdge edge2=edges.second;
      if (edge2 != null) {
        edge2.getFromVertex().addOutgoing(edge2);
        edge2.getToVertex().addIncoming(edge2);
      }
    }
  }
  LOG.debug("Linking bike rental stations...");
  for (  BikeRentalStationVertex brsv : Iterables.filter(vertices,BikeRentalStationVertex.class)) {
    if (!networkLinkerLibrary.connectVertexToStreets(brsv).getResult()) {
      LOG.warn(graph.addBuilderAnnotation(new BikeRentalStationUnlinked(brsv)));
    }
  }
  LOG.debug("Linking bike P+R stations...");
  for (  BikeParkVertex bprv : Iterables.filter(vertices,BikeParkVertex.class)) {
    if (!networkLinkerLibrary.connectVertexToStreets(bprv).getResult()) {
      LOG.warn(graph.addBuilderAnnotation(new BikeParkUnlinked(bprv)));
    }
  }
}
