{
  Envelope envelope=new Envelope(c);
  List<Street> nearby=new LinkedList<Street>();
  int i=0;
  double envelopeGrowthRate=0.0018;
  GeometryFactory factory=new GeometryFactory();
  Point p=factory.createPoint(c);
  while (nearby.size() < 1 && i < 4) {
    ++i;
    envelope.expandBy(envelopeGrowthRate);
    envelopeGrowthRate*=2;
    double bestDistance=Double.MAX_VALUE;
    if (includeTransitStops) {
      List<Vertex> nearbyTransitStops=transitStopTree.query(envelope);
      Vertex bestStop=null;
      for (      Vertex v : nearbyTransitStops) {
        Coordinate sc=v.getCoordinate();
        double distance=sc.distance(c);
        if (distance < bestDistance) {
          bestDistance=distance;
          bestStop=v;
        }
      }
      if (bestDistance <= MAX_DISTANCE_FROM_STREET) {
        return bestStop;
      }
    }
    nearby=edgeTree.query(envelope);
    for (    Street e : nearby) {
      Geometry g=e.getGeometry();
      double distance=g.distance(p);
      if (distance < bestDistance) {
        bestDistance=distance;
      }
    }
    List<Street> parallel=new LinkedList<Street>();
    for (    Street e : nearby) {
      Geometry g=e.getGeometry();
      double distance=g.distance(p);
      if (distance == bestDistance) {
        parallel.add(e);
      }
    }
    if (bestDistance <= MAX_DISTANCE_FROM_STREET) {
      Street bestStreet=parallel.get(0);
      Geometry g=bestStreet.getGeometry();
      LocationIndexedLine l=new LocationIndexedLine(g);
      LinearLocation location=l.project(c);
      Coordinate start=bestStreet.getFromVertex().getCoordinate();
      Coordinate end=bestStreet.getToVertex().getCoordinate();
      Coordinate nearestPoint=location.getCoordinate(g);
      if (nearestPoint.distance(start) < MAX_SNAP_TO_INTERSECTION_DISTANCE) {
        return bestStreet.getFromVertex();
      }
 else       if (nearestPoint.distance(end) < MAX_SNAP_TO_INTERSECTION_DISTANCE) {
        return bestStreet.getToVertex();
      }
      return StreetLocation.createStreetLocation(bestStreet.getName(),parallel,location);
    }
  }
  return null;
}
