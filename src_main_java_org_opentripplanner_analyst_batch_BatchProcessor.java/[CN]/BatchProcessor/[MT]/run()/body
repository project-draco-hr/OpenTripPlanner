{
  origins.setup();
  destinations.setup();
  linkIntoGraph(destinations);
  LOG.info("Number of threads: {}",nThreads);
  ExecutorService threadPool=Executors.newFixedThreadPool(nThreads);
  CompletionService<Void> ecs=new ExecutorCompletionService<Void>(threadPool);
  if (aggregator != null) {
    mode=Mode.AGGREGATE;
    aggregateResultSet=new ResultSet(origins);
  }
 else   if (accumulator != null) {
    mode=Mode.ACCUMULATE;
    aggregateResultSet=new ResultSet(destinations);
  }
 else {
    mode=Mode.BASIC;
    aggregateResultSet=null;
    if (!outputPath.contains("{}")) {
      LOG.error("output filename must contain origin placeholder.");
      System.exit(-1);
    }
  }
  startTime=System.currentTimeMillis();
  int nTasks=0;
  for (  Individual oi : origins) {
    ecs.submit(new BatchAnalystTask(nTasks,oi),null);
    ++nTasks;
  }
  LOG.info("created {} tasks.",nTasks);
  int nCompleted=0;
  try {
    while (nCompleted < nTasks) {
      try {
        ecs.take().get();
        LOG.debug("got result {}/{}",nCompleted,nTasks);
        if (checkpoint()) {
          LOG.info("checkpoint written.");
        }
      }
 catch (      ExecutionException e) {
        LOG.error("exception in thread task: {}",e);
      }
      ++nCompleted;
      projectRunTime(nCompleted,nTasks);
    }
  }
 catch (  InterruptedException e) {
    LOG.warn("run was interrupted after {} tasks",nCompleted);
  }
  threadPool.shutdown();
  if (accumulator != null)   accumulator.finish();
  if (aggregateResultSet != null)   aggregateResultSet.writeAppropriateFormat(outputPath);
  LOG.info("DONE.");
}
