{
  DistanceLibrary distanceLibrary=SphericalDistanceLibrary.getInstance();
  RoutingRequest opt=ctx.opt;
  opt.rctx=ctx;
  AgencyAndId tripId=opt.getStartingTransitTripId();
  Trip trip=ctx.graph.index.tripForId.get(tripId);
  TripPattern tripPattern=ctx.graph.index.patternForTrip.get(trip);
  if (tripPattern == null) {
    throw new IllegalArgumentException("Unknown/invalid trip ID: " + tripId);
  }
  List<PatternHop> hops=tripPattern.getPatternHops();
  Double lon=opt.getFrom().lng;
  Double lat=opt.getFrom().lat;
  PatternStopVertex nextStop;
  TripTimes bestTripTimes=null;
  ServiceDay bestServiceDay=null;
  int bestStopIndex=0;
  double fractionCovered;
  LineString geomRemaining;
  Coordinate point=lon == null || lat == null ? null : new Coordinate(lon,lat);
  if (point != null) {
    PatternHop bestHop=null;
    double minDist=Double.MAX_VALUE;
    for (    PatternHop hop : hops) {
      LineString line=hop.getGeometry();
      double dist=distanceLibrary.fastDistance(point,line);
      if (dist < minDist) {
        minDist=dist;
        bestHop=hop;
      }
    }
    if (minDist > 1000)     LOG.warn("On-board depart: origin point suspiciously away from nearest trip shape ({} meters)",minDist);
 else     LOG.info("On-board depart: origin point {} meters away from hop shape",minDist);
    LineString geometry=bestHop.getGeometry();
    P2<LineString> geomPair=GeometryUtils.splitGeometryAtPoint(geometry,point);
    geomRemaining=geomPair.getSecond();
    double total=distanceLibrary.fastLength(geometry);
    double remaining=distanceLibrary.fastLength(geomRemaining);
    fractionCovered=total > 0.0 ? (double)(1.0 - remaining / total) : 0.0;
    nextStop=(PatternStopVertex)bestHop.getToVertex();
    bestStopIndex=bestHop.getStopIndex();
    int minDelta=Integer.MAX_VALUE;
    int actDelta=0;
    for (    ServiceDay serviceDay : ctx.serviceDays) {
      TripPattern pattern=nextStop.getTripPattern();
      Timetable timetable=pattern.getUpdatedTimetable(opt,serviceDay);
      TripTimes tripTimes=timetable.getTripTimes(timetable.getTripIndex(tripId));
      int depTime=tripTimes.getDepartureTime(bestStopIndex);
      int arrTime=tripTimes.getArrivalTime(bestStopIndex + 1);
      int estTime=(int)Math.round(depTime * fractionCovered + arrTime * (1 - fractionCovered));
      int time=serviceDay.secondsSinceMidnight(opt.dateTime);
      int deltaTime=Math.abs(time - estTime);
      if (deltaTime < minDelta) {
        minDelta=deltaTime;
        actDelta=time - estTime;
        bestTripTimes=tripTimes;
        bestServiceDay=serviceDay;
      }
    }
    if (minDelta > 60000)     LOG.warn("On-board depart: delta between scheduled/real-time and actual time suspiciously large: {} seconds.",actDelta);
 else     LOG.info("On-board depart: delta between scheduled/real-time and actual time is {} seconds.",actDelta);
  }
 else {
    for (    ServiceDay serviceDay : ctx.serviceDays) {
      Timetable timetable=tripPattern.getUpdatedTimetable(opt,serviceDay);
      TripTimes tripTimes=timetable.getTripTimes(timetable.getTripIndex(tripId));
      int depTime=tripTimes.getDepartureTime(0);
      int arrTime=tripTimes.getArrivalTime(tripTimes.getNumStops() - 1);
      int time=serviceDay.secondsSinceMidnight(opt.dateTime);
      if (depTime <= time && time <= arrTime) {
        bestTripTimes=tripTimes;
        bestServiceDay=serviceDay;
      }
    }
    if (bestServiceDay == null) {
      throw new RuntimeException("Unable to determine on-board depart service day.");
    }
    int time=bestServiceDay.secondsSinceMidnight(opt.dateTime);
    PatternHop bestHop=null;
    for (    PatternHop hop : hops) {
      int stopIndex=hop.getStopIndex();
      int depTime=bestTripTimes.getDepartureTime(stopIndex);
      int arrTime=bestTripTimes.getArrivalTime(stopIndex + 1);
      if (time == arrTime) {
        return ctx.graph.getVertex(hop.getEndStop().getId().toString());
      }
 else       if (depTime < time) {
        bestHop=hop;
        bestStopIndex=stopIndex;
      }
 else       if (time == depTime || bestTripTimes.getArrivalTime(bestStopIndex + 1) < time) {
        return ctx.graph.getVertex(hop.getBeginStop().getId().toString());
      }
 else {
        break;
      }
    }
    nextStop=(PatternStopVertex)bestHop.getToVertex();
    LineString geometry=bestHop.getGeometry();
    int depTime=bestTripTimes.getDepartureTime(bestStopIndex);
    int arrTime=bestTripTimes.getArrivalTime(bestStopIndex + 1);
    fractionCovered=((double)(time - depTime)) / ((double)(arrTime - depTime));
    P2<LineString> geomPair=GeometryUtils.splitGeometryAtFraction(geometry,fractionCovered);
    geomRemaining=geomPair.getSecond();
    if (geometry.isEmpty()) {
      lon=Double.NaN;
      lat=Double.NaN;
    }
 else {
      Coordinate start;
      if (geomRemaining.isEmpty()) {
        start=geometry.getCoordinateN(geometry.getNumPoints() - 1);
      }
 else {
        start=geomRemaining.getCoordinateN(0);
      }
      lon=start.x;
      lat=start.y;
    }
  }
  OnboardDepartVertex onboardDepart=new OnboardDepartVertex("on_board_depart",lon,lat);
  OnBoardDepartPatternHop startHop=new OnBoardDepartPatternHop(onboardDepart,nextStop,bestTripTimes,bestServiceDay,bestStopIndex,fractionCovered);
  startHop.setGeometry(geomRemaining);
  return onboardDepart;
}
