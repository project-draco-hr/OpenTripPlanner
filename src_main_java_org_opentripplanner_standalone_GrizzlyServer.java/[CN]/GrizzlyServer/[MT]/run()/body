{
  LOG.info("Starting OTP Grizzly server on ports {} (HTTP) and {} (HTTPS) of interface {}",params.port,params.securePort,params.bindAddress);
  LOG.info("OTP server base path is {}",params.basePath);
  HttpServer httpServer=new HttpServer();
  SSLContextConfigurator sslConfig=new SSLContextConfigurator();
  sslConfig.setKeyStoreFile(new File(params.basePath,"keystore").getAbsolutePath());
  sslConfig.setKeyStorePass("opentrip");
  ThreadPoolConfig threadPoolConfig=ThreadPoolConfig.defaultConfig().setCorePoolSize(1).setMaxPoolSize(Runtime.getRuntime().availableProcessors());
  NetworkListener httpListener=new NetworkListener("otp_insecure",params.bindAddress,params.port);
  httpListener.setSecure(false);
  NetworkListener httpsListener=new NetworkListener("otp_secure",params.bindAddress,params.securePort);
  httpsListener.setSecure(true);
  httpsListener.setSSLEngineConfig(new SSLEngineConfigurator(sslConfig).setClientMode(false).setNeedClientAuth(false));
  for (  NetworkListener listener : new NetworkListener[]{httpListener,httpsListener}) {
    CompressionConfig cc=listener.getCompressionConfig();
    cc.setCompressionMode(CompressionConfig.CompressionMode.ON);
    cc.setCompressionMinSize(50000);
    cc.setCompressableMimeTypes("application/json","text/json");
    listener.getTransport().setWorkerThreadPoolConfig(threadPoolConfig);
    httpServer.addListener(listener);
  }
  Application app=new OTPApplication(server,!params.insecure);
  HttpHandler dynamicHandler=ContainerFactory.createContainer(HttpHandler.class,app);
  httpServer.getServerConfiguration().addHttpHandler(dynamicHandler,"/otp/");
  HttpHandler staticHandler=new CLStaticHttpHandler(GrizzlyServer.class.getClassLoader(),"/client/");
  httpServer.getServerConfiguration().addHttpHandler(staticHandler,"/");
  try {
    httpServer.start();
    LOG.info("Grizzly server running.");
    Thread.currentThread().join();
  }
 catch (  BindException be) {
    LOG.error("Cannot bind to port {}. Is it already in use?",params.port);
  }
catch (  IOException ioe) {
    LOG.error("IO exception while starting server.");
  }
catch (  InterruptedException ie) {
    LOG.info("Interrupted, shutting down.");
  }
  httpServer.shutdown();
}
