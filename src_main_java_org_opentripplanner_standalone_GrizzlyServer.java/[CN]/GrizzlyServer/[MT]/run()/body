{
  LOG.info("Starting OTP Grizzly server on port {} using graphs at {}",params.port,params.graphDirectory);
  HttpServer httpServer=new HttpServer();
  SSLContextConfigurator sslConfig=new SSLContextConfigurator();
  sslConfig.setKeyStoreFile("/var/otp/ssh/keystore_server");
  sslConfig.setKeyStorePass("opentrip");
  NetworkListener httpListener=new NetworkListener("otp_insecure_listener","0.0.0.0",params.port);
  ThreadPoolConfig threadPoolConfig=ThreadPoolConfig.defaultConfig().setCorePoolSize(1).setMaxPoolSize(Runtime.getRuntime().availableProcessors());
  httpListener.getTransport().setWorkerThreadPoolConfig(threadPoolConfig);
  httpListener.setSecure(false);
  httpServer.addListener(httpListener);
  NetworkListener httpsListener=new NetworkListener("otp_secure_listener","0.0.0.0",params.port + 1);
  httpsListener.getTransport().setWorkerThreadPoolConfig(threadPoolConfig);
  httpsListener.setSecure(true);
  httpsListener.setSSLEngineConfig(new SSLEngineConfigurator(sslConfig).setClientMode(false).setNeedClientAuth(false));
  httpServer.addListener(httpsListener);
  Application app=new OTPApplication(server);
  HttpHandler dynamicHandler=ContainerFactory.createContainer(HttpHandler.class,app);
  httpServer.getServerConfiguration().addHttpHandler(dynamicHandler,"/otp");
  HttpHandler staticHandler=new CLStaticHttpHandler(GrizzlyServer.class.getClassLoader(),"/");
  httpServer.getServerConfiguration().addHttpHandler(staticHandler,"/");
  try {
    httpServer.start();
    LOG.info("Grizzly server running.");
    Thread.currentThread().join();
  }
 catch (  BindException be) {
    LOG.error("Cannot bind to port {}. Is it already in use?",params.port);
  }
catch (  IOException ioe) {
    LOG.error("IO exception while starting server.");
  }
catch (  InterruptedException ie) {
    LOG.info("Interrupted, shutting down.");
  }
  httpServer.shutdown();
}
