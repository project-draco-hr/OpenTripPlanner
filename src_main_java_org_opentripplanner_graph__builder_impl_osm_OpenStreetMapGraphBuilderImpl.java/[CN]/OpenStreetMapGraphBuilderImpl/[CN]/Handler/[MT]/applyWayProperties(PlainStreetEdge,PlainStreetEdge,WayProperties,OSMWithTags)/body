{
  Set<Alert> notes=wayPropertySet.getNoteForWay(way);
  Set<Alert> wheelchairNotes=getWheelchairNotes(way);
  boolean noThruTraffic=way.isThroughTrafficExplicitlyDisallowed();
  if (street != null) {
    double safety=wayData.getSafetyFeatures().getFirst();
    street.setBicycleSafetyFactor((float)safety);
    if (safety < bestBikeSafety) {
      bestBikeSafety=(float)safety;
    }
    if (notes != null) {
      graph.streetNotesService.addNotes(street,notes);
    }
    if (wheelchairNotes != null) {
      graph.streetNotesService.addNotes(street,notes,StreetNotesService.WHEELCHAIR_MATCHER);
    }
    street.setNoThruTraffic(noThruTraffic);
  }
  if (backStreet != null) {
    double safety=wayData.getSafetyFeatures().getSecond();
    if (safety < bestBikeSafety) {
      bestBikeSafety=(float)safety;
    }
    backStreet.setBicycleSafetyFactor((float)safety);
    if (notes != null) {
      graph.streetNotesService.addNotes(backStreet,notes);
    }
    if (wheelchairNotes != null) {
      graph.streetNotesService.addNotes(backStreet,wheelchairNotes,StreetNotesService.WHEELCHAIR_MATCHER);
    }
    backStreet.setNoThruTraffic(noThruTraffic);
  }
}
