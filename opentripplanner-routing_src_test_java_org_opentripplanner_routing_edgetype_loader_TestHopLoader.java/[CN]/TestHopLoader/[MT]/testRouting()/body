{
  Vertex stop_a=graph.getVertex("agency_A");
  Vertex stop_b=graph.getVertex("agency_B");
  Vertex stop_c=graph.getVertex("agency_C");
  Vertex stop_d=graph.getVertex("agency_D");
  Vertex stop_e=graph.getVertex("agency_E");
  TraverseOptions options=new TraverseOptions();
  options.setGtfsContext(context);
  ShortestPathTree spt;
  GraphPath path;
  spt=Dijkstra.getShortestPathTree(graph,stop_a.getLabel(),stop_b.getLabel(),new State(new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis()),options);
  path=spt.getPath(stop_b);
  assertNotNull(path);
  assertEquals(4,path.vertices.size());
  spt=Dijkstra.getShortestPathTree(graph,stop_a.getLabel(),stop_c.getLabel(),new State(new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis()),options);
  path=spt.getPath(stop_c);
  assertNotNull(path);
  assertEquals(5,path.vertices.size());
  spt=Dijkstra.getShortestPathTree(graph,stop_a.getLabel(),stop_d.getLabel(),new State(new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis()),options);
  path=spt.getPath(stop_d);
  assertNotNull(path);
  assertEquals(8,path.vertices.size());
  spt=Dijkstra.getShortestPathTree(graph,stop_a.getLabel(),stop_e.getLabel(),new State(new GregorianCalendar(2009,8,7,0,0,0).getTimeInMillis()),options);
  path=spt.getPath(stop_e);
  assertNotNull(path);
  assertEquals(9,path.vertices.size());
}
