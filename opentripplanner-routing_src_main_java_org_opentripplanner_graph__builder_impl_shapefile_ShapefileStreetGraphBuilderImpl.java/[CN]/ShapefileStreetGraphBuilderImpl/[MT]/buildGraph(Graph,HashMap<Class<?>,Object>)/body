{
  try {
    FeatureSource<SimpleFeatureType,SimpleFeature> featureSource=_featureSourceFactory.getFeatureSource();
    CoordinateReferenceSystem sourceCRS=featureSource.getInfo().getCRS();
    Hints hints=new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,Boolean.TRUE);
    CRSAuthorityFactory factory=ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG",hints);
    CoordinateReferenceSystem worldCRS=factory.createCoordinateReferenceSystem("EPSG:4326");
    Query query=new Query();
    query.setCoordinateSystem(sourceCRS);
    query.setCoordinateSystemReproject(worldCRS);
    FeatureCollection<SimpleFeatureType,SimpleFeature> features=featureSource.getFeatures(query);
    features=featureSource.getFeatures(query);
    HashMap<String,HashMap<Coordinate,Integer>> intersectionNameToId=new HashMap<String,HashMap<Coordinate,Integer>>();
    SimpleFeatureConverter<String> streetIdConverter=_schema.getIdConverter();
    SimpleFeatureConverter<String> streetNameConverter=_schema.getNameConverter();
    SimpleFeatureConverter<P2<StreetTraversalPermission>> permissionConverter=_schema.getPermissionConverter();
    SimpleFeatureConverter<String> noteConverter=_schema.getNoteConverter();
    HashMap<Coordinate,IntersectionVertex> intersectionsByLocation=new HashMap<Coordinate,IntersectionVertex>();
    SimpleFeatureConverter<P2<Double>> safetyConverter=_schema.getBicycleSafetyConverter();
    SimpleFeatureConverter<Boolean> slopeOverrideCoverter=_schema.getSlopeOverrideConverter();
    SimpleFeatureConverter<Boolean> featureSelector=_schema.getFeatureSelector();
    Set<Object> seen=new HashSet<Object>();
    List<SimpleFeature> featureList=new ArrayList<SimpleFeature>();
    FeatureIterator<SimpleFeature> it2=features.features();
    while (it2.hasNext()) {
      SimpleFeature feature=it2.next();
      if (featureSelector != null && !featureSelector.convert(feature)) {
        continue;
      }
      featureList.add(feature);
    }
    it2.close();
    HashMap<Coordinate,TreeSet<String>> coordinateToStreetNames=getCoordinatesToStreetNames(featureList);
    for (    SimpleFeature feature : featureList) {
      if (feature.getDefaultGeometry() == null) {
        log.warn("feature has no geometry: " + feature.getIdentifier());
        continue;
      }
      LineString geom=toLineString((Geometry)feature.getDefaultGeometry());
      Object o=streetIdConverter.convert(feature);
      String label="" + o;
      if (o != null && seen.contains(label)) {
        continue;
      }
      seen.add(label);
      String name=streetNameConverter.convert(feature);
      Coordinate[] coordinates=geom.getCoordinates();
      if (coordinates.length < 2) {
        log.warn("Bad geometry for street with label " + label + " name "+ name);
        continue;
      }
      Coordinate startCoordinate=new Coordinate(Math.round(coordinates[0].x * 1048576) / 1048576.0,Math.round(coordinates[0].y * 1048576) / 1048576.0);
      Coordinate endCoordinate=new Coordinate(Math.round(coordinates[coordinates.length - 1].x * 1048576) / 1048576.0,Math.round(coordinates[coordinates.length - 1].y * 1048576) / 1048576.0);
      String startIntersectionName=getIntersectionName(coordinateToStreetNames,intersectionNameToId,startCoordinate);
      if (startIntersectionName == "null") {
        log.warn("No intersection name for " + name);
      }
      String endIntersectionName=getIntersectionName(coordinateToStreetNames,intersectionNameToId,endCoordinate);
      IntersectionVertex startIntersection=intersectionsByLocation.get(startCoordinate);
      if (startIntersection == null) {
        startIntersection=new IntersectionVertex(graph,startIntersectionName,startCoordinate.x,startCoordinate.y,startIntersectionName);
        intersectionsByLocation.put(startCoordinate,startIntersection);
      }
      IntersectionVertex endIntersection=intersectionsByLocation.get(endCoordinate);
      if (endIntersection == null) {
        endIntersection=new IntersectionVertex(graph,endIntersectionName,endCoordinate.x,endCoordinate.y,endIntersectionName);
        intersectionsByLocation.put(endCoordinate,endIntersection);
      }
      double length=0;
      for (int i=0; i < coordinates.length - 1; ++i) {
        length+=JTS.orthodromicDistance(coordinates[i],coordinates[i + 1],worldCRS);
      }
      P2<StreetTraversalPermission> permissions=permissionConverter.convert(feature);
      PlainStreetEdge street=new PlainStreetEdge(startIntersection,endIntersection,geom,name,length,permissions.getFirst(),false);
      LineString reversed=(LineString)geom.reverse();
      PlainStreetEdge backStreet=new PlainStreetEdge(endIntersection,startIntersection,reversed,name,length,permissions.getSecond(),true);
      if (noteConverter != null) {
        String note=noteConverter.convert(feature);
        if (note != null && note.length() > 0) {
          HashSet<Alert> notes=Alert.newSimpleAlertSet(note);
          street.setNote(notes);
          backStreet.setNote(notes);
        }
      }
      boolean slopeOverride=slopeOverrideCoverter.convert(feature);
      street.setSlopeOverride(slopeOverride);
      backStreet.setSlopeOverride(slopeOverride);
      P2<Double> effectiveLength;
      if (safetyConverter != null) {
        effectiveLength=safetyConverter.convert(feature);
        if (effectiveLength != null) {
          street.setBicycleSafetyEffectiveLength(effectiveLength.getFirst() * length);
          backStreet.setBicycleSafetyEffectiveLength(effectiveLength.getSecond() * length);
        }
      }
    }
    it2.close();
  }
 catch (  Exception ex) {
    throw new IllegalStateException("error loading shapefile street data",ex);
  }
}
