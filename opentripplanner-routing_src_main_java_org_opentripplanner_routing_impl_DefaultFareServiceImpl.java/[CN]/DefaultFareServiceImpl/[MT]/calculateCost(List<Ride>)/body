{
  Set<String> zones=new HashSet<String>();
  Set<AgencyAndId> routes=new HashSet<AgencyAndId>();
  int transfersUsed=-1;
  Ride firstRide=rides.get(0);
  long startTime=firstRide.startTime;
  String startZone=firstRide.startZone;
  String endZone=firstRide.endZone;
  String feedId=firstRide.firstStop.getId().getAgencyId();
  long lastRideStartTime=firstRide.startTime;
  long lastRideEndTime=firstRide.endTime;
  for (  Ride ride : rides) {
    if (!ride.firstStop.getId().getAgencyId().equals(feedId)) {
      LOG.debug("skipped multi-feed ride sequence {}",rides);
      return Float.POSITIVE_INFINITY;
    }
    lastRideStartTime=ride.startTime;
    lastRideEndTime=ride.endTime;
    endZone=ride.endZone;
    routes.add(ride.route);
    zones.addAll(ride.zones);
    transfersUsed+=1;
  }
  FareAttribute bestAttribute=null;
  float bestFare=Float.POSITIVE_INFINITY;
  long tripTime=lastRideStartTime - startTime;
  long journeyTime=lastRideEndTime - startTime;
  for (  AgencyAndId fareId : fareAttributes.keySet()) {
    if (!fareId.getAgencyId().equals(feedId))     continue;
    FareRuleSet ruleSet=fareRules.get(fareId);
    if (ruleSet == null || ruleSet.matches(startZone,endZone,zones,routes)) {
      FareAttribute attribute=fareAttributes.get(fareId);
      if (attribute.isTransfersSet() && attribute.getTransfers() < transfersUsed) {
        continue;
      }
      if (attribute.isTransferDurationSet() && tripTime > attribute.getTransferDuration()) {
        continue;
      }
      if (attribute.isJourneyDurationSet() && journeyTime > attribute.getJourneyDuration()) {
        continue;
      }
      float newFare=attribute.getPrice();
      if (newFare < bestFare) {
        bestAttribute=attribute;
        bestFare=newFare;
      }
    }
  }
  LOG.debug("{} best for {}",bestAttribute,rides);
  if (bestFare == Float.POSITIVE_INFINITY)   LOG.warn("No fare for a ride sequence: {}",rides);
  return bestFare;
}
