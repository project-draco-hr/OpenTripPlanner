{
  Random rand=new Random(42);
  final int NTESTS=100;
  int n=0;
  while (true) {
    Vertex origin, destination;
    do {
      origin=graph.getVertex("agency_" + (char)(65 + rand.nextInt(20)));
      destination=graph.getVertex("agency_" + (char)(65 + rand.nextInt(20)));
    }
 while (origin.equals(destination));
    RoutingRequest options=new RoutingRequest();
    options.dateTime=TestUtils.dateInSeconds("America/New_York",2009,5 + rand.nextInt(4),1 + rand.nextInt(20),4 + rand.nextInt(10),rand.nextInt(60),0);
    ShortestPathTree spt;
    GraphPath path;
    options.setRoutingContext(graph,origin,destination);
    spt=aStar.getShortestPathTree(options);
    path=spt.getPath(destination,false);
    if (path == null)     continue;
    System.out.println("Testing path between " + origin.getLabel() + " and "+ destination.getLabel()+ " at "+ new Date(options.dateTime * 1000));
    long arrivalTime1=0L;
    long elapsedTime1=0L;
    int numBoardings1=0;
    Vertex arrivalVertex1=null;
    if (verbose)     System.out.println("PATH 1 ---------------------");
    for (    State s : path.states) {
      if (verbose)       System.out.println(s + " [" + s.getVertex().getClass().getName()+ "]");
      arrivalTime1=s.getTimeSeconds();
      arrivalVertex1=s.getVertex();
      elapsedTime1=s.getElapsedTimeSeconds();
      numBoardings1=s.getNumBoardings();
    }
    Stop end=null;
    PatternStopVertex nextV=null;
    TripTimes tripTimes=null;
    int stopIndex=0;
    long newStart=0L;
    int nhop=0;
    for (    State s : path.states) {
      if (s.getVertex() instanceof PatternArriveVertex && s.getBackEdge() instanceof PatternHop)       nhop++;
    }
    int hop=rand.nextInt(nhop);
    nhop=0;
    float k=rand.nextFloat();
    for (    State s : path.states) {
      Vertex v=s.getVertex();
      if (v instanceof PatternArriveVertex && s.getBackEdge() instanceof PatternHop) {
        if (hop == nhop) {
          PatternArriveVertex pav=(PatternArriveVertex)v;
          end=pav.getStop();
          nextV=pav;
          PatternHop phe=(PatternHop)s.getBackEdge();
          stopIndex=phe.getStopIndex();
          tripTimes=s.getTripTimes();
          int hopDuration=tripTimes.getRunningTime(stopIndex);
          newStart=s.getBackState().getTimeSeconds() + Math.round(hopDuration * k);
          break;
        }
        nhop++;
      }
    }
    System.out.println("Boarded depart: trip=" + tripTimes.trip + ", nextStop="+ nextV.getStop()+ " stopIndex="+ stopIndex+ " startTime="+ new Date(newStart * 1000L));
    double lat=end.getLat();
    double lon=end.getLon();
    OnboardDepartVertex onboardOrigin=new OnboardDepartVertex("OnBoard_Origin",lat,lon);
    @SuppressWarnings("unused") OnBoardDepartPatternHop currentHop=new OnBoardDepartPatternHop(onboardOrigin,nextV,tripTimes,options.getRctx().serviceDays.get(1),stopIndex,k);
    options.dateTime=newStart;
    options.setRoutingContext(graph,onboardOrigin,destination);
    spt=aStar.getShortestPathTree(options);
    GraphPath path2=spt.getPath(destination,false);
    assertNotNull(path2);
    if (verbose)     System.out.println("PATH 2 ---------------------");
    long arrivalTime2=0L;
    long elapsedTime2=0L;
    int numBoardings2=0;
    Vertex arrivalVertex2=null;
    for (    State s : path2.states) {
      if (verbose)       System.out.println(s + " [" + s.getVertex().getClass().getName()+ "]");
      arrivalTime2=s.getTimeSeconds();
      arrivalVertex2=s.getVertex();
      elapsedTime2=s.getElapsedTimeSeconds();
      numBoardings2=s.getNumBoardings();
    }
    assertEquals(arrivalTime1,arrivalTime2);
    assertEquals(arrivalVertex1,destination);
    assertEquals(arrivalVertex2,destination);
    assertTrue(elapsedTime2 <= elapsedTime1);
    assertTrue(numBoardings2 < numBoardings1);
    int nRemoved=onboardOrigin.removeTemporaryEdges();
    assertEquals(1,nRemoved);
    n++;
    if (n > NTESTS)     break;
  }
}
