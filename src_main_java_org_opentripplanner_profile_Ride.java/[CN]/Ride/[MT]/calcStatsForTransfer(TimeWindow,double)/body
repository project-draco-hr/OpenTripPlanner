{
  if (previous == null)   return this.statsForBoarding(window);
  List<Integer> departures=getSortedStoptimes(window,false);
  List<Integer> arrivals=getSortedStoptimes(window,true);
  int walkTime=(int)(getTransferDistance() / walkSpeed);
  List<Integer> waits=Lists.newArrayList();
  Iterator<Integer> departureIterator=departures.iterator();
  int departure=departureIterator.next();
  ARRIVAL:   for (  int arrival : arrivals) {
    int boardTime=arrival + walkTime + ProfileRouter.SLACK;
    while (departure <= boardTime) {
      if (!departureIterator.hasNext())       break ARRIVAL;
      departure=departureIterator.next();
    }
    waits.add(departure - boardTime);
  }
  if (waits.isEmpty())   return null;
  return new Stats(waits);
}
