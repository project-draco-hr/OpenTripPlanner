{
  Graph graph=new Graph();
  StreetVertex v1=new IntersectionVertex(graph,"v1",-77.0492,38.856,"v1");
  StreetVertex v2=new IntersectionVertex(graph,"v2",-77.0492,38.857,"v2");
  StreetVertex v3=new IntersectionVertex(graph,"v3",-77.0492,38.858,"v3");
  @SuppressWarnings("unused") Edge walk=new StreetEdge(v1,v2,GeometryUtils.makeLineString(-77.0492,38.856,-77.0492,38.857),"S. Crystal Dr",87,StreetTraversalPermission.PEDESTRIAN,false);
  @SuppressWarnings("unused") Edge mustBike=new StreetEdge(v2,v3,GeometryUtils.makeLineString(-77.0492,38.857,-77.0492,38.858),"S. Crystal Dr",87,StreetTraversalPermission.BICYCLE,false);
  AStar aStar=new AStar();
  RoutingRequest options=new RoutingRequest(new TraverseModeSet("WALK,TRANSIT"));
  options.setRoutingContext(graph,v1,v3);
  ShortestPathTree tree=aStar.getShortestPathTree(options);
  GraphPath path=tree.getPath(v3,false);
  assertNull(path);
  options=new RoutingRequest(new TraverseModeSet("WALK,BICYCLE,TRANSIT"));
  options.freezeTraverseMode();
  options.setRoutingContext(graph,v1,v3);
  tree=aStar.getShortestPathTree(options);
  path=tree.getPath(v3,false);
  assertNull(path);
  BikeRentalStation station=new BikeRentalStation();
  station.id="id";
  station.name="station";
  station.x=-77.049;
  station.y=36.856;
  station.bikesAvailable=5;
  station.spacesAvailable=5;
  BikeRentalStationVertex stationVertex=new BikeRentalStationVertex(graph,station);
  new StreetBikeRentalLink(stationVertex,v2);
  new StreetBikeRentalLink(v2,stationVertex);
  Set<String> networks=new HashSet<String>(Arrays.asList("default"));
  new RentABikeOnEdge(stationVertex,stationVertex,networks);
  new RentABikeOffEdge(stationVertex,stationVertex,networks);
  options=new RoutingRequest(new TraverseModeSet("WALK,BICYCLE,TRANSIT"));
  options.freezeTraverseMode();
  options.setRoutingContext(graph,v1,v3);
  tree=aStar.getShortestPathTree(options);
  path=tree.getPath(v3,false);
  assertNull(path);
  BikeRentalStation station2=new BikeRentalStation();
  station2.id="id2";
  station2.name="station2";
  station2.x=-77.049;
  station2.y=36.857;
  station2.bikesAvailable=5;
  station2.spacesAvailable=5;
  BikeRentalStationVertex stationVertex2=new BikeRentalStationVertex(graph,station2);
  new StreetBikeRentalLink(stationVertex2,v3);
  new StreetBikeRentalLink(v3,stationVertex2);
  new RentABikeOnEdge(stationVertex2,stationVertex2,networks);
  new RentABikeOffEdge(stationVertex2,stationVertex2,networks);
  options=new RoutingRequest();
  new QualifiedModeSet("BICYCLE_RENT,TRANSIT").applyToRoutingRequest(options);
  options.setRoutingContext(graph,v1,v3);
  tree=aStar.getShortestPathTree(options);
  path=tree.getPath(v3,false);
  assertNotNull(path);
}
