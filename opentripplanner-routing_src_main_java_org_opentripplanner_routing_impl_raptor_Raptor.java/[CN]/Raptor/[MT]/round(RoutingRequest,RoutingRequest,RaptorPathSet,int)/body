{
  Set<RaptorStop> visitedLastRound=cur.visitedLastRound;
  Set<RaptorRoute> routesToVisit=new HashSet<RaptorRoute>();
  for (  RaptorStop stop : visitedLastRound) {
    for (    RaptorRoute route : routesForStop[stop.index]) {
      routesToVisit.add(route);
    }
  }
  cur.visitedLastRound=new HashSet<RaptorStop>();
  List<RaptorState>[] statesByStop=cur.getStates();
  List<RaptorState> createdStates=new ArrayList<RaptorState>();
  System.out.println("Round " + nBoardings);
  for (  RaptorRoute route : routesToVisit) {
    List<RaptorState> boardStates=new ArrayList<RaptorState>();
    boolean started=false;
    for (int stopNo=0; stopNo < route.getNStops(); ++stopNo) {
      RaptorStop stop=route.stops[stopNo];
      if (!started && !visitedLastRound.contains(stop))       continue;
      started=true;
      List<RaptorState> states=statesByStop[stop.index];
      List<RaptorState> newStates=new ArrayList<RaptorState>();
      if (states == null) {
        states=new ArrayList<RaptorState>();
        statesByStop[stop.index]=states;
      }
      CONTINUE:       for (      RaptorState boardState : boardStates) {
        RaptorState newState=new RaptorState();
        ServiceDay sd=boardState.serviceDay;
        int alightTime=route.getAlightTime(boardState.patternIndex,boardState.tripIndex,stopNo);
        newState.arrivalTime=(int)sd.time(alightTime);
        newState.boardStop=boardState.boardStop;
        newState.boardStopSequence=boardState.boardStopSequence;
        newState.route=route;
        newState.patternIndex=boardState.patternIndex;
        newState.tripIndex=boardState.tripIndex;
        newState.nBoardings=boardState.nBoardings;
        newState.walkDistance=boardState.walkDistance;
        newState.parent=boardState.parent;
        newState.stop=stop;
        for (        RaptorState oldState : states) {
          if (eDominates(oldState,newState)) {
            continue CONTINUE;
          }
        }
        for (        RaptorState oldState : newStates) {
          if (oldState != newState && eDominates(oldState,newState)) {
            continue CONTINUE;
          }
        }
        cur.visitedLastRound.add(stop);
        cur.visitedEver.add(stop);
        newStates.add(newState);
      }
      if (newStates.size() > 10) {
      }
      if (stopNo < route.getNStops() - 1) {
        TRYBOARD:         for (        RaptorState oldState : states) {
          if (oldState.nBoardings != nBoardings - 1)           continue;
          if (oldState.route == route)           continue;
          RaptorBoardSpec boardSpec=route.getTripIndex(options,oldState.arrivalTime,stopNo);
          if (boardSpec == null)           continue;
          RaptorState boardState=new RaptorState();
          boardState.nBoardings=nBoardings;
          boardState.boardStop=stop;
          boardState.boardStopSequence=stopNo;
          boardState.arrivalTime=boardSpec.departureTime;
          boardState.patternIndex=boardSpec.patternIndex;
          boardState.tripIndex=boardSpec.tripIndex;
          boardState.parent=oldState;
          boardState.serviceDay=boardSpec.serviceDay;
          boardState.route=route;
          boardState.walkDistance=oldState.walkDistance;
          for (          RaptorState state : newStates) {
            if (eDominates(state,boardState)) {
              continue TRYBOARD;
            }
          }
          for (          RaptorState state : states) {
            if (state != oldState && eDominates(state,boardState)) {
              continue TRYBOARD;
            }
          }
          boardStates.add(boardState);
        }
      }
      createdStates.addAll(newStates);
      states.addAll(newStates);
    }
  }
  ShortestPathTree spt;
  GenericDijkstra dijkstra=new GenericDijkstra(walkOptions);
  if (nBoardings == 0) {
    State start=new MaxWalkState(options.rctx.origin,walkOptions);
    spt=dijkstra.getShortestPathTree(start);
  }
 else {
    if (options.rctx.graph.getService(TransitLocalStreetService.class) != null)     dijkstra.setSkipEdgeStrategy(new SkipNonTransferEdgeStrategy(options));
    final List<State> startPoints=new ArrayList<State>();
    STARTWALK:     for (    RaptorState state : createdStates) {
      if (false) {
        double maxWalk=options.getMaxWalkDistance();
        CHECK:         for (        T2<Double,RaptorStop> nearby : nearbyStops[state.stop.index]) {
          Double distance=nearby.getFirst();
          RaptorStop stop=nearby.getSecond();
          if (distance > maxWalk) {
            System.out.println("SKIPPED STATE: " + state.stop.stopVertex.getName());
            continue STARTWALK;
          }
          double minWalk=distance + state.walkDistance;
          int minArrive=(int)(state.arrivalTime + distance / options.getSpeedUpperBound());
          if (statesByStop[stop.index] == null)           break;
          for (          RaptorState other : statesByStop[stop.index]) {
            if (other.walkDistance > minWalk || other.arrivalTime > minArrive) {
              break CHECK;
            }
          }
        }
      }
      Vertex stopVertex=state.stop.stopVertex;
      StateEditor dijkstraState=new MaxWalkState.MaxWalkStateEditor(walkOptions,stopVertex);
      dijkstraState.setNumBoardings(state.nBoardings);
      dijkstraState.setWalkDistance(state.walkDistance);
      dijkstraState.setTime(state.arrivalTime);
      dijkstraState.setExtension("raptorParent",state);
      dijkstraState.setOptions(walkOptions);
      dijkstraState.incrementWeight(state.arrivalTime - options.dateTime);
      startPoints.add(dijkstraState.makeState());
    }
    if (startPoints.size() == 0) {
      System.out.println("warning: no walk in round " + nBoardings);
      return;
    }
    System.out.println("walk starts: " + startPoints.size() + " / "+ cur.visitedEver.size());
    dijkstra.setPriorityQueueFactory(new PrefilledPriorityQueueFactory(startPoints.subList(1,startPoints.size())));
    dijkstra.setShortestPathTreeFactory(new ShortestPathTreeFactory(){
      @Override public ShortestPathTree create(      RoutingRequest options){
        MultiShortestPathTree result=new MultiShortestPathTree(options);
        for (        State state : startPoints.subList(1,startPoints.size())) {
          result.add(state);
        }
        return result;
      }
    }
);
    spt=dijkstra.getShortestPathTree(startPoints.get(0));
  }
  final List<? extends State> targetStates=spt.getStates(walkOptions.rctx.target);
  if (targetStates != null) {
    TARGET:     for (    State targetState : targetStates) {
      RaptorState state=new RaptorState();
      RaptorState parent=(RaptorState)targetState.getExtension("raptorParent");
      state.parent=parent;
      state.walkDistance=targetState.getWalkDistance();
      state.arrivalTime=(int)targetState.getTime();
      if (parent != null) {
        state.nBoardings=parent.nBoardings;
        state.waitingTime=parent.waitingTime;
      }
      state.walkPath=targetState;
      for (      RaptorState oldState : cur.getTargetStates()) {
        if (eDominates(oldState,state)) {
          continue TARGET;
        }
      }
      cur.addTargetState(state);
      System.out.println("TARGET: " + state);
    }
  }
  SPTSTATE:   for (  State state : spt.getAllStates()) {
    final Vertex vertex=state.getVertex();
    if (!(vertex instanceof TransitStop))     continue;
    RaptorStop stop=raptorStopsForStopId.get(((TransitStop)vertex).getStopId());
    if (stop == null) {
      continue;
    }
    List<RaptorState> states=statesByStop[stop.index];
    if (states == null) {
      states=new ArrayList<RaptorState>();
      statesByStop[stop.index]=states;
    }
    Vertex dest=options.rctx.target;
    double minWalk=dest.getDistanceToNearestTransitStop();
    if (state.getWalkDistance() + minWalk > options.getMaxWalkDistance())     continue SPTSTATE;
    RaptorState baseState=(RaptorState)state.getExtension("raptorParent");
    RaptorState newState=new RaptorState();
    if (baseState != null) {
      newState.nBoardings=baseState.nBoardings;
    }
    newState.walkDistance=state.getWalkDistance();
    newState.arrivalTime=(int)state.getTime();
    newState.walkPath=state;
    newState.parent=baseState;
    newState.stop=stop;
    for (    RaptorState oldState : states) {
      if (eDominates(oldState,newState)) {
        continue SPTSTATE;
      }
    }
    double targetDistance=distanceLibrary.fastDistance(dest.getCoordinate(),vertex.getCoordinate());
    double minTime=(targetDistance - minWalk) / 25 + minWalk / options.getSpeedUpperBound();
    for (    RaptorState oldState : cur.getTargetStates()) {
      if (oldState.arrivalTime <= newState.arrivalTime + minTime + (newState.nBoardings - oldState.nBoardings) * 120 && oldState.walkDistance <= newState.walkDistance + minWalk + newState.nBoardings * 100)       continue SPTSTATE;
      if ((oldState.arrivalTime - options.dateTime) * 3 <= (newState.arrivalTime + minTime - options.dateTime))       continue SPTSTATE;
    }
    cur.visitedLastRound.add(stop);
    cur.visitedEver.add(stop);
    states.add(newState);
  }
  for (int stop=0; stop < statesByStop.length; ++stop) {
    cur.setStates(stop,statesByStop[stop]);
  }
}
