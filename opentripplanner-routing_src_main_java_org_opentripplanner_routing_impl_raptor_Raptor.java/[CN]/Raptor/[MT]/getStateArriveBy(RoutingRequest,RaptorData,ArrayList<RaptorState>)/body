{
  State state=new State(options.rctx.origin,options);
  for (int i=states.size() - 1; i >= 0; --i) {
    RaptorState cur=states.get(i);
    if (cur.walkPath != null) {
      GraphPath path=new GraphPath(cur.walkPath,true);
      for (ListIterator<Edge> it=path.edges.listIterator(path.edges.size()); it.hasPrevious(); ) {
        Edge e=it.previous();
        State oldState=state;
        state=e.traverse(state);
        if (state == null) {
          e.traverse(oldState);
        }
      }
    }
 else {
      if (cur.getParent() == null || !cur.getParent().interlining) {
        for (        Edge e : state.getVertex().getIncoming()) {
          if (e instanceof PreAlightEdge) {
            state=e.traverse(state);
          }
        }
        TransitBoardAlight alight=cur.getRoute().alights[cur.boardStopSequence - 1][cur.patternIndex];
        State oldState=state;
        state=alight.traverse(state);
        if (state == null) {
          state=alight.traverse(oldState);
        }
      }
      HOP:       while (true) {
        for (        Edge e : state.getVertex().getIncoming()) {
          if (e instanceof PatternDwell) {
            state=e.traverse(state);
          }
 else           if (e instanceof PatternHop) {
            state=e.traverse(state);
            if (cur.interlining) {
              for (              Edge e2 : state.getVertex().getIncoming()) {
                RaptorState next=states.get(i - 1);
                if (e2 instanceof PatternInterlineDwell) {
                  if (((TransitVertex)e2.getFromVertex()).getStop() == next.boardStop.stopVertex.getStop()) {
                    state=e2.traverse(state);
                    break HOP;
                  }
                }
              }
            }
            for (            Edge e2 : state.getVertex().getIncoming()) {
              if (e2 instanceof TransitBoardAlight) {
                for (                Edge e3 : e2.getFromVertex().getIncoming()) {
                  if (e3 instanceof PreBoardEdge) {
                    if (data.raptorStopsForStopId.get(((TransitStop)e3.getFromVertex()).getStopId()) == cur.stop) {
                      state=e2.traverse(state);
                      state=e3.traverse(state);
                      break HOP;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return state;
}
