{
  State state=new State(options);
  for (int i=states.size() - 1; i >= 0; --i) {
    RaptorState cur=states.get(i);
    if (cur.walkPath != null) {
      GraphPath path=new GraphPath(cur.walkPath,true);
      for (      Edge e : path.edges) {
        State oldState=state;
        state=e.traverse(state);
        if (state == null) {
          e.traverse(oldState);
        }
      }
    }
 else {
      for (      Edge e : state.getVertex().getOutgoing()) {
        if (e instanceof PreBoardEdge) {
          state=e.traverse(state);
        }
      }
      PatternBoard board=cur.route.boards[cur.boardStopSequence][cur.patternIndex];
      State oldState=state;
      state=board.traverse(state);
      if (state == null) {
        state=board.traverse(oldState);
      }
      HOP:       while (true) {
        for (        Edge e : state.getVertex().getOutgoing()) {
          if (e instanceof PatternDwell) {
            state=e.traverse(state);
          }
 else           if (e instanceof PatternHop) {
            state=e.traverse(state);
            for (            Edge e2 : state.getVertex().getOutgoing()) {
              if (e2 instanceof PatternAlight) {
                for (                Edge e3 : e2.getToVertex().getOutgoing()) {
                  if (e3 instanceof PreAlightEdge) {
                    if (data.raptorStopsForStopId.get(((TransitStop)e3.getToVertex()).getStopId()) == cur.stop) {
                      state=e2.traverse(state);
                      state=e3.traverse(state);
                      break HOP;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return state;
}
