{
  if (options.rctx == null) {
    options.setRoutingContext(graphService.getGraph(options.getRouterId()));
    options.rctx.pathParsers=new PathParser[1];
    options.rctx.pathParsers[0]=new BasicPathParser();
  }
  if (!options.getModes().isTransit()) {
    return sptService.getShortestPathTree(options).getPaths();
  }
  Graph graph=graphService.getGraph(options.getRouterId());
  RaptorData data=graph.getService(RaptorDataService.class).getData();
  RoutingRequest walkOptions=options.clone();
  walkOptions.rctx.pathParsers=new PathParser[0];
  TraverseModeSet modes=options.getModes().clone();
  modes.setTransit(false);
  walkOptions.setModes(modes);
  RaptorSearch routeSet=new RaptorSearch(data,options);
  if (data.maxTransitRegions != null) {
    Calendar tripDate=Calendar.getInstance(graph.getTimeZone());
    tripDate.setTime(new Date(1000L * options.dateTime));
    Calendar maxTransitStart=Calendar.getInstance(graph.getTimeZone());
    maxTransitStart.set(Calendar.YEAR,data.maxTransitRegions.startYear);
    maxTransitStart.set(Calendar.MONTH,data.maxTransitRegions.startMonth);
    maxTransitStart.set(Calendar.DAY_OF_MONTH,data.maxTransitRegions.startDay);
    int day=0;
    while (tripDate.after(maxTransitStart)) {
      day++;
      tripDate.add(Calendar.DAY_OF_MONTH,-1);
    }
    if (day > data.maxTransitRegions.maxTransit.length || options.isWheelchairAccessible()) {
      day=-1;
    }
    routeSet.maxTimeDayIndex=day;
  }
  double initialWalk=options.getMaxWalkDistance();
  RETRY:   do {
    for (int i=0; i < options.getMaxTransfers() + 2; ++i) {
      round(data,options,walkOptions,routeSet,i);
      if (routeSet.getTargetStates().size() >= options.getNumItineraries())       break RETRY;
    }
    if (routeSet.getTargetStates().size() > 0)     break RETRY;
    options.setMaxWalkDistance(options.getMaxWalkDistance() * 2);
    routeSet.bounder=new TargetBound(options);
  }
 while (options.getMaxWalkDistance() < initialWalk * MAX_WALK_MULTIPLE && initialWalk < Double.MAX_VALUE);
  if (routeSet.getTargetStates().isEmpty()) {
    log.info("RAPTOR found no paths (try retrying?)");
  }
  List<GraphPath> paths=new ArrayList<GraphPath>();
  for (  RaptorState targetState : routeSet.getTargetStates()) {
    ArrayList<RaptorState> states=new ArrayList<RaptorState>();
    RaptorState cur=targetState;
    while (cur != null) {
      states.add(cur);
      cur=cur.parent;
    }
    State state=getState(options,data,states);
    paths.add(new GraphPath(state,true));
  }
  return paths;
}
