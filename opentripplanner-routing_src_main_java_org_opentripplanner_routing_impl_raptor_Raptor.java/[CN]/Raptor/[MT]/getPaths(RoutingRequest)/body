{
  final Graph graph=graphService.getGraph(options.getRouterId());
  if (options.rctx == null) {
    options.setRoutingContext(graph);
    options.rctx.pathParsers=new PathParser[1];
    options.rctx.pathParsers[0]=new BasicPathParser();
  }
  if (!options.getModes().isTransit()) {
    return sptService.getShortestPathTree(options).getPaths();
  }
  RaptorData data=graph.getService(RaptorDataService.class).getData();
  double initialWalk=options.getMaxWalkDistance() * 1.1;
  options.setMaxWalkDistance(initialWalk);
  RoutingRequest walkOptions=options.clone();
  walkOptions.rctx.pathParsers=new PathParser[0];
  TraverseModeSet modes=options.getModes().clone();
  modes.setTransit(false);
  walkOptions.setModes(modes);
  RaptorSearch search=new RaptorSearch(data,options);
  if (data.maxTransitRegions != null) {
    Calendar tripDate=Calendar.getInstance(graph.getTimeZone());
    tripDate.setTime(new Date(1000L * options.dateTime));
    Calendar maxTransitStart=Calendar.getInstance(graph.getTimeZone());
    maxTransitStart.set(Calendar.YEAR,data.maxTransitRegions.startYear);
    maxTransitStart.set(Calendar.MONTH,data.maxTransitRegions.startMonth);
    maxTransitStart.set(Calendar.DAY_OF_MONTH,data.maxTransitRegions.startDay);
    int day=0;
    while (tripDate.after(maxTransitStart)) {
      day++;
      tripDate.add(Calendar.DAY_OF_MONTH,-1);
    }
    if (day > data.maxTransitRegions.maxTransit.length || options.isWheelchairAccessible()) {
      day=-1;
    }
    search.maxTimeDayIndex=day;
  }
  long searchBeginTime=System.currentTimeMillis();
  int bestElapsedTime=Integer.MAX_VALUE;
  RETRY:   do {
    for (int i=0; i < options.getMaxTransfers() + 2; ++i) {
      round(data,options,walkOptions,search,i);
      long elapsed=System.currentTimeMillis() - searchBeginTime;
      if (elapsed > multiPathTimeout * 1000 && multiPathTimeout > 0 && search.getTargetStates().size() > 0)       break RETRY;
      if (search.getTargetStates().size() >= options.getNumItineraries()) {
        int oldBest=bestElapsedTime;
        for (        RaptorState state : search.getTargetStates()) {
          final int elapsedTime=(int)Math.abs(state.arrivalTime - options.dateTime);
          if (elapsedTime < bestElapsedTime) {
            bestElapsedTime=elapsedTime;
          }
        }
        int improvement=oldBest - bestElapsedTime;
        if (improvement < 600)         break RETRY;
      }
    }
    options.setMaxWalkDistance(options.getMaxWalkDistance() * 2);
    walkOptions.setMaxWalkDistance(options.getMaxWalkDistance());
    options.setWalkReluctance(options.getWalkReluctance() * 2);
    walkOptions.setWalkReluctance(options.getWalkReluctance());
    search.reset(options);
  }
 while (options.getMaxWalkDistance() < initialWalk * MAX_WALK_MULTIPLE && initialWalk < Double.MAX_VALUE);
  List<RaptorState> targetStates=search.getTargetStates();
  if (targetStates.isEmpty()) {
    log.info("RAPTOR found no paths (try retrying?)");
  }
  Collections.sort(targetStates);
  List<GraphPath> paths=new ArrayList<GraphPath>();
  for (  RaptorState targetState : targetStates) {
    ArrayList<RaptorState> states=new ArrayList<RaptorState>();
    RaptorState cur=targetState;
    while (cur != null) {
      states.add(cur);
      cur=cur.parent;
    }
    State state=getState(options,data,states);
    paths.add(new GraphPath(state,true));
  }
  return paths;
}
