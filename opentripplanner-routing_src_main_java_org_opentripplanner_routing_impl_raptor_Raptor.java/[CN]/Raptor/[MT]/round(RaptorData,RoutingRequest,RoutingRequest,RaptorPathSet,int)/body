{
  Collection<RaptorRoute> routesToVisit=new HashSet<RaptorRoute>();
  Set<RaptorStop> visitedLastRound=cur.visitedLastRound;
  List<RaptorState> createdStates=new ArrayList<RaptorState>();
  List<RaptorState>[] statesByStop=cur.getStates();
  for (  RaptorStop stop : visitedLastRound) {
    for (    RaptorRoute route : data.routesForStop[stop.index]) {
      routesToVisit.add(route);
    }
  }
  cur.visitedLastRound=new HashSet<RaptorStop>();
  int boardSlack=nBoardings == 1 ? options.getBoardSlack() : (options.getTransferSlack() - options.getAlightSlack());
  int trips=0;
  System.out.println("Round " + nBoardings);
  final double distanceToNearestTransitStop=options.rctx.target.getDistanceToNearestTransitStop();
  for (  RaptorRoute route : routesToVisit) {
    List<RaptorState> boardStates=new ArrayList<RaptorState>();
    boolean started=false;
    for (int stopNo=0; stopNo < route.getNStops(); ++stopNo) {
      RaptorStop stop=route.stops[stopNo];
      if (!started && !visitedLastRound.contains(stop))       continue;
      started=true;
      List<RaptorState> states=statesByStop[stop.index];
      List<RaptorState> newStates=new ArrayList<RaptorState>();
      if (states == null) {
        states=new ArrayList<RaptorState>();
        statesByStop[stop.index]=states;
      }
      CONTINUE:       for (      RaptorState boardState : boardStates) {
        RaptorState newState=new RaptorState();
        ServiceDay sd=boardState.serviceDay;
        if (!route.boards[0][boardState.patternIndex].getPattern().canAlight(stopNo)) {
          continue;
        }
        int alightTime=route.getAlightTime(boardState.tripTimes,stopNo);
        newState.arrivalTime=(int)sd.time(alightTime);
        newState.arrivalTime+=options.getAlightSlack();
        newState.boardStop=boardState.boardStop;
        newState.boardStopSequence=boardState.boardStopSequence;
        newState.route=route;
        newState.patternIndex=boardState.patternIndex;
        newState.tripTimes=boardState.tripTimes;
        newState.nBoardings=boardState.nBoardings;
        newState.walkDistance=boardState.walkDistance;
        newState.parent=boardState.parent;
        newState.stop=stop;
        for (        RaptorState oldState : states) {
          if (eDominates(oldState,newState)) {
            continue CONTINUE;
          }
        }
        for (        RaptorState oldState : newStates) {
          if (eDominates(oldState,newState)) {
            continue CONTINUE;
          }
        }
        Iterator<RaptorState> it=states.iterator();
        while (it.hasNext()) {
          RaptorState oldState=it.next();
          if (eDominates(newState,oldState)) {
            it.remove();
          }
        }
        it=newStates.iterator();
        while (it.hasNext()) {
          RaptorState oldState=it.next();
          if (eDominates(newState,oldState)) {
            it.remove();
          }
        }
        cur.visitedLastRound.add(stop);
        cur.visitedEver.add(stop);
        newStates.add(newState);
      }
      if (stopNo < route.getNStops() - 1) {
        if (stop.stopVertex.isLocal() && nBoardings > 1) {
          createdStates.addAll(newStates);
          states.addAll(newStates);
          continue;
        }
        TRYBOARD:         for (        RaptorState oldState : states) {
          if (oldState.nBoardings != nBoardings - 1)           continue;
          if (oldState.route == route)           continue;
          ++trips;
          RaptorBoardSpec boardSpec=route.getTripIndex(options,oldState.arrivalTime + boardSlack,stopNo);
          if (boardSpec == null)           continue;
          RaptorState boardState=new RaptorState();
          boardState.nBoardings=nBoardings;
          boardState.boardStop=stop;
          boardState.boardStopSequence=stopNo;
          boardState.arrivalTime=boardSpec.departureTime;
          boardState.patternIndex=boardSpec.patternIndex;
          boardState.tripTimes=boardSpec.tripTimes;
          boardState.parent=oldState;
          boardState.serviceDay=boardSpec.serviceDay;
          boardState.route=route;
          boardState.walkDistance=oldState.walkDistance;
          for (          RaptorState state : newStates) {
            if (eDominates(state,boardState)) {
              continue TRYBOARD;
            }
          }
          boardStates.add(boardState);
        }
      }
      createdStates.addAll(newStates);
      states.addAll(newStates);
    }
  }
  System.out.println("Trips: " + trips);
  ShortestPathTree spt;
  GenericDijkstra dijkstra=new GenericDijkstra(walkOptions);
  if (nBoardings == 0) {
    MaxWalkState start=new MaxWalkState(options.rctx.origin,walkOptions);
    spt=dijkstra.getShortestPathTree(start);
    RoutingRequest reversedWalkOptions=walkOptions.clone();
    reversedWalkOptions.setArriveBy(true);
    GenericDijkstra destDijkstra=new GenericDijkstra(reversedWalkOptions);
    start=new MaxWalkState(options.rctx.target,reversedWalkOptions);
    ShortestPathTree targetSpt=destDijkstra.getShortestPathTree(start);
    for (    State state : targetSpt.getAllStates()) {
      final Vertex vertex=state.getVertex();
      if (!(vertex instanceof TransitStop))       continue;
      RaptorStop stop=data.raptorStopsForStopId.get(((TransitStop)vertex).getStopId());
      if (stop == null) {
        continue;
      }
      cur.addStopNearTarget(stop,state.getWalkDistance(),(int)state.getElapsedTime());
    }
  }
 else {
    final List<MaxWalkState> startPoints=new ArrayList<MaxWalkState>();
    STARTWALK:     for (    RaptorState state : createdStates) {
      if (false) {
        double maxWalk=options.getMaxWalkDistance() - state.walkDistance - distanceToNearestTransitStop;
        CHECK:         for (        T2<Double,RaptorStop> nearby : data.nearbyStops[state.stop.index]) {
          double distance=nearby.getFirst();
          RaptorStop stop=nearby.getSecond();
          if (distance > maxWalk) {
            continue STARTWALK;
          }
          double minWalk=distance + state.walkDistance;
          int minArrive=(int)(state.arrivalTime + distance / options.getSpeedUpperBound());
          if (statesByStop[stop.index] == null) {
            break CHECK;
          }
          for (          RaptorState other : statesByStop[stop.index]) {
            if (other.nBoardings == nBoardings - 1 && (other.walkDistance > minWalk || other.arrivalTime > minArrive)) {
              break CHECK;
            }
          }
        }
      }
      Vertex stopVertex=state.stop.stopVertex;
      Vertex dest=options.rctx.target;
      double minWalk=distanceToNearestTransitStop;
      double targetDistance=cur.bounder.getTargetDistance(stopVertex);
      double minTime=(targetDistance - minWalk) / MAX_TRANSIT_SPEED + minWalk / options.getSpeedUpperBound();
      if (targetDistance + state.walkDistance > options.getMaxWalkDistance()) {
        if (state.stop.stopVertex.isLocal())         continue;
        minTime+=boardSlack;
      }
      if (minWalk + state.walkDistance > options.getMaxWalkDistance()) {
        continue;
      }
      StateEditor dijkstraState=new MaxWalkState.MaxWalkStateEditor(walkOptions,stopVertex);
      dijkstraState.setNumBoardings(state.nBoardings);
      dijkstraState.setWalkDistance(state.walkDistance);
      dijkstraState.setStartTime(state.arrivalTime);
      dijkstraState.setTime(state.arrivalTime);
      dijkstraState.setExtension("raptorParent",state);
      dijkstraState.setOptions(walkOptions);
      dijkstraState.incrementWeight(state.arrivalTime - options.dateTime);
      MaxWalkState newState=(MaxWalkState)dijkstraState.makeState();
      startPoints.add(newState);
    }
    if (startPoints.size() == 0) {
      System.out.println("warning: no walk in round " + nBoardings);
      return;
    }
    System.out.println("walk starts: " + startPoints.size() + " / "+ cur.visitedEver.size());
    dijkstra.setPriorityQueueFactory(new PrefilledPriorityQueueFactory(startPoints.subList(1,startPoints.size())));
    TargetBound bounder=cur.bounder;
    dijkstra.setShortestPathTreeFactory(bounder);
    bounder.addSptStates(startPoints.subList(1,startPoints.size()));
    dijkstra.setSearchTerminationStrategy(bounder);
    dijkstra.setSkipTraverseResultStrategy(bounder);
    dijkstra.setHeuristic(bounder);
    spt=dijkstra.getShortestPathTree(startPoints.get(0));
  }
  final List<? extends State> targetStates=spt.getStates(walkOptions.rctx.target);
  if (targetStates != null) {
    TARGET:     for (    State targetState : targetStates) {
      RaptorState state=new RaptorState();
      RaptorState parent=(RaptorState)targetState.getExtension("raptorParent");
      state.parent=parent;
      state.walkDistance=targetState.getWalkDistance();
      state.arrivalTime=(int)targetState.getTime();
      if (parent != null) {
        state.nBoardings=parent.nBoardings;
        state.waitingTime=parent.waitingTime;
      }
      state.walkPath=targetState;
      for (      RaptorState oldState : cur.getTargetStates()) {
        if (eDominates(oldState,state)) {
          continue TARGET;
        }
      }
      cur.addTargetState(state);
      System.out.println("TARGET: " + state);
    }
  }
  for (  State state : cur.bounder.removedBoundingStates) {
    cur.removeTargetState(state);
  }
  SPTSTATE:   for (  State state : spt.getAllStates()) {
    final Vertex vertex=state.getVertex();
    if (!(vertex instanceof TransitStop))     continue;
    RaptorStop stop=data.raptorStopsForStopId.get(((TransitStop)vertex).getStopId());
    if (stop == null) {
      continue;
    }
    double minWalk=distanceToNearestTransitStop;
    double targetDistance=distanceLibrary.fastDistance(options.rctx.target.getCoordinate(),vertex.getCoordinate());
    double minTime=(targetDistance - minWalk) / MAX_TRANSIT_SPEED + minWalk / options.getSpeedUpperBound();
    final double remainingWalk=options.maxWalkDistance - state.getWalkDistance();
    if (targetDistance > remainingWalk)     minTime+=boardSlack;
    if (cur.maxTimeDayIndex > 0 && remainingWalk < 3218) {
      int maxTimeForVertex=0;
      for (      StopNearTarget stopNearTarget : cur.stopsNearTarget.values()) {
        int destinationRegion=stopNearTarget.stop.stopVertex.getGroupIndex();
        int region=vertex.getGroupIndex();
        final int maxTimeFromThisRegion=data.maxTransitRegions.maxTransit[cur.maxTimeDayIndex][destinationRegion][region];
        int maxTime=(int)((state.getTime() - options.dateTime) + maxTimeFromThisRegion + stopNearTarget.time);
        if (maxTime > maxTimeForVertex) {
          maxTimeForVertex=maxTime;
        }
      }
      if (maxTimeForVertex < cur.maxTime) {
        cur.maxTime=maxTimeForVertex;
      }
 else {
        if ((state.getTime() - options.dateTime) + minTime > cur.maxTime * 1.5) {
          continue;
        }
      }
    }
    List<RaptorState> states=statesByStop[stop.index];
    if (states == null) {
      states=new ArrayList<RaptorState>();
      statesByStop[stop.index]=states;
    }
    RaptorState baseState=(RaptorState)state.getExtension("raptorParent");
    RaptorState newState=new RaptorState();
    if (baseState != null) {
      newState.nBoardings=baseState.nBoardings;
    }
    newState.walkDistance=state.getWalkDistance();
    newState.arrivalTime=(int)state.getTime();
    newState.walkPath=state;
    newState.parent=baseState;
    newState.stop=stop;
    for (    RaptorState oldState : states) {
      if (eDominates(oldState,newState)) {
        continue SPTSTATE;
      }
    }
    cur.visitedLastRound.add(stop);
    cur.visitedEver.add(stop);
    states.add(newState);
  }
}
