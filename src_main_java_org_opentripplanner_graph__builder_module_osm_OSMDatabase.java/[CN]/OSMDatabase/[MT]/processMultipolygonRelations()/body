{
  RELATION:   for (  OSMRelation relation : relationsById.values()) {
    if (processedAreas.contains(relation)) {
      continue;
    }
    if (!(relation.isTag("type","multipolygon") && (OSMFilter.isOsmEntityRoutable(relation) || relation.isParkAndRide()))) {
      continue;
    }
    ArrayList<OSMWay> innerWays=new ArrayList<OSMWay>();
    ArrayList<OSMWay> outerWays=new ArrayList<OSMWay>();
    for (    OSMRelationMember member : relation.getMembers()) {
      String role=member.getRole();
      OSMWay way=areaWaysById.get(member.getRef());
      if (way == null) {
        continue RELATION;
      }
      for (      Long nodeId : way.getNodeRefs()) {
        if (!nodesById.containsKey(nodeId)) {
          continue RELATION;
        }
        MapUtils.addToMapSet(areasForNode,nodeId,way);
      }
      if (role.equals("inner")) {
        innerWays.add(way);
      }
 else       if (role.equals("outer")) {
        outerWays.add(way);
      }
 else {
        LOG.warn("Unexpected role " + role + " in multipolygon");
      }
    }
    processedAreas.add(relation);
    try {
      newArea(new Area(relation,outerWays,innerWays,nodesById));
    }
 catch (    Area.AreaConstructionException|Ring.RingConstructionException e) {
      continue;
    }
    for (    OSMRelationMember member : relation.getMembers()) {
      if (!("way".equals(member.getType()) && waysById.containsKey(member.getRef()))) {
        continue;
      }
      OSMWithTags way=waysById.get(member.getRef());
      if (way == null) {
        continue;
      }
      String[] relationCopyTags={"highway","name","ref"};
      for (      String tag : relationCopyTags) {
        if (relation.hasTag(tag) && !way.hasTag(tag)) {
          way.addTag(tag,relation.getTag(tag));
        }
      }
      if (relation.isTag("railway","platform") && !way.hasTag("railway")) {
        way.addTag("railway","platform");
      }
      if (relation.isTag("public_transport","platform") && !way.hasTag("public_transport")) {
        way.addTag("public_transport","platform");
      }
    }
  }
}
