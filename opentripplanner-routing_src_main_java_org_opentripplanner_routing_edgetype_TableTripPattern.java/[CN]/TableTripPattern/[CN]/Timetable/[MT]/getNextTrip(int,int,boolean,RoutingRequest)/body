{
  boolean pickup=true;
  int mask=pickup ? MASK_PICKUP : MASK_DROPOFF;
  int shift=pickup ? SHIFT_PICKUP : SHIFT_DROPOFF;
  if ((perStopFlags[stopIndex] & mask) >> shift == NO_PICKUP) {
    return null;
  }
  boolean wheelchair=options.wheelchairAccessible;
  if (wheelchair && (perStopFlags[stopIndex] & FLAG_WHEELCHAIR_ACCESSIBLE) == 0) {
    return null;
  }
  if (departuresIndex != null) {
    TripTimes[] index=departuresIndex[stopIndex];
    int tripIndex=TripTimes.binarySearchDepartures(index,stopIndex,afterTime);
    while (tripIndex < index.length) {
      TripTimes tt=index[tripIndex];
      Trip t=tt.getTrip();
      if (tripAcceptable(t,haveBicycle,wheelchair) && !options.bannedTrips.contains(t.getId())) {
        return tt;
      }
      tripIndex+=1;
    }
    return null;
  }
  TripTimes bestTrip=null;
  int bestTime=Integer.MAX_VALUE;
  for (int i=0; i < trips.size(); i++) {
    TripTimes currTrip=tripTimes.get(i);
    int currTime=currTrip.getDepartureTime(stopIndex);
    if (currTime >= afterTime && currTime < bestTime && tripAcceptable(currTrip.getTrip(),haveBicycle,wheelchair) && !options.bannedTrips.contains(trips.get(i).getId())) {
      bestTrip=currTrip;
      bestTime=currTime;
    }
  }
  return bestTrip;
}
