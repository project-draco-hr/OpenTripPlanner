{
  int tripIndex=getTripIndex(block.tripId);
  if (tripIndex == -1) {
    LOG.info("tripId {} not found in pattern.",block.tripId);
    return false;
  }
 else {
    LOG.trace("tripId {} found at index {} (in scheduled timetable)",block.tripId,tripIndex);
  }
  int stopIndex=block.findUpdateStopIndex(TableTripPattern.this);
  if (stopIndex == UpdateBlock.MATCH_FAILED) {
    LOG.warn("Unable to match update block to stopIds.");
    return false;
  }
  TripTimes existingTimes=getTripTimes(tripIndex);
  ScheduledTripTimes scheduledTimes=existingTimes.getScheduledTripTimes();
  TripTimes newTimes=new UpdatedTripTimes(scheduledTimes,block,stopIndex);
  if (!TripTimesUtil.timesIncreasing(newTimes)) {
    LOG.error("Resulting UpdatedTripTimes has non-increasing times.");
    LOG.error(block.toString());
    LOG.error(newTimes.toString());
    LOG.info("Falling back on DecayingDelayTripTimes.");
    int delay=newTimes.getDepartureTime(stopIndex) - scheduledTimes.getDepartureTime(stopIndex);
    newTimes=new DecayingDelayTripTimes(scheduledTimes,stopIndex,delay,0.7,false);
    LOG.error(newTimes.toString());
    if (!TripTimesUtil.timesIncreasing(newTimes)) {
      LOG.error("Even these trip times are non-increasing. Underlying schedule problem?");
      return false;
    }
  }
  this.tripTimes.set(tripIndex,newTimes);
  return true;
}
