{
  Graph graph=new Graph();
  TurnVertex top=new TurnVertex("top",GeometryUtils.makeLineString(-74.1,40.1,-74.0,40.1),"top",10000,false,null);
  TurnVertex bottom=new TurnVertex("bottom",GeometryUtils.makeLineString(-74.1,40.0,-74.0,40.0),"bottom",10000,false,null);
  TurnVertex left=new TurnVertex("left",GeometryUtils.makeLineString(-74.1,40.0,-74.1,40.1),"left",10000,false,null);
  TurnVertex right=new TurnVertex("right",GeometryUtils.makeLineString(-74.0,40.0,-74.0,40.1),"right",10000,false,null);
  TurnVertex topBack=new TurnVertex("topBack",GeometryUtils.makeLineString(-74.0,40.1,-74.1,40.1),"topBack",10000,true,null);
  TurnVertex bottomBack=new TurnVertex("bottomBack",GeometryUtils.makeLineString(-74.0,40.0,-74.1,40.0),"bottomBack",10000,true,null);
  TurnVertex leftBack=new TurnVertex("leftBack",GeometryUtils.makeLineString(-74.0,40.1,-74.1,40.0),"leftBack",10000,true,null);
  TurnVertex rightBack=new TurnVertex("rightBack",GeometryUtils.makeLineString(-74.0,40.1,-74.0,40.0),"rightBack",10000,true,null);
  graph.addVertex(top);
  graph.addVertex(bottom);
  graph.addVertex(left);
  graph.addVertex(right);
  graph.addVertex(topBack);
  graph.addVertex(bottomBack);
  graph.addVertex(leftBack);
  graph.addVertex(rightBack);
  IntersectionVertex tlIn=(IntersectionVertex)graph.addVertex(new IntersectionVertex("tl in",-74.1,40.1));
  IntersectionVertex trIn=(IntersectionVertex)graph.addVertex(new IntersectionVertex("tr in",-74.0,40.1));
  IntersectionVertex blIn=(IntersectionVertex)graph.addVertex(new IntersectionVertex("bl in",-74.0,40.0));
  IntersectionVertex brIn=(IntersectionVertex)graph.addVertex(new IntersectionVertex("br in",-74.1,40.0));
  Vertex tlOut=graph.addVertex(new IntersectionVertex("tl out",-74.1,40.1));
  Vertex trOut=graph.addVertex(new IntersectionVertex("tr out",-74.0,40.1));
  Vertex blOut=graph.addVertex(new IntersectionVertex("bl out",-74.0,40.0));
  Vertex brOut=graph.addVertex(new IntersectionVertex("br out",-74.1,40.0));
  graph.addVerticesFromEdge(new FreeEdge(tlOut,top));
  graph.addVerticesFromEdge(new FreeEdge(tlOut,leftBack));
  graph.addVerticesFromEdge(new FreeEdge(trOut,topBack));
  graph.addVerticesFromEdge(new FreeEdge(trOut,rightBack));
  graph.addVerticesFromEdge(new FreeEdge(blOut,bottom));
  graph.addVerticesFromEdge(new FreeEdge(blOut,left));
  graph.addVerticesFromEdge(new FreeEdge(brOut,bottomBack));
  graph.addVerticesFromEdge(new FreeEdge(brOut,right));
  graph.addVerticesFromEdge(new OutEdge(topBack,tlIn));
  graph.addVerticesFromEdge(new OutEdge(left,tlIn));
  graph.addVerticesFromEdge(new OutEdge(top,trIn));
  graph.addVerticesFromEdge(new OutEdge(right,trIn));
  graph.addVerticesFromEdge(new OutEdge(bottomBack,blIn));
  graph.addVerticesFromEdge(new OutEdge(leftBack,blIn));
  graph.addVerticesFromEdge(new OutEdge(bottom,brIn));
  graph.addVerticesFromEdge(new OutEdge(rightBack,brIn));
  graph.addVerticesFromEdge(new TurnEdge(top,rightBack));
  graph.addVerticesFromEdge(new TurnEdge(rightBack,bottomBack));
  graph.addVerticesFromEdge(new TurnEdge(bottomBack,left));
  graph.addVerticesFromEdge(new TurnEdge(left,top));
  graph.addVerticesFromEdge(new TurnEdge(topBack,leftBack));
  graph.addVerticesFromEdge(new TurnEdge(leftBack,bottom));
  graph.addVerticesFromEdge(new TurnEdge(bottom,right));
  graph.addVerticesFromEdge(new TurnEdge(right,topBack));
  graph.addVerticesFromEdge(new MockTransfer(bottom,trIn,99999));
  graph.addVerticesFromEdge(new MockTransfer(bottomBack,trIn,99999));
  for (  Vertex gv : graph.getVertices()) {
    gv.setDistanceToNearestTransitStop(0);
  }
  TraverseOptions options=new TraverseOptions();
  ShortestPathTree spt=AStar.getShortestPathTree(graph,blOut,trIn,0,options);
  GraphPath path=spt.getPath(trIn,false);
  assertNotNull(path);
  boolean found=false;
  for (  State s : path.states) {
    if (s.getVertex() == bottom || s.getVertex() == bottomBack) {
      found=true;
    }
  }
  assertFalse(found);
  options.setMaxWalkDistance(10000);
  spt=AStar.getShortestPathTree(graph,blOut,trIn,0,options);
  path=spt.getPath(trIn,false);
  assertNotNull(path);
  found=false;
  for (  State s : path.states) {
    if (s.getVertex() == bottom || s.getVertex() == bottomBack) {
      found=true;
    }
  }
  assertTrue(found);
}
