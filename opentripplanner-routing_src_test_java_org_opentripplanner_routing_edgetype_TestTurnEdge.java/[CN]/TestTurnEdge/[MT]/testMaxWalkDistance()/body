{
  Graph graph=new Graph();
  StreetVertex top=new StreetVertex("top",GeometryUtils.makeLineString(-74.1,40.1,-74.0,40.1),"top",10000,false,null);
  StreetVertex bottom=new StreetVertex("bottom",GeometryUtils.makeLineString(-74.1,40.0,-74.0,40.0),"bottom",10000,false,null);
  StreetVertex left=new StreetVertex("left",GeometryUtils.makeLineString(-74.1,40.0,-74.1,40.1),"left",10000,false,null);
  StreetVertex right=new StreetVertex("right",GeometryUtils.makeLineString(-74.0,40.0,-74.0,40.1),"right",10000,false,null);
  StreetVertex topBack=new StreetVertex("topBack",GeometryUtils.makeLineString(-74.0,40.1,-74.1,40.1),"topBack",10000,true,null);
  StreetVertex bottomBack=new StreetVertex("bottomBack",GeometryUtils.makeLineString(-74.0,40.0,-74.1,40.0),"bottomBack",10000,true,null);
  StreetVertex leftBack=new StreetVertex("leftBack",GeometryUtils.makeLineString(-74.0,40.1,-74.1,40.0),"leftBack",10000,true,null);
  StreetVertex rightBack=new StreetVertex("rightBack",GeometryUtils.makeLineString(-74.0,40.1,-74.0,40.0),"rightBack",10000,true,null);
  graph.addVertex(top);
  graph.addVertex(bottom);
  graph.addVertex(left);
  graph.addVertex(right);
  graph.addVertex(topBack);
  graph.addVertex(bottomBack);
  graph.addVertex(leftBack);
  graph.addVertex(rightBack);
  EndpointVertex tlIn=(EndpointVertex)graph.addVertex(new EndpointVertex("tl in",-74.1,40.1));
  EndpointVertex trIn=(EndpointVertex)graph.addVertex(new EndpointVertex("tr in",-74.0,40.1));
  EndpointVertex blIn=(EndpointVertex)graph.addVertex(new EndpointVertex("bl in",-74.0,40.0));
  EndpointVertex brIn=(EndpointVertex)graph.addVertex(new EndpointVertex("br in",-74.1,40.0));
  Vertex tlOut=graph.addVertex(new EndpointVertex("tl out",-74.1,40.1));
  Vertex trOut=graph.addVertex(new EndpointVertex("tr out",-74.0,40.1));
  Vertex blOut=graph.addVertex(new EndpointVertex("bl out",-74.0,40.0));
  Vertex brOut=graph.addVertex(new EndpointVertex("br out",-74.1,40.0));
  graph.addEdge(new FreeEdge(tlOut,top));
  graph.addEdge(new FreeEdge(tlOut,leftBack));
  graph.addEdge(new FreeEdge(trOut,topBack));
  graph.addEdge(new FreeEdge(trOut,rightBack));
  graph.addEdge(new FreeEdge(blOut,bottom));
  graph.addEdge(new FreeEdge(blOut,left));
  graph.addEdge(new FreeEdge(brOut,bottomBack));
  graph.addEdge(new FreeEdge(brOut,right));
  graph.addEdge(new OutEdge(topBack,tlIn));
  graph.addEdge(new OutEdge(left,tlIn));
  graph.addEdge(new OutEdge(top,trIn));
  graph.addEdge(new OutEdge(right,trIn));
  graph.addEdge(new OutEdge(bottomBack,blIn));
  graph.addEdge(new OutEdge(leftBack,blIn));
  graph.addEdge(new OutEdge(bottom,brIn));
  graph.addEdge(new OutEdge(rightBack,brIn));
  graph.addEdge(new TurnEdge(top,rightBack));
  graph.addEdge(new TurnEdge(rightBack,bottomBack));
  graph.addEdge(new TurnEdge(bottomBack,left));
  graph.addEdge(new TurnEdge(left,top));
  graph.addEdge(new TurnEdge(topBack,leftBack));
  graph.addEdge(new TurnEdge(leftBack,bottom));
  graph.addEdge(new TurnEdge(bottom,right));
  graph.addEdge(new TurnEdge(right,topBack));
  graph.addEdge(new MockTransfer(bottom,trIn,99999));
  graph.addEdge(new MockTransfer(bottomBack,trIn,99999));
  for (  Vertex gv : graph.getVertices()) {
    gv.setDistanceToNearestTransitStop(0);
  }
  TraverseOptions options=new TraverseOptions();
  ShortestPathTree spt=AStar.getShortestPathTree(graph,blOut,trIn,0,options);
  GraphPath path=spt.getPath(trIn,false);
  assertNotNull(path);
  boolean found=false;
  for (  State s : path.states) {
    if (s.getVertex() == bottom || s.getVertex() == bottomBack) {
      found=true;
    }
  }
  assertFalse(found);
  options.setMaxWalkDistance(10000);
  spt=AStar.getShortestPathTree(graph,blOut,trIn,0,options);
  path=spt.getPath(trIn,false);
  assertNotNull(path);
  found=false;
  for (  State s : path.states) {
    if (s.getVertex() == bottom || s.getVertex() == bottomBack) {
      found=true;
    }
  }
  assertTrue(found);
}
