{
  Graph graph=new Graph();
  TurnVertex top=new TurnVertex(graph,"top",GeometryUtils.makeLineString(-74.1,40.1,-74.0,40.1),"top",10000,false,null);
  TurnVertex bottom=new TurnVertex(graph,"bottom",GeometryUtils.makeLineString(-74.1,40.0,-74.0,40.0),"bottom",10000,false,null);
  TurnVertex left=new TurnVertex(graph,"left",GeometryUtils.makeLineString(-74.1,40.0,-74.1,40.1),"left",10000,false,null);
  TurnVertex right=new TurnVertex(graph,"right",GeometryUtils.makeLineString(-74.0,40.0,-74.0,40.1),"right",10000,false,null);
  TurnVertex topBack=new TurnVertex(graph,"topBack",GeometryUtils.makeLineString(-74.0,40.1,-74.1,40.1),"topBack",10000,true,null);
  TurnVertex bottomBack=new TurnVertex(graph,"bottomBack",GeometryUtils.makeLineString(-74.0,40.0,-74.1,40.0),"bottomBack",10000,true,null);
  TurnVertex leftBack=new TurnVertex(graph,"leftBack",GeometryUtils.makeLineString(-74.0,40.1,-74.1,40.0),"leftBack",10000,true,null);
  TurnVertex rightBack=new TurnVertex(graph,"rightBack",GeometryUtils.makeLineString(-74.0,40.1,-74.0,40.0),"rightBack",10000,true,null);
  IntersectionVertex tlIn=new IntersectionVertex(graph,"tl in",-74.1,40.1);
  IntersectionVertex trIn=new IntersectionVertex(graph,"tr in",-74.0,40.1);
  IntersectionVertex blIn=new IntersectionVertex(graph,"bl in",-74.0,40.0);
  IntersectionVertex brIn=new IntersectionVertex(graph,"br in",-74.1,40.0);
  Vertex tlOut=new IntersectionVertex(graph,"tl out",-74.1,40.1);
  Vertex trOut=new IntersectionVertex(graph,"tr out",-74.0,40.1);
  Vertex blOut=new IntersectionVertex(graph,"bl out",-74.0,40.0);
  Vertex brOut=new IntersectionVertex(graph,"br out",-74.1,40.0);
  new FreeEdge(tlOut,top);
  new FreeEdge(tlOut,leftBack);
  new FreeEdge(trOut,topBack);
  new FreeEdge(trOut,rightBack);
  new FreeEdge(blOut,bottom);
  new FreeEdge(blOut,left);
  new FreeEdge(brOut,bottomBack);
  new FreeEdge(brOut,right);
  new OutEdge(topBack,tlIn);
  new OutEdge(left,tlIn);
  new OutEdge(top,trIn);
  new OutEdge(right,trIn);
  new OutEdge(bottomBack,blIn);
  new OutEdge(leftBack,blIn);
  new OutEdge(bottom,brIn);
  new OutEdge(rightBack,brIn);
  new TurnEdge(top,rightBack);
  new TurnEdge(rightBack,bottomBack);
  new TurnEdge(bottomBack,left);
  new TurnEdge(left,top);
  new TurnEdge(topBack,leftBack);
  new TurnEdge(leftBack,bottom);
  new TurnEdge(bottom,right);
  new TurnEdge(right,topBack);
  new MockTransfer(bottom,trIn,99999);
  new MockTransfer(bottomBack,trIn,99999);
  for (  Vertex gv : graph.getVertices()) {
    gv.setDistanceToNearestTransitStop(0);
  }
  TraverseOptions options=new TraverseOptions();
  ShortestPathTree spt=AStar.getShortestPathTree(graph,blOut,trIn,0,options);
  GraphPath path=spt.getPath(trIn,false);
  assertNotNull(path);
  boolean found=false;
  for (  State s : path.states) {
    if (s.getVertex() == bottom || s.getVertex() == bottomBack) {
      found=true;
    }
  }
  assertFalse(found);
  options.setMaxWalkDistance(10000);
  spt=AStar.getShortestPathTree(graph,blOut,trIn,0,options);
  path=spt.getPath(trIn,false);
  assertNotNull(path);
  found=false;
  for (  State s : path.states) {
    if (s.getVertex() == bottom || s.getVertex() == bottomBack) {
      found=true;
    }
  }
  assertTrue(found);
}
