{
  final TraverseMode mode=preferredMode != null ? preferredMode : TraverseMode.TRANSIT;
  RoutingRequest routingRequest=new RoutingRequest();
  routingRequest.setArriveBy(dateTime < 0);
  routingRequest.dateTime=Math.abs(dateTime);
  if (fromVertex != null && !fromVertex.isEmpty()) {
    routingRequest.setFrom(new GenericLocation(null,"MMRI_" + fromVertex));
  }
  if (toVertex != null && !toVertex.isEmpty()) {
    routingRequest.setTo(new GenericLocation(null,"MMRI_" + toVertex));
  }
  if (onTripId != null && !onTripId.isEmpty()) {
    routingRequest.setStartingTransitTripId(new AgencyAndId("MMRI",onTripId));
  }
  routingRequest.setRoutingContext(graph);
  routingRequest.setWheelchairAccessible(wheelchairAccessible);
  routingRequest.setTransferPenalty(preferLeastTransfers ? 300 : 0);
  routingRequest.setModes(new TraverseModeSet(TraverseMode.WALK,mode));
  if (excludedRoute != null && !excludedRoute.isEmpty()) {
    routingRequest.setBannedRoutes("MMRI__" + excludedRoute);
  }
  if (excludedStop != null && !excludedStop.isEmpty()) {
    routingRequest.setBannedStopsHard("MMRI_" + excludedStop);
  }
  routingRequest.setOtherThanPreferredRoutesPenalty(0);
  routingRequest.setWalkBoardCost(0);
  routingRequest.rctx.serviceDays=serviceDayList;
  TripPlan tripPlan=planGenerator.generate(routingRequest);
  Itinerary itinerary=tripPlan.itinerary.get(0);
  assertEquals(legCount,itinerary.legs.size());
  return itinerary.legs.toArray(new Leg[legCount]);
}
