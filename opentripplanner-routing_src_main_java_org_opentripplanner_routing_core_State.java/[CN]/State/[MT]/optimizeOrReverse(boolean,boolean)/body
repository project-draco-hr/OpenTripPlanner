{
  State orig=this;
  State unoptimized=orig;
  State ret=orig.reversedClone();
  long newInitialWaitTime=-1;
  boolean needToFigureInAdditionalWaitTime=false;
  PathParser pathParsers[];
  pathParsers=stateData.opt.rctx.pathParsers;
  stateData.opt.rctx.pathParsers=new PathParser[0];
  Edge edge=null;
  while (orig.getBackState() != null) {
    edge=orig.getBackEdge();
    if (optimize) {
      if (edge instanceof PatternBoard && orig.getNumBoardings() == 1 && forward)       ret=((PatternBoard)edge).traverse(ret,orig.getBackState().getTime());
 else       ret=edge.traverse(ret);
      if (ret == null) {
        LOG.warn("Cannot reverse path at edge: " + edge + ", returning unoptimized path. If edge is a "+ "PatternInterlineDwell, this is not totally unexpected; "+ "otherwise, you might want to look into it");
        stateData.opt.rctx.pathParsers=pathParsers;
        if (forward)         return this;
 else         return unoptimized.reverse();
      }
    }
 else {
      EdgeNarrative narrative=orig.getBackEdgeNarrative();
      StateEditor editor=ret.edit(edge,narrative);
      editor.setFromState(orig);
      editor.incrementTimeInSeconds(orig.getAbsTimeDeltaSec());
      editor.incrementWeight(orig.getWeightDelta());
      editor.incrementWalkDistance(orig.getWalkDistanceDelta());
      if (orig.isBikeRenting() != orig.getBackState().isBikeRenting())       editor.setBikeRenting(!orig.isBikeRenting());
      ret=editor.makeState();
      EdgeNarrative origNarrative=orig.getBackEdgeNarrative();
      EdgeNarrative retNarrative=ret.getBackEdgeNarrative();
      copyExistingNarrativeToNewNarrativeAsAppropriate(origNarrative,retNarrative);
    }
    orig=orig.getBackState();
  }
  stateData.opt.rctx.pathParsers=pathParsers;
  if (forward) {
    State reversed=ret.reverse();
    if (getWeight() <= reversed.getWeight())     LOG.warn("Optimization did not decrease weight: before " + this.getWeight() + " after "+ reversed.getWeight());
    if (getElapsedTime() != reversed.getElapsedTime())     LOG.warn("Optimization changed time: before " + this.getElapsedTime() + " after "+ reversed.getElapsedTime());
    if (getActiveTime() <= reversed.getActiveTime())     LOG.warn("Optimization increased active time: before " + this.getActiveTime() + " after "+ reversed.getActiveTime());
    return reversed;
  }
 else   return ret;
}
