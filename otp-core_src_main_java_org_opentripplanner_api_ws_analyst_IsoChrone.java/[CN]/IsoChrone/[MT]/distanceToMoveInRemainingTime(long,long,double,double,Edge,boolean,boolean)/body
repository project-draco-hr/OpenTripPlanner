{
  boolean isTooFast=false;
  String msg="";
  double originalTravelSpeed=edge.getDistance() / traverseTime;
  if (originalTravelSpeed < userSpeed) {
    if (edge instanceof PlainStreetEdge) {
      PlainStreetEdge pe=(PlainStreetEdge)edge;
      double maxSlope=pe.getElevationProfileSegment().getMaxSlope();
      if (maxSlope > 0.06) {
        userSpeed=originalTravelSpeed;
      }
    }
  }
 else {
    double vdiff=Math.abs(originalTravelSpeed - userSpeed);
    double vDiffPercent=vdiff / (userSpeed / 100.0);
    if (vDiffPercent > 20) {
      isTooFast=true;
      msg="v_traversed is much faster than (allowed) v_user, edgeName: " + edge.getName() + ", >>> (in m/s): v_traversed="+ (int)Math.floor(originalTravelSpeed)+ ", v_maxUser="+ (int)Math.floor(userSpeed);
      if (hasUshape) {
        msg=msg + ", known u-shape, ";
      }
      if ((usesCar == false) && (hasUshape == false)) {
        this.tooFastTraversedEdgeGeoms.add(edge.getGeometry());
        LOG.debug(msg);
      }
    }
  }
  if (usesCar) {
    if (edge instanceof PlainStreetEdge) {
      PlainStreetEdge pe=(PlainStreetEdge)edge;
      userSpeed=pe.getCarSpeed();
      if ((isTooFast == true) && (originalTravelSpeed > userSpeed) && (hasUshape == false)) {
        this.tooFastTraversedEdgeGeoms.add(edge.getGeometry());
        LOG.debug(msg + "; setting v_PlainStreetEdge=" + (int)Math.floor(userSpeed));
      }
    }
  }
  long timeMissing=maxTime - fromTime;
  double distanceToWalkInTimeMissing=timeMissing * userSpeed;
  return distanceToWalkInTimeMissing;
}
