{
  Graph gg=new Graph();
  OpenStreetMapModule loader=new OpenStreetMapModule();
  loader.setDefaultWayPropertySetSource(new DefaultWayPropertySetSource());
  FileBasedOpenStreetMapProviderImpl provider=new FileBasedOpenStreetMapProviderImpl();
  File file=new File(URLDecoder.decode(getClass().getResource("NYC_small.osm.gz").getFile(),"UTF-8"));
  provider.setPath(file);
  loader.setProvider(provider);
  loader.buildGraph(gg,extra);
  IntersectionVertex iv1=(IntersectionVertex)gg.getVertex("osm:node:1919595918");
  IntersectionVertex iv2=(IntersectionVertex)gg.getVertex("osm:node:42442273");
  IntersectionVertex iv3=(IntersectionVertex)gg.getVertex("osm:node:1919595927");
  IntersectionVertex iv4=(IntersectionVertex)gg.getVertex("osm:node:42452026");
  assertTrue(iv1.trafficLight);
  assertTrue(iv2.trafficLight);
  assertTrue(iv3.trafficLight);
  assertTrue(iv4.trafficLight);
  IntersectionVertex iv5=(IntersectionVertex)gg.getVertex("osm:node:42435485");
  IntersectionVertex iv6=(IntersectionVertex)gg.getVertex("osm:node:42439335");
  IntersectionVertex iv7=(IntersectionVertex)gg.getVertex("osm:node:42436761");
  IntersectionVertex iv8=(IntersectionVertex)gg.getVertex("osm:node:42442291");
  assertFalse(iv5.trafficLight);
  assertFalse(iv6.trafficLight);
  assertFalse(iv7.trafficLight);
  assertFalse(iv8.trafficLight);
  Set<P2<Integer>> edgeEndpoints=new HashSet<P2<Integer>>();
  for (  StreetEdge se : gg.getStreetEdges()) {
    P2<Integer> endpoints=new P2<Integer>(se.getFromVertex().getIndex(),se.getToVertex().getIndex());
    if (edgeEndpoints.contains(endpoints)) {
      assertFalse(true);
    }
    edgeEndpoints.add(endpoints);
  }
}
