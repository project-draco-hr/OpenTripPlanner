{
  Population population=new Population();
  LOG.debug("Loading population from shapefile {}",filename);
  LOG.debug("Feature attributes: id in {}, data in {}",idAttribute,dataAttribute);
  try {
    File file=new File(filename);
    FileDataStore store=FileDataStoreFinder.getDataStore(file);
    SimpleFeatureSource featureSource=store.getFeatureSource();
    CoordinateReferenceSystem sourceCRS=featureSource.getInfo().getCRS();
    CoordinateReferenceSystem WGS84=CRS.decode("EPSG:4326",true);
    Query query=new Query();
    query.setCoordinateSystem(sourceCRS);
    query.setCoordinateSystemReproject(WGS84);
    SimpleFeatureCollection featureCollection=featureSource.getFeatures(query);
    SimpleFeatureIterator it=featureCollection.features();
    int i=0, nonNull=0;
    while (it.hasNext()) {
      SimpleFeature feature=it.next();
      Geometry geom=(Geometry)feature.getDefaultGeometry();
      Point point=null;
      if (geom instanceof Point) {
        point=(Point)geom;
      }
 else       if (geom instanceof Polygon) {
        point=((Polygon)geom).getCentroid();
      }
 else {
        throw new IllegalStateException("Shapefile must contain either points or polygons.");
      }
      String id;
      if (idAttribute == null) {
        id=Integer.toString(i);
      }
 else {
        id=feature.getAttribute(idAttribute).toString();
      }
      double data=(Double)feature.getAttribute(dataAttribute);
      Individual individual=individualFactory.build(id,point.getX(),point.getY(),data);
      population.add(individual);
      i+=1;
      if (individual.sample != null)       nonNull+=1;
    }
    LOG.debug("found vertices for {} features out of {}",nonNull,i);
    it.close();
  }
 catch (  Exception ex) {
    throw new IllegalStateException("Error loading population from shapefile ",ex);
  }
  LOG.debug("Done loading shapefile.");
  return population;
}
