{
  TransitStop station0=mock(TransitStop.class);
  TransitStop station1=mock(TransitStop.class);
  TransitStop station2=mock(TransitStop.class);
  PatternDepartVertex depart=mock(PatternDepartVertex.class);
  PatternArriveVertex dwell=mock(PatternArriveVertex.class);
  PatternArriveVertex arrive=mock(PatternArriveVertex.class);
  Graph graph=mock(Graph.class);
  RoutingRequest routingRequest=mock(RoutingRequest.class);
  ServiceDay serviceDay=mock(ServiceDay.class);
  when(graph.getTimeZone()).thenReturn(TimeZone.getTimeZone("GMT"));
  ArrayList<Edge> hops=new ArrayList<Edge>(2);
  RoutingContext routingContext=new RoutingContext(routingRequest,graph,null,arrive);
  AgencyAndId agencyAndId=new AgencyAndId("Agency","ID");
  Route route=new Route();
  ArrayList<StopTime> stopTimes=new ArrayList<StopTime>(2);
  StopTime stopDepartTime=new StopTime();
  StopTime stopDwellTime=new StopTime();
  StopTime stopArriveTime=new StopTime();
  Stop stopDepart=new Stop();
  Stop stopDwell=new Stop();
  Stop stopArrive=new Stop();
  Trip trip=new Trip();
  routingContext.serviceDays=new ArrayList<ServiceDay>(Collections.singletonList(serviceDay));
  route.setId(agencyAndId);
  stopDepart.setId(new AgencyAndId("Station","0"));
  stopDwell.setId(new AgencyAndId("Station","1"));
  stopArrive.setId(new AgencyAndId("Station","2"));
  stopDepartTime.setStop(stopDepart);
  stopDepartTime.setDepartureTime(0);
  stopDwellTime.setArrivalTime(20);
  stopDwellTime.setStop(stopDwell);
  stopDwellTime.setDepartureTime(40);
  stopArriveTime.setArrivalTime(60);
  stopArriveTime.setStop(stopArrive);
  stopTimes.add(stopDepartTime);
  stopTimes.add(stopDwellTime);
  stopTimes.add(stopArriveTime);
  trip.setId(agencyAndId);
  TripTimes tripTimes=new TripTimes(trip,stopTimes);
  StopPattern stopPattern=new StopPattern(stopTimes);
  TripPattern tripPattern=new TripPattern(route,stopPattern);
  when(depart.getTripPattern()).thenReturn(tripPattern);
  when(dwell.getTripPattern()).thenReturn(tripPattern);
  PatternHop patternHop0=new PatternHop(depart,dwell,stopDepart,stopDwell,0);
  PatternHop patternHop1=new PatternHop(dwell,arrive,stopDwell,stopArrive,1);
  hops.add(patternHop0);
  hops.add(patternHop1);
  when(graph.getEdges()).thenReturn(hops);
  when(depart.getCoordinate()).thenReturn(new Coordinate(0,0));
  when(dwell.getCoordinate()).thenReturn(new Coordinate(0,0));
  when(arrive.getCoordinate()).thenReturn(new Coordinate(0,0));
  when(routingRequest.getFrom()).thenReturn(new GenericLocation());
  when(routingRequest.getStartingTransitTripId()).thenReturn(agencyAndId);
  when(graph.getVertex("Station_0")).thenReturn(station0);
  when(graph.getVertex("Station_1")).thenReturn(station1);
  when(graph.getVertex("Station_2")).thenReturn(station2);
  tripPattern.add(tripTimes);
  graph.index=new GraphIndex(graph);
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(0);
  assertEquals(station0,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(20);
  assertEquals(station1,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(30);
  assertEquals(station1,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(40);
  assertEquals(station1,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
  when(serviceDay.secondsSinceMidnight(anyInt())).thenReturn(60);
  assertEquals(station2,onBoardDepartServiceImpl.setupDepartOnBoard(routingContext));
}
