{
  LOG.info("Finding or building a TransportNetwork for ID {}",networkId);
  if (networkId.equals(currentNetworkId)) {
    LOG.info("Network ID has not changed. Reusing the last one that was built.");
    return currentNetwork;
  }
  File dataDirectory=new File(CACHE_DIR,networkId);
  if (!dataDirectory.exists() || dataDirectory.list().length == 0) {
    LOG.info("Downloading graph input files from S3.");
    dataDirectory.mkdirs();
    S3Object graphDataZipObject=s3.getObject(sourceBucket,networkId + ".zip");
    ZipInputStream zis=new ZipInputStream(graphDataZipObject.getObjectContent());
    try {
      ZipEntry entry;
      while ((entry=zis.getNextEntry()) != null) {
        File entryDestination=new File(dataDirectory,entry.getName());
        entryDestination.getParentFile().mkdirs();
        if (entry.isDirectory())         entryDestination.mkdirs();
 else {
          OutputStream entryFileOut=new FileOutputStream(entryDestination);
          IOUtils.copy(zis,entryFileOut);
          entryFileOut.close();
        }
      }
      zis.close();
    }
 catch (    Exception e) {
      LOG.info("Error retrieving transportation network input files",e);
    }
  }
 else {
    LOG.info("Input files were found locally. Using these files from the cache.");
  }
  CommandLineParameters params=new CommandLineParameters();
  currentNetwork=TransportNetwork.fromDirectory(new File(CACHE_DIR,networkId));
  currentNetwork.buildStopTrees();
  currentNetworkId=networkId;
  return currentNetwork;
}
