{
  int maxTerminal=0;
  Map<NFAStateSet,AutomatonState> dfaStates=new HashMap<NFAStateSet,AutomatonState>();
  Queue<NFAStateSet> queue=new LinkedList<NFAStateSet>();
  Set<AutomatonState> dfaAcceptStates=new HashSet<AutomatonState>();
{
    NFAStateSet startSet=new NFAStateSet(nfa.start);
    startSet.followEpsilons();
    dfaStates.put(startSet,this.start);
    queue.add(startSet);
  }
  while (!queue.isEmpty()) {
    NFAStateSet nfaFromStates=queue.poll();
    AutomatonState dfaFromState=dfaStates.get(nfaFromStates);
    Map<Integer,NFAStateSet> dfaTransitions=new HashMap<Integer,NFAStateSet>();
    for (    AutomatonState nfaFromState : nfaFromStates) {
      if (nfaFromState.accept) {
        dfaAcceptStates.add(dfaFromState);
        dfaFromState.accept=true;
      }
      for (      Transition t : nfaFromState.transitions) {
        if (t.terminal > maxTerminal)         maxTerminal=t.terminal;
        NFAStateSet nfaTargetStates=dfaTransitions.get(t.terminal);
        if (nfaTargetStates == null) {
          nfaTargetStates=new NFAStateSet();
          dfaTransitions.put(t.terminal,nfaTargetStates);
        }
        nfaTargetStates.add(t.target);
      }
    }
    for (    Entry<Integer,NFAStateSet> t : dfaTransitions.entrySet()) {
      int terminal=t.getKey();
      NFAStateSet nfaToStates=t.getValue();
      nfaToStates.followEpsilons();
      AutomatonState dfaToState=dfaStates.get(nfaToStates);
      if (dfaToState == null) {
        dfaToState=new AutomatonState(nfaToStates.deriveLabel());
        dfaStates.put(nfaToStates,dfaToState);
        queue.add(nfaToStates);
      }
      dfaFromState.transitions.add(new Transition(terminal,dfaToState));
    }
  }
  int[][] table=new int[dfaStates.size()][maxTerminal + 1];
  for (  int[] row : table)   Arrays.fill(row,AutomatonState.REJECT);
  Map<AutomatonState,Integer> stateNumbers=new HashMap<AutomatonState,Integer>();
  int i=0;
  for (  AutomatonState as : dfaStates.values())   stateNumbers.put(as,i++);
  for (  AutomatonState as : dfaStates.values()) {
    int row=stateNumbers.get(as);
    for (    Transition t : as.transitions)     table[row][t.terminal]=stateNumbers.get(t.target);
    row++;
  }
  for (  AutomatonState as : dfaAcceptStates)   this.acceptStates.add(stateNumbers.get(as));
  return table;
}
