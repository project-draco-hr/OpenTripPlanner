{
  RoutingRequest options=new RoutingRequest();
  HashSet<Edge> turns=new HashSet<Edge>(left.getOutgoing());
  turns.addAll(leftBack.getOutgoing());
  StreetLocation start=StreetLocation.createStreetLocation(graph,"start","start",cast(turns,StreetEdge.class),new LinearLocation(0,0.4).getCoordinate(left.getGeometry()));
  HashSet<Edge> endTurns=new HashSet<Edge>(right.getOutgoing());
  endTurns.addAll(rightBack.getOutgoing());
  StreetLocation end=StreetLocation.createStreetLocation(graph,"end","end",cast(endTurns,StreetEdge.class),new LinearLocation(0,0.8).getCoordinate(right.getGeometry()));
  assertTrue(start.getX() < end.getX());
  assertTrue(start.getY() < end.getY());
  List<Edge> extra=end.getExtra();
  assertEquals(12,extra.size());
  long startTime=TestUtils.dateInSeconds("America/New_York",2009,11,1,12,34,25);
  options.dateTime=startTime;
  options.setRoutingContext(graph,brOut,end);
  ShortestPathTree spt1=aStar.getShortestPathTree(options);
  GraphPath pathBr=spt1.getPath(end,false);
  assertNotNull("There must be a path from br to end",pathBr);
  options.setRoutingContext(graph,trOut,end);
  ShortestPathTree spt2=aStar.getShortestPathTree(options);
  GraphPath pathTr=spt2.getPath(end,false);
  assertNotNull("There must be a path from tr to end",pathTr);
  assertTrue("path from bottom to end must be longer than path from top to end",pathBr.getWeight() > pathTr.getWeight());
  options.setRoutingContext(graph,start,end);
  ShortestPathTree spt=aStar.getShortestPathTree(options);
  GraphPath path=spt.getPath(end,false);
  assertNotNull("There must be a path from start to end",path);
  for (  State s : path.states) {
    assertNotSame(s.getVertex(),graph.getVertex("bottom"));
    assertNotSame(s.getVertex(),graph.getVertex("bottomBack"));
  }
  options.setArriveBy(true);
  options.setRoutingContext(graph,start,end);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(start,false);
  assertNotNull("There must be a path from start to end (looking back)",path);
  for (  State s : path.states) {
    assertNotSame(s.getVertex(),graph.getVertex("bottom"));
    assertNotSame(s.getVertex(),graph.getVertex("bottomBack"));
  }
  options=new RoutingRequest(new TraverseModeSet(TraverseMode.BICYCLE));
  start=StreetLocation.createStreetLocation(graph,"start1","start1",cast(turns,StreetEdge.class),new LinearLocation(0,0.95).getCoordinate(top.getGeometry()));
  end=StreetLocation.createStreetLocation(graph,"end1","end1",cast(turns,StreetEdge.class),new LinearLocation(0,0.95).getCoordinate(bottom.getGeometry()));
  options.setRoutingContext(graph,start,end);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(start,false);
  assertNotNull("There must be a path from top to bottom along the right",path);
  for (  State s : path.states) {
    assertNotSame(s.getVertex(),graph.getVertex("left"));
    assertNotSame(s.getVertex(),graph.getVertex("leftBack"));
  }
  start=StreetLocation.createStreetLocation(graph,"start2","start2",cast(turns,StreetEdge.class),new LinearLocation(0,0.55).getCoordinate(top.getGeometry()));
  end=StreetLocation.createStreetLocation(graph,"end2","end2",cast(turns,StreetEdge.class),new LinearLocation(0,0.55).getCoordinate(bottom.getGeometry()));
  options.setRoutingContext(graph,start,end);
  spt=aStar.getShortestPathTree(options);
  path=spt.getPath(start,false);
  assertNotNull("There must be a path from top to bottom",path);
  for (  State s : path.states) {
    assertNotSame(s.getVertex(),graph.getVertex("right"));
    assertNotSame(s.getVertex(),graph.getVertex("rightBack"));
  }
}
