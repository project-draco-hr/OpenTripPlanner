{
  Graph graph=new Graph();
  Vertex tl=new Vertex("tl",-74,41);
  Vertex tr=new Vertex("tr",-73,41);
  Vertex bl=new Vertex("bl",-74,40);
  Vertex br=new Vertex("bl",-73,40);
  double td=GtfsLibrary.distance(tl.getCoordinate().y,tl.getCoordinate().x,tr.getCoordinate().y,tr.getCoordinate().x);
  graph.addEdge(tl,tr,new Street(td));
  double bd=GtfsLibrary.distance(bl.getCoordinate().y,bl.getCoordinate().x,br.getCoordinate().y,br.getCoordinate().x);
  graph.addEdge(bl,br,new Street(bd));
  double d=GtfsLibrary.distance(bl.getCoordinate().y,bl.getCoordinate().x,tl.getCoordinate().y,tl.getCoordinate().x);
  graph.addEdge(tl,bl,new Street(d));
  Edge startEdge=graph.addEdge(bl,tl,new Street(d));
  graph.addEdge(tr,br,new Street(d));
  Edge endEdge=graph.addEdge(br,tr,new Street(d));
  StreetLocation start=new StreetLocation(startEdge,0.6,false);
  StreetLocation end=new StreetLocation(endEdge,0.8,true);
  GregorianCalendar startTime=new GregorianCalendar(2009,11,1,12,34,25);
  ShortestPathTree spt=AStar.getShortestPathTree(graph,start,end,new State(startTime.getTimeInMillis()),new TraverseOptions());
  GraphPath path=spt.getPath(end.vertex);
  assertNotNull(path);
}
