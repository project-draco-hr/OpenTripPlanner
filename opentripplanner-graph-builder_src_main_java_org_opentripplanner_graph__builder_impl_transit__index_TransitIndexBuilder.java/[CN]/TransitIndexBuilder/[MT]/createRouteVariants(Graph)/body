{
  TransitBoardAlight tba;
  for (  TransitVertex gv : IterableLibrary.filter(graph.getVertices(),TransitVertex.class)) {
    boolean start=false;
    boolean noStart=false;
    TableTripPattern pattern=null;
    Trip trip=null;
    for (    Edge e : gv.getIncoming()) {
      if (handledEdges.contains(e)) {
        continue;
      }
      handledEdges.add(e);
      if (!(e instanceof Edge)) {
        continue;
      }
      if (e instanceof PatternHop || e instanceof PatternDwell) {
        noStart=true;
      }
      if (e instanceof TransitBoardAlight) {
        tba=(TransitBoardAlight)e;
        if (tba.isBoarding()) {
          pattern=tba.getPattern();
          trip=pattern.getExemplar();
          start=true;
        }
      }
      if (e instanceof PreBoardEdge) {
        TransitStop stop=(TransitStop)e.getFromVertex();
        preBoardEdges.put(stop.getStopId(),(PreBoardEdge)e);
        start=false;
      }
      if (e instanceof PreAlightEdge) {
        TransitStop stop=(TransitStop)((PreAlightEdge)e).getToVertex();
        preAlightEdges.put(stop.getStopId(),(PreAlightEdge)e);
        start=false;
      }
    }
    if (start && !noStart) {
      RouteVariant variant=variantsByTrip.get(trip.getId());
      if (variant == null) {
        variant=addTripToVariant(trip);
        if (pattern != null) {
          for (          Trip trip2 : pattern.getTrips()) {
            addModeFromTrip(trip2);
            variantsByTrip.put(trip2.getId(),variant);
          }
          variant.addTrip(trip,pattern.getTrips().size());
        }
 else {
          variant.addTrip(trip,1);
        }
      }
 else {
        continue;
      }
      boolean setExemplar=!variant.isExemplarSet();
      Edge prevHop=null;
      while (gv != null) {
        RouteSegment segment=new RouteSegment(gv.getStopId());
        segment.hopIn=prevHop;
        for (        Edge e : gv.getIncoming()) {
          if (e instanceof TransitBoardAlight && ((TransitBoardAlight)e).isBoarding()) {
            segment.board=e;
          }
        }
        Collection<Edge> outgoing=gv.getOutgoing();
        gv=null;
        for (        Edge e : outgoing) {
          if (e instanceof PatternHop) {
            segment.hopOut=e;
            gv=(TransitVertex)e.getToVertex();
          }
          if (e instanceof PatternDwell) {
            segment.dwell=e;
            for (            Edge e2 : e.getToVertex().getIncoming()) {
              if (e2 instanceof TransitBoardAlight && ((TransitBoardAlight)e2).isBoarding()) {
                segment.board=e2;
              }
            }
            for (            Edge e2 : e.getToVertex().getOutgoing()) {
              if (e2 instanceof PatternHop) {
                segment.hopOut=e2;
                gv=(TransitVertex)e2.getToVertex();
              }
              if (e2 instanceof TransitBoardAlight && !((TransitBoardAlight)e2).isBoarding()) {
                segment.alight=e2;
              }
            }
          }
          if (e instanceof PatternInterlineDwell) {
            variant.addInterline((PatternInterlineDwell)e);
          }
          if (e instanceof TransitBoardAlight && !((TransitBoardAlight)e).isBoarding()) {
            segment.alight=e;
          }
        }
        prevHop=segment.hopOut;
        if (setExemplar) {
          variant.addExemplarSegment(segment);
        }
        variant.addSegment(segment);
      }
    }
  }
}
