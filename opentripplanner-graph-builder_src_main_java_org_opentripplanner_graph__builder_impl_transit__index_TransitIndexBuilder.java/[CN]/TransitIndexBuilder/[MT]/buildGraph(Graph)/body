{
  _log.debug("Building transit index");
  HashMap<Vertex,RouteSegment> segmentsByVertex=new HashMap<Vertex,RouteSegment>();
  for (  TransitVertex tv : IterableLibrary.filter(graph.getVertices(),TransitVertex.class)) {
    RouteSegment segment=null;
    for (    Edge e : tv.getOutgoing()) {
      RouteVariant variant=null;
      if (!(e instanceof AbstractEdge)) {
        continue;
      }
      if (e instanceof PreBoardEdge) {
        TransitStop stop=(TransitStop)e.getFromVertex();
        preBoardEdges.put(stop.getStopId(),e);
      }
      if (e instanceof PreAlightEdge) {
        TransitStop stop=(TransitStop)((PreAlightEdge)e).getToVertex();
        preAlightEdges.put(stop.getStopId(),e);
      }
      if (e instanceof Alight || e instanceof Hop || e instanceof Dwell) {
        Trip trip=((AbstractEdge)e).getTrip();
        addModeFromTrip(trip);
        variant=addTripToVariant(trip);
      }
 else       if (e instanceof PatternAlight || e instanceof PatternHop || e instanceof PatternDwell) {
        TripPattern pattern=((PatternEdge)e).getPattern();
        for (        Trip trip : pattern.getTrips()) {
          variantsByTrip.put(trip.getId(),variant);
          variant=addTripToVariant(trip);
          addModeFromTrip(trip);
        }
      }
 else {
        continue;
      }
      if (segment == null) {
        segment=getOrMakeSegment(variant,segmentsByVertex,tv);
      }
      if (e instanceof Alight || e instanceof PatternAlight) {
        segment.alight=e;
      }
 else       if (e instanceof Hop || e instanceof PatternHop) {
        segment.hopOut=e;
      }
 else       if (e instanceof Dwell || e instanceof PatternDwell) {
        segment.dwell=e;
      }
    }
    for (    Edge e : tv.getIncoming()) {
      RouteVariant variant=null;
      if (!(e instanceof AbstractEdge)) {
        continue;
      }
      if (e instanceof Board || e instanceof Hop) {
        Trip trip=((AbstractEdge)e).getTrip();
        variant=addTripToVariant(trip);
      }
 else       if (e instanceof PatternBoard || e instanceof PatternHop) {
        TripPattern pattern=((PatternEdge)e).getPattern();
        Trip exemplar=pattern.getExemplar();
        variant=addTripToVariant(exemplar);
        for (        Trip trip : pattern.getTrips()) {
          variantsByTrip.put(trip.getId(),variant);
        }
      }
 else {
        continue;
      }
      if (segment == null) {
        segment=getOrMakeSegment(variant,segmentsByVertex,tv);
      }
      if (e instanceof Board || e instanceof PatternBoard) {
        segment.board=e;
      }
 else       if (e instanceof Hop || e instanceof PatternHop) {
        segment.hopIn=e;
      }
    }
  }
  nameVariants(variantsByRoute);
  int totalVariants=0;
  int totalTrips=0;
  for (  List<RouteVariant> variants : variantsByRoute.values()) {
    totalVariants+=variants.size();
    for (    RouteVariant variant : variants) {
      totalTrips+=variant.getTrips().size();
    }
  }
  _log.debug("Built transit index: " + variantsByAgency.size() + " agencies, "+ variantsByRoute.size()+ " routes, "+ totalTrips+ " trips, "+ totalVariants+ " variants ");
  TransitIndexService service=new TransitIndexServiceImpl(variantsByAgency,variantsByRoute,variantsByTrip,preBoardEdges,preAlightEdges,directionsByRoute,modes);
  graph.putService(TransitIndexService.class,service);
}
