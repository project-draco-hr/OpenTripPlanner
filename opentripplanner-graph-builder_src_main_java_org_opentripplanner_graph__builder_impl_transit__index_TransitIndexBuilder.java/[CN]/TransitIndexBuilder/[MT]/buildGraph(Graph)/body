{
  LOG.debug("Building transit index");
  createRouteVariants(graph);
  nameVariants(variantsByRoute);
  int totalVariants=0;
  int totalTrips=0;
  for (  List<RouteVariant> variants : variantsByRoute.values()) {
    totalVariants+=variants.size();
    for (    RouteVariant variant : variants) {
      variant.cleanup();
      totalTrips+=variant.getTrips().size();
    }
  }
  LOG.debug("Built transit index: " + variantsByAgency.size() + " agencies, "+ variantsByRoute.size()+ " routes, "+ totalTrips+ " trips, "+ totalVariants+ " variants ");
  TransitIndexServiceImpl service=(TransitIndexServiceImpl)graph.getService(TransitIndexService.class);
  if (service == null) {
    service=new TransitIndexServiceImpl(variantsByAgency,variantsByRoute,variantsByTrip,preBoardEdges,preAlightEdges,directionsByRoute,stopsByRoute,modes);
  }
 else {
    service.merge(variantsByAgency,variantsByRoute,variantsByTrip,preBoardEdges,preAlightEdges,directionsByRoute,stopsByRoute,modes);
  }
  insertCalendarData(service);
  addAgencies(service);
  Coordinate coord=findTransitCenter();
  service.setCenter(coord);
  service.setOvernightBreak(findOvernightBreak());
  graph.putService(TransitIndexService.class,service);
}
