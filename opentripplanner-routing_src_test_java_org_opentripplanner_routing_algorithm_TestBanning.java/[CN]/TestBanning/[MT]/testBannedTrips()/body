{
  Graph graph=ConstantsForTests.getInstance().getPortlandGraph();
  Random rand=new Random(42);
  for (int i=0; i < 20; i++) {
    RoutingRequest options=new RoutingRequest();
    options.dateTime=TestUtils.dateInSeconds("America/Los_Angeles",2009,11,1,12,34,25);
    Vertex start=null;
    Vertex end=null;
    while (start == null)     start=graph.getVertex("TriMet_" + rand.nextInt(10000));
    while (end == null)     end=graph.getVertex("TriMet_" + rand.nextInt(10000));
    options.setRoutingContext(graph,start,end);
    ShortestPathTree spt=null;
    int n=rand.nextInt(5) + 3;
    for (int j=0; j < n; j++) {
      spt=aStar.getShortestPathTree(options);
      GraphPath path=spt.getPath(end,true);
      if (path == null || spt == null)       break;
      Set<AgencyAndId> usedTripIds=new HashSet<AgencyAndId>();
      for (      State s : path.states) {
        AgencyAndId tripId=s.getTripId();
        if (tripId != null)         usedTripIds.add(tripId);
      }
      for (      AgencyAndId usedTripId : usedTripIds)       assertFalse(options.bannedTrips.containsKey(usedTripId));
      if (usedTripIds.size() == 0)       break;
      List<AgencyAndId> usedTripIdsList=new ArrayList<AgencyAndId>(usedTripIds);
      AgencyAndId tripToBan=usedTripIdsList.get(rand.nextInt(usedTripIds.size()));
      options.banTrip(tripToBan);
    }
    options.bannedTrips.clear();
  }
}
