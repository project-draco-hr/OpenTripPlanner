{
  if (ways.size() == 0) {
    return Collections.emptyList();
  }
  OSMWay way=ways.get(ways.size() - 1);
  List<OSMWay> remainingUnassigned=new ArrayList<OSMWay>(ways);
  remainingUnassigned.remove(ways.size() - 1);
  List<Long> wayNodes=way.getNodeRefs();
  Long nextStartNode=wayNodes.get(wayNodes.size() - 1);
  Long nextEndNode=wayNodes.get(0);
  ArrayList<List<Long>> rings=new ArrayList<List<Long>>();
  rings.add(new ArrayList<Long>());
  HashSet<Long> endpoints=new HashSet<Long>();
  endpoints.add(nextEndNode);
  endpoints.add(nextStartNode);
  if (!assignWayToRing(endpoints,way,remainingUnassigned,rings,0)) {
    _log.warn("Failed to construct rings for " + parent);
    return null;
  }
  return rings;
}
