{
  if (ways.size() == 0) {
    return Collections.emptyList();
  }
  List<List<Long>> closedRings=new ArrayList<List<Long>>();
  HashMap<Long,List<OSMWay>> waysByEndpoint=new HashMap<Long,List<OSMWay>>();
  for (  OSMWay way : ways) {
    List<Long> refs=way.getNodeRefs();
    long start=refs.get(0);
    long end=refs.get(refs.size() - 1);
    if (start == end) {
      ArrayList<Long> ring=new ArrayList<Long>(refs);
      closedRings.add(ring);
    }
 else {
      MapUtils.addToMapList(waysByEndpoint,start,way);
      MapUtils.addToMapList(waysByEndpoint,end,way);
    }
  }
  List<Long> toRemove=new ArrayList<Long>();
  for (  Map.Entry<Long,List<OSMWay>> entry : waysByEndpoint.entrySet()) {
    Long key=entry.getKey();
    List<OSMWay> list=entry.getValue();
    if (list.size() % 2 == 1) {
      return null;
    }
  }
  for (  Long key : toRemove) {
    waysByEndpoint.remove(key);
  }
  List<Long> partialRing=new ArrayList<Long>();
  if (waysByEndpoint.size() == 0) {
    return closedRings;
  }
  long firstEndpoint=0, otherEndpoint=0;
  OSMWay firstWay=null;
  for (  Map.Entry<Long,List<OSMWay>> entry : waysByEndpoint.entrySet()) {
    firstEndpoint=entry.getKey();
    List<OSMWay> list=entry.getValue();
    firstWay=list.get(0);
    List<Long> nodeRefs=firstWay.getNodeRefs();
    partialRing.addAll(nodeRefs);
    firstEndpoint=nodeRefs.get(0);
    otherEndpoint=nodeRefs.get(nodeRefs.size() - 1);
    break;
  }
  waysByEndpoint.get(firstEndpoint).remove(firstWay);
  waysByEndpoint.get(otherEndpoint).remove(firstWay);
  if (constructRingsRecursive(waysByEndpoint,partialRing,closedRings,firstEndpoint)) {
    return closedRings;
  }
 else {
    return null;
  }
}
