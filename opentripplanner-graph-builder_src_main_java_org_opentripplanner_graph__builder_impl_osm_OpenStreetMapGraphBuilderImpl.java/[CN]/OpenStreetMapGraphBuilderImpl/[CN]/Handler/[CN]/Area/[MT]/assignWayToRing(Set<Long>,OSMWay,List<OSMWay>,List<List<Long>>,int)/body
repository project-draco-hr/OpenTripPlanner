{
  List<Long> curRing=rings.get(ring);
  ArrayList<Long> savedRing=new ArrayList<Long>(curRing);
  long removedEndpoint;
  if (curRing.size() == 0) {
    curRing.addAll(way.getNodeRefs());
    removedEndpoint=-1;
  }
 else {
    long ringFirstNode=curRing.get(0);
    long ringLastNode=curRing.get(curRing.size() - 1);
    if (ringFirstNode == ringLastNode) {
      return false;
    }
    List<Long> wayNodes=way.getNodeRefs();
    long wayFirstNode=wayNodes.get(0);
    long wayLastNode=wayNodes.get(wayNodes.size() - 1);
    if (ringFirstNode == wayLastNode) {
      curRing.addAll(0,wayNodes.subList(1,wayNodes.size()));
      removedEndpoint=ringFirstNode;
    }
 else     if (ringFirstNode == wayFirstNode) {
      ArrayList<Long> wayNodesCopy=new ArrayList<Long>(wayNodes);
      Collections.reverse(wayNodesCopy);
      curRing.addAll(0,wayNodesCopy.subList(1,wayNodes.size()));
      removedEndpoint=ringFirstNode;
    }
 else     if (ringLastNode == wayFirstNode) {
      curRing.addAll(wayNodes.subList(1,wayNodes.size()));
      removedEndpoint=ringLastNode;
    }
 else     if (ringLastNode == wayLastNode) {
      ArrayList<Long> wayNodesCopy=new ArrayList<Long>(wayNodes);
      Collections.reverse(wayNodesCopy);
      curRing.addAll(wayNodesCopy.subList(1,wayNodes.size()));
      removedEndpoint=ringLastNode;
    }
 else {
      return false;
    }
    endpoints.remove(removedEndpoint);
    long newRingFirstNode=curRing.get(0);
    long newRingLastNode=curRing.get(curRing.size() - 1);
    if (newRingFirstNode == newRingLastNode) {
      if (new HashSet<Long>(curRing).size() != curRing.size() - 1) {
        return false;
      }
    }
  }
  if (unassigned.size() == 0) {
    for (    List<Long> checkRing : rings) {
      if (!checkRing.get(0).equals(checkRing.get(checkRing.size() - 1))) {
        return false;
      }
    }
    endpoints.remove(curRing.get(0));
    return true;
  }
  for (  OSMWay nextWay : unassigned) {
    List<OSMWay> remainingUnassigned=new ArrayList<OSMWay>(unassigned);
    remainingUnassigned.remove(nextWay);
    List<Long> nextWayNodes=nextWay.getNodeRefs();
    Long nextStartNode=nextWayNodes.get(nextWayNodes.size() - 1);
    Long nextEndNode=nextWayNodes.get(0);
    if (endpoints.contains(nextStartNode) || endpoints.contains(nextEndNode)) {
      for (int i=0; i < rings.size(); ++i) {
        if (assignWayToRing(endpoints,nextWay,remainingUnassigned,rings,i)) {
          return true;
        }
      }
    }
    rings.add(new ArrayList<Long>());
    endpoints.add(nextEndNode);
    endpoints.add(nextStartNode);
    if (assignWayToRing(endpoints,nextWay,remainingUnassigned,rings,rings.size() - 1)) {
      return true;
    }
    endpoints.remove(nextEndNode);
    endpoints.remove(nextStartNode);
    rings.remove(rings.size() - 1);
  }
  rings.set(ring,savedRing);
  endpoints.add(removedEndpoint);
  return false;
}
