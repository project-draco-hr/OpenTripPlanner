{
  this.areas=areas;
  List<Polygon> allRings=new ArrayList<Polygon>();
  HashMap<Coordinate,OSMNode> nodeMap=new HashMap<Coordinate,OSMNode>();
  for (  Area area : areas) {
    for (    Ring ring : area.outermostRings) {
      allRings.add(ring.toJtsPolygon());
      for (      OSMNode node : ring.nodes) {
        nodeMap.put(new Coordinate(node.getLon(),node.getLat()),node);
      }
      for (      Ring inner : ring.holes) {
        for (        OSMNode node : inner.nodes) {
          nodeMap.put(new Coordinate(node.getLon(),node.getLat()),node);
        }
      }
    }
  }
  GeometryFactory geometryFactory=GeometryUtils.getGeometryFactory();
  Geometry u=geometryFactory.createMultiPolygon(allRings.toArray(new Polygon[allRings.size()]));
  u=u.union();
  if (u instanceof GeometryCollection) {
    GeometryCollection mp=(GeometryCollection)u;
    for (int i=0; i < mp.getNumGeometries(); ++i) {
      Geometry poly=mp.getGeometryN(i);
      if (!(poly instanceof Polygon)) {
        _log.warn("Unexpected non-polygon when merging areas: " + poly);
        continue;
      }
      outermostRings.add(toRing((Polygon)poly,nodeMap));
    }
  }
 else   if (u instanceof Polygon) {
    outermostRings.add(toRing((Polygon)u,nodeMap));
  }
 else {
    _log.warn("Unexpected non-polygon when merging areas: " + u);
  }
}
