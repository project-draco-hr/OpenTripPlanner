{
  Map<String,Set<OSMWay>> key_map=new HashMap<String,Set<OSMWay>>();
  Map<OSMKeyValue,Set<OSMWay>> keyvalue_map=new HashMap<OSMKeyValue,Set<OSMWay>>();
  Set<OSMWay> processed_ways=new HashSet<OSMWay>();
  Pattern p=Pattern.compile("\\{(.+?)\\}");
  Matcher m=p.matcher("");
  _log.debug("Generating creative names...");
  for (  OSMWay way : _ways.values()) {
    Map<String,String> tags=way.getTags();
    if (tags.containsKey("name")) {
      continue;
    }
    for (    String key : tags.keySet()) {
      OSMKeyValue kv=new OSMKeyValue(key,tags.get(key),false);
      Set<OSMWay> keyvalue_map_set=keyvalue_map.get(kv);
      Set<OSMWay> key_map_set=key_map.get(key);
      if (keyvalue_map_set == null) {
        keyvalue_map_set=new HashSet<OSMWay>();
        keyvalue_map.put(kv,keyvalue_map_set);
      }
      keyvalue_map_set.add(way);
      if (key_map_set == null) {
        key_map_set=new HashSet<OSMWay>();
        key_map.put(key,key_map_set);
      }
      key_map_set.add(way);
    }
  }
  for (  List<OSMKeyValue> lkv : _creativeNaming.keySet()) {
    Set<OSMWay> hope=null;
    Map<String,Matcher> replace=new HashMap<String,Matcher>();
    String format=_creativeNaming.get(lkv);
    for (    OSMKeyValue kv : lkv) {
      if (hope == null) {
        hope=new HashSet<OSMWay>();
        if (kv.wildcard) {
          if (key_map.containsKey(kv.key)) {
            hope.addAll(key_map.get(kv.key));
          }
        }
 else {
          if (keyvalue_map.containsKey(kv)) {
            hope.addAll(keyvalue_map.get(kv));
          }
        }
        hope.removeAll(processed_ways);
      }
 else {
        if (kv.wildcard) {
          if (key_map.containsKey(kv.key)) {
            hope.retainAll(key_map.get(kv.key));
          }
 else {
            hope.clear();
          }
        }
 else {
          if (keyvalue_map.containsKey(kv)) {
            hope.retainAll(keyvalue_map.get(kv));
          }
 else {
            hope.clear();
          }
        }
      }
    }
    m.reset(format);
    while (m.find()) {
      replace.put(m.group(1),Pattern.compile("\\{" + m.group(1) + "\\}").matcher(""));
    }
    for (    OSMWay way : hope) {
      String gen_name=format;
      for (      String key : replace.keySet()) {
        Matcher nm=replace.get(key);
        nm.reset(gen_name);
        gen_name=nm.replaceAll(way.getTag(key));
      }
      way.addTag(new OSMTag("otp:gen_name",gen_name));
      processed_ways.add(way);
      _log.debug("generated name: " + way + " >> "+ gen_name);
    }
  }
}
