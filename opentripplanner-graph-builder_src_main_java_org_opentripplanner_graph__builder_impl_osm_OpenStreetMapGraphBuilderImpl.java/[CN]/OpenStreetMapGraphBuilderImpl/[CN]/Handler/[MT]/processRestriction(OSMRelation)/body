{
  long from=-1, to=-1, via=-1;
  for (  OSMRelationMember member : relation.getMembers()) {
    String role=member.getRole();
    if (role.equals("from")) {
      from=member.getRef();
    }
 else     if (role.equals("to")) {
      to=member.getRef();
    }
 else     if (role.equals("via")) {
      via=member.getRef();
    }
  }
  if (from == -1 || to == -1 || via == -1) {
    _log.warn(graph.addBuilderAnnotation(new TurnRestrictionBad(relation.getId())));
    return;
  }
  Set<TraverseMode> modes=EnumSet.of(TraverseMode.BICYCLE,TraverseMode.CAR);
  String exceptModes=relation.getTag("except");
  if (exceptModes != null) {
    for (    String m : exceptModes.split(";")) {
      if (m.equals("motorcar")) {
        modes.remove(TraverseMode.CAR);
      }
 else       if (m.equals("bicycle")) {
        modes.remove(TraverseMode.BICYCLE);
        _log.warn(graph.addBuilderAnnotation(new TurnRestrictionException(via,from)));
      }
    }
  }
  TurnRestrictionTag tag;
  if (relation.isTag("restriction","no_right_turn")) {
    tag=new TurnRestrictionTag(via,TurnRestrictionType.NO_TURN,Direction.RIGHT);
  }
 else   if (relation.isTag("restriction","no_left_turn")) {
    tag=new TurnRestrictionTag(via,TurnRestrictionType.NO_TURN,Direction.LEFT);
  }
 else   if (relation.isTag("restriction","no_straight_on")) {
    tag=new TurnRestrictionTag(via,TurnRestrictionType.NO_TURN,Direction.STRAIGHT);
  }
 else   if (relation.isTag("restriction","no_u_turn")) {
    tag=new TurnRestrictionTag(via,TurnRestrictionType.NO_TURN,Direction.U);
  }
 else   if (relation.isTag("restriction","only_straight_on")) {
    tag=new TurnRestrictionTag(via,TurnRestrictionType.ONLY_TURN,Direction.STRAIGHT);
  }
 else   if (relation.isTag("restriction","only_right_turn")) {
    tag=new TurnRestrictionTag(via,TurnRestrictionType.ONLY_TURN,Direction.RIGHT);
  }
 else   if (relation.isTag("restriction","only_left_turn")) {
    tag=new TurnRestrictionTag(via,TurnRestrictionType.ONLY_TURN,Direction.LEFT);
  }
 else   if (relation.isTag("restriction","only_u_turn")) {
    tag=new TurnRestrictionTag(via,TurnRestrictionType.ONLY_TURN,Direction.U);
  }
 else {
    _log.warn(graph.addBuilderAnnotation(new TurnRestrictionUnknown(relation.getTag("restriction"))));
    return;
  }
  tag.modes=new TraverseModeSet(modes);
  MapUtils.addToMapList(turnRestrictionsByFromWay,from,tag);
  MapUtils.addToMapList(turnRestrictionsByToWay,to,tag);
}
