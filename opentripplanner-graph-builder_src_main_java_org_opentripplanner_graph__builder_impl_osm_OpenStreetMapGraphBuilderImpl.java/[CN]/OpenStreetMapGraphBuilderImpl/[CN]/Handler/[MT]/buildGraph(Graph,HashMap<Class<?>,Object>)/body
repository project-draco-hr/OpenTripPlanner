{
  this.graph=graph;
  processRelations();
  if (staticBikeRental) {
    processBikeRentalNodes();
  }
  HashSet<Long> _keep=new HashSet<Long>(_nodesWithNeighbors);
  _keep.addAll(_areaNodes);
  _nodes.keySet().retainAll(_keep);
  initIntersectionNodes();
  buildBasicGraph();
  buildAreas();
  buildElevatorEdges(graph);
  Map<Edge,TurnRestriction> turnRestrictions=new HashMap<Edge,TurnRestriction>();
  for (  TurnRestriction restriction : turnRestrictionsByTag.values()) {
    turnRestrictions.put(restriction.from,restriction);
  }
  if (customNamer != null) {
    customNamer.postprocess(graph);
  }
  generateElevationProfiles(graph);
  applyBikeSafetyFactor(graph);
  StreetUtils.makeEdgeBased(graph,endpoints,turnRestrictions);
}
