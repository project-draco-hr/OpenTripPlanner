{
  StreetTraversalPermission permissionsFront=permissions;
  StreetTraversalPermission permissionsBack=permissions;
  if (way.isTagTrue("oneway") || "roundabout".equals(way.getTag("junction"))) {
    permissionsBack=permissionsBack.remove(StreetTraversalPermission.BICYCLE_AND_CAR);
  }
  if (way.isTag("oneway","-1")) {
    permissionsFront=permissionsFront.remove(StreetTraversalPermission.BICYCLE_AND_CAR);
  }
  String oneWayBicycle=way.getTag("oneway:bicycle");
  if (OSMWithTags.isTrue(oneWayBicycle) || way.isTagFalse("bicycle:backwards")) {
    permissionsBack=permissionsBack.remove(StreetTraversalPermission.BICYCLE);
  }
  if ("-1".equals(oneWayBicycle)) {
    permissionsFront=permissionsFront.remove(StreetTraversalPermission.BICYCLE);
  }
  if (OSMWithTags.isFalse(oneWayBicycle) || way.isTagTrue("bicycle:backwards")) {
    if (permissions.allows(StreetTraversalPermission.BICYCLE)) {
      permissionsFront=permissionsFront.add(StreetTraversalPermission.BICYCLE);
      permissionsBack=permissionsBack.add(StreetTraversalPermission.BICYCLE);
    }
  }
  String cycleway=way.getTag("cycleway");
  String cyclewayLeft=way.getTag("cycleway:left");
  String cyclewayRight=way.getTag("cycleway:right");
  if ((cycleway != null && cycleway.startsWith("opposite")) || (cyclewayLeft != null && cyclewayLeft.startsWith("opposite")) || (cyclewayRight != null && cyclewayRight.startsWith("opposite"))) {
    permissionsBack=permissionsBack.add(StreetTraversalPermission.BICYCLE);
  }
  return new P2<StreetTraversalPermission>(permissionsFront,permissionsBack);
}
