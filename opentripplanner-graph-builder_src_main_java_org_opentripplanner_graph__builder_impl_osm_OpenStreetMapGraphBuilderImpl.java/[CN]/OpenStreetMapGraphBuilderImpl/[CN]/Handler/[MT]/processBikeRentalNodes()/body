{
  _log.debug("Processing bike rental nodes...");
  int n=0;
  BikeRentalStationService bikeRentalService=new BikeRentalStationService();
  graph.putService(BikeRentalStationService.class,bikeRentalService);
  for (  OSMNode node : _bikeRentalNodes) {
    n++;
    String creativeName=wayPropertySet.getCreativeNameForWay(node);
    int capacity=Integer.MAX_VALUE;
    if (node.hasTag("capacity")) {
      try {
        capacity=node.getCapacity();
      }
 catch (      NumberFormatException e) {
        _log.warn("Capacity for osm node " + node.getId() + " ("+ creativeName+ ") is not a number: "+ node.getTag("capacity"));
      }
    }
    String networks=node.getTag("network");
    String operators=node.getTag("operator");
    Set<String> networkSet=new HashSet<String>();
    if (networks != null)     networkSet.addAll(Arrays.asList(networks.split(";")));
    if (operators != null)     networkSet.addAll(Arrays.asList(operators.split(";")));
    if (networkSet.isEmpty()) {
      _log.warn("Bike rental station at osm node " + node.getId() + " ("+ creativeName+ ") with no network; including as compatible-with-all.");
      networkSet.add("*");
    }
    BikeRentalStation station=new BikeRentalStation();
    station.id="" + node.getId();
    station.name=creativeName;
    station.x=node.getLon();
    station.y=node.getLat();
    station.spacesAvailable=capacity / 2;
    station.bikesAvailable=capacity / 2;
    station.realTimeData=false;
    bikeRentalService.addStation(station);
    BikeRentalStationVertex stationVertex=new BikeRentalStationVertex(graph,station);
    new RentABikeOnEdge(stationVertex,stationVertex,networkSet);
    new RentABikeOffEdge(stationVertex,stationVertex,networkSet);
  }
  _log.debug("Created " + n + " bike rental stations.");
}
