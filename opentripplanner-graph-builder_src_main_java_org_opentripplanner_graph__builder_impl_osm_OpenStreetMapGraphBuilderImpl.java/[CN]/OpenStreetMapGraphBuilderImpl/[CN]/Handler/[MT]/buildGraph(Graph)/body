{
  this.graph=graph;
  processRelations();
  _nodes.keySet().retainAll(_nodesWithNeighbors);
  long wayIndex=0;
  Set<Long> possibleIntersectionNodes=new HashSet<Long>();
  for (  OSMWay way : _ways.values()) {
    List<Long> nodes=way.getNodeRefs();
    for (    long node : nodes) {
      if (possibleIntersectionNodes.contains(node)) {
        intersectionNodes.put(node,null);
      }
 else {
        possibleIntersectionNodes.add(node);
      }
    }
  }
  GeometryFactory geometryFactory=new GeometryFactory();
  for (  OSMWay way : _ways.values()) {
    if (wayIndex % 10000 == 0)     _log.debug("ways=" + wayIndex + "/"+ _ways.size());
    wayIndex++;
    WayProperties wayData=wayPropertySet.getDataForWay(way);
    if (!way.hasTag("name")) {
      String creativeName=wayPropertySet.getCreativeNameForWay(way);
      if (creativeName != null) {
        way.addTag("otp:gen_name",creativeName);
      }
    }
    Set<Alert> note=wayPropertySet.getNoteForWay(way);
    StreetTraversalPermission permissions=getPermissionsForEntity(way,wayData.getPermission());
    if (permissions == StreetTraversalPermission.NONE)     continue;
    List<Long> nodes=way.getNodeRefs();
    IntersectionVertex startEndpoint=null, endEndpoint=null;
    ArrayList<Coordinate> segmentCoordinates=new ArrayList<Coordinate>();
    if (!wayLevels.containsKey(way)) {
      String levelName=null;
      OSMLevel.Source source=OSMLevel.Source.NONE;
      OSMLevel level=OSMLevel.DEFAULT;
      if (way.hasTag("level")) {
        levelName=way.getTag("level");
        source=OSMLevel.Source.LEVEL_TAG;
      }
 else       if (way.hasTag("layer")) {
        levelName=way.getTag("layer");
        source=OSMLevel.Source.LAYER_TAG;
      }
      if (levelName != null) {
        level=OSMLevel.fromString(levelName,source);
      }
      wayLevels.put(way,level);
    }
    Long startNode=null;
    OSMNode osmStartNode=null;
    for (int i=0; i < nodes.size() - 1; i++) {
      Long endNode=nodes.get(i + 1);
      if (osmStartNode == null) {
        startNode=nodes.get(i);
        osmStartNode=_nodes.get(startNode);
      }
      OSMNode osmEndNode=_nodes.get(endNode);
      if (osmStartNode == null || osmEndNode == null)       continue;
      LineString geometry;
      if (segmentCoordinates.size() == 0) {
        segmentCoordinates.add(getCoordinate(osmStartNode));
      }
      if (intersectionNodes.containsKey(endNode) || i == nodes.size() - 2) {
        segmentCoordinates.add(getCoordinate(osmEndNode));
        geometry=geometryFactory.createLineString(segmentCoordinates.toArray(new Coordinate[0]));
        segmentCoordinates.clear();
      }
 else {
        segmentCoordinates.add(getCoordinate(osmEndNode));
        continue;
      }
      if (startEndpoint == null) {
        startEndpoint=getVertexForOsmNode(osmStartNode,way);
      }
 else {
        startEndpoint=endEndpoint;
      }
      endEndpoint=getVertexForOsmNode(osmEndNode,way);
      P2<PlainStreetEdge> streets=getEdgesForStreet(startEndpoint,endEndpoint,way,i,permissions,geometry);
      PlainStreetEdge street=streets.getFirst();
      if (street != null) {
        double safety=wayData.getSafetyFeatures().getFirst();
        street.setBicycleSafetyEffectiveLength(street.getLength() * safety);
        if (safety < bestBikeSafety) {
          bestBikeSafety=safety;
        }
        if (note != null) {
          street.setNote(note);
        }
      }
      PlainStreetEdge backStreet=streets.getSecond();
      if (backStreet != null) {
        double safety=wayData.getSafetyFeatures().getSecond();
        if (safety < bestBikeSafety) {
          bestBikeSafety=safety;
        }
        backStreet.setBicycleSafetyEffectiveLength(backStreet.getLength() * safety);
        if (note != null) {
          backStreet.setNote(note);
        }
      }
      List<TurnRestrictionTag> restrictionTags=turnRestrictionsByFromWay.get(way.getId());
      if (restrictionTags != null) {
        for (        TurnRestrictionTag tag : restrictionTags) {
          if (tag.via == startNode) {
            TurnRestriction restriction=turnRestrictionsByTag.get(tag);
            restriction.from=backStreet;
          }
 else           if (tag.via == endNode) {
            TurnRestriction restriction=turnRestrictionsByTag.get(tag);
            restriction.from=street;
          }
        }
      }
      restrictionTags=turnRestrictionsByToWay.get(way.getId());
      if (restrictionTags != null) {
        for (        TurnRestrictionTag tag : restrictionTags) {
          if (tag.via == startNode) {
            TurnRestriction restriction=turnRestrictionsByTag.get(tag);
            restriction.to=street;
          }
 else           if (tag.via == endNode) {
            TurnRestriction restriction=turnRestrictionsByTag.get(tag);
            restriction.to=backStreet;
          }
        }
      }
      startNode=endNode;
      osmStartNode=_nodes.get(startNode);
    }
  }
  for (  Long nodeId : multiLevelNodes.keySet()) {
    OSMNode node=_nodes.get(nodeId);
    HashMap<OSMLevel,IntersectionVertex> vertices=multiLevelNodes.get(nodeId);
    ArrayList<Vertex> onboardVertices=new ArrayList<Vertex>();
    OSMLevel[] levels=vertices.keySet().toArray(new OSMLevel[0]);
    Arrays.sort(levels);
    for (    OSMLevel level : levels) {
      IntersectionVertex sourceVertex=vertices.get(level);
      String sourceVertexLabel=sourceVertex.getLabel();
      String levelName=level.longName;
      ElevatorOffboardVertex offboardVertex=new ElevatorOffboardVertex(graph,sourceVertexLabel + "_offboard",sourceVertex.getX(),sourceVertex.getY(),levelName);
      new FreeEdge(sourceVertex,offboardVertex);
      new FreeEdge(offboardVertex,sourceVertex);
      ElevatorOnboardVertex onboardVertex=new ElevatorOnboardVertex(graph,sourceVertexLabel + "_onboard",sourceVertex.getX(),sourceVertex.getY(),levelName);
      new ElevatorBoardEdge(offboardVertex,onboardVertex);
      new ElevatorAlightEdge(onboardVertex,offboardVertex,level.longName);
      onboardVertices.add(onboardVertex);
    }
    for (Integer i=0, vSize=onboardVertices.size() - 1; i < vSize; i++) {
      Vertex from=onboardVertices.get(i);
      Vertex to=onboardVertices.get(i + 1);
      boolean wheelchairAccessible=true;
      StreetTraversalPermission permission=StreetTraversalPermission.PEDESTRIAN_AND_BICYCLE;
      if (node.isTagFalse("bicycle")) {
        permission=StreetTraversalPermission.PEDESTRIAN;
      }
      if (node.isTagFalse("wheelchair")) {
        wheelchairAccessible=false;
      }
      ElevatorHopEdge foreEdge=new ElevatorHopEdge(from,to,permission);
      ElevatorHopEdge backEdge=new ElevatorHopEdge(to,from,permission);
      foreEdge.wheelchairAccessible=wheelchairAccessible;
      backEdge.wheelchairAccessible=wheelchairAccessible;
    }
  }
  Map<Edge,TurnRestriction> turnRestrictions=new HashMap<Edge,TurnRestriction>();
  for (  TurnRestriction restriction : turnRestrictionsByTag.values()) {
    turnRestrictions.put(restriction.from,restriction);
  }
  if (customNamer != null) {
    customNamer.postprocess(graph);
  }
  applyBikeSafetyFactor(graph);
  StreetUtils.pruneFloatingIslands(graph);
  StreetUtils.makeEdgeBased(graph,endpoints,turnRestrictions);
}
