{
  Set<Integer> nodesWithNeighbors=new HashSet<Integer>();
  for (  OSMWay way : _ways.values()) {
    List<Integer> nodes=way.getNodeRefs();
    if (nodes.size() > 1)     nodesWithNeighbors.addAll(nodes);
  }
  _nodes.keySet().retainAll(nodesWithNeighbors);
  pruneFloatingIslands();
  int wayIndex=0;
  Set<Integer> possibleIntersectionNodes=new HashSet<Integer>();
  Set<Integer> intersectionNodes=new HashSet<Integer>();
  for (  OSMWay way : _ways.values()) {
    List<Integer> nodes=way.getNodeRefs();
    for (    int node : nodes) {
      if (possibleIntersectionNodes.contains(node)) {
        intersectionNodes.add(node);
      }
 else {
        possibleIntersectionNodes.add(node);
      }
    }
  }
  ArrayList<Vertex> endpoints=new ArrayList<Vertex>();
  for (  OSMWay way : _ways.values()) {
    if (wayIndex % 1000 == 0)     _log.debug("ways=" + wayIndex + "/"+ _ways.size());
    wayIndex++;
    StreetTraversalPermission permissions=getPermissionsForEntity(way);
    if (permissions == StreetTraversalPermission.NONE)     continue;
    List<Integer> nodes=way.getNodeRefs();
    Vertex startEndpoint=null, endEndpoint=null;
    ArrayList<Coordinate> segmentCoordinates=new ArrayList<Coordinate>();
    GeometryFactory geometryFactory=new GeometryFactory();
    Integer startNode=null;
    OSMNode osmStartNode=null;
    for (int i=0; i < nodes.size() - 1; i++) {
      Integer endNode=nodes.get(i + 1);
      if (osmStartNode == null) {
        startNode=nodes.get(i);
        osmStartNode=_nodes.get(startNode);
      }
      OSMNode osmEndNode=_nodes.get(endNode);
      if (osmStartNode == null || osmEndNode == null)       continue;
      LineString geometry;
      if (segmentCoordinates.size() == 0) {
        segmentCoordinates.add(getCoordinate(osmStartNode));
      }
      if (intersectionNodes.contains(endNode) || i == nodes.size() - 2) {
        segmentCoordinates.add(getCoordinate(osmEndNode));
        geometry=geometryFactory.createLineString(segmentCoordinates.toArray(new Coordinate[0]));
        segmentCoordinates.clear();
      }
 else {
        segmentCoordinates.add(getCoordinate(osmEndNode));
        continue;
      }
      if (startEndpoint == null) {
        String label="osm node " + osmStartNode.getId();
        startEndpoint=graph.getVertex(label);
        if (startEndpoint == null) {
          Coordinate coordinate=getCoordinate(osmStartNode);
          startEndpoint=new EndpointVertex(label,coordinate.x,coordinate.y,label);
          graph.addVertex(startEndpoint);
          endpoints.add(startEndpoint);
        }
      }
 else {
        startEndpoint=endEndpoint;
      }
      String label="osm node " + osmEndNode.getId();
      endEndpoint=graph.getVertex(label);
      if (endEndpoint == null) {
        Coordinate coordinate=getCoordinate(osmEndNode);
        endEndpoint=new EndpointVertex(label,coordinate.x,coordinate.y,label);
        graph.addVertex(endEndpoint);
        endpoints.add(endEndpoint);
      }
      P2<PlainStreetEdge> streets=getEdgesForStreet(startEndpoint,endEndpoint,way,i,permissions,geometry);
      PlainStreetEdge street=streets.getFirst();
      if (street != null) {
        graph.addEdge(street);
      }
      PlainStreetEdge backStreet=streets.getSecond();
      if (backStreet != null) {
        graph.addEdge(backStreet);
      }
      startNode=endNode;
      osmStartNode=_nodes.get(startNode);
    }
  }
  StreetUtils.makeEdgeBased(graph,endpoints);
}
