{
  Collection<RaptorRoute> routesToVisit=new HashSet<RaptorRoute>();
  if (data.routesForStop == null) {
    Collection<RaptorRoute> routes=data.routes;
    for (    RaptorStop stop : visitedLastRound) {
      for (      RaptorRoute route : data.routesForStop[stop.index]) {
        if (routes.contains(route)) {
          routesToVisit.add(route);
        }
      }
    }
  }
 else {
    for (    RaptorStop stop : visitedLastRound) {
      for (      RaptorRoute route : data.routesForStop[stop.index]) {
        routesToVisit.add(route);
      }
    }
  }
  HashSet<RaptorStop> visitedThisRound=new HashSet<RaptorStop>();
  List<RaptorState> createdStates=new ArrayList<RaptorState>();
  int boardSlack;
  if (options.isArriveBy()) {
    boardSlack=nBoardings == 1 ? options.getAlightSlack() : (options.getTransferSlack() - options.getBoardSlack());
  }
 else {
    boardSlack=nBoardings == 1 ? options.getBoardSlack() : (options.getTransferSlack() - options.getAlightSlack());
  }
  for (  RaptorRoute route : routesToVisit) {
    List<RaptorState> boardStates=new ArrayList<RaptorState>();
    boolean started;
    int firstStop, lastStop, direction, lastBoardStop;
    if (options.isArriveBy()) {
      firstStop=route.getNStops() - 1;
      lastStop=-1;
      direction=-1;
      lastBoardStop=0;
      started=checkForInterliningArriveBy(options,nBoardings,route,boardStates);
    }
 else {
      firstStop=0;
      lastStop=route.getNStops();
      direction=1;
      lastBoardStop=lastStop - 1;
      started=checkForInterliningDepartAt(options,nBoardings,route,boardStates);
    }
    for (int stopNo=firstStop; stopNo != lastStop; stopNo+=direction) {
      RaptorStop stop=route.stops[stopNo];
      if (!started && !visitedLastRound.contains(stop))       continue;
      started=true;
      if (!data.raptorStopsForStopId.containsKey(stop.stopVertex.getStopId())) {
        continue;
      }
      if (options.getBannedStops().matches(stop.stopVertex.getStop())) {
        continue;
      }
      if (options.getBannedStopsHard().matches(stop.stopVertex.getStop())) {
        continue;
      }
      List<RaptorState> states=statesByStop[stop.index];
      List<RaptorState> newStates=new ArrayList<RaptorState>();
      if (states == null) {
        states=new ArrayList<RaptorState>();
        statesByStop[stop.index]=states;
      }
      CONTINUE:       for (      RaptorState boardState : boardStates) {
        if (boardState.boardStop == stop) {
          continue;
        }
        RaptorState newState=new RaptorState(boardState.getParent());
        ServiceDay sd=boardState.serviceDay;
        int travelTime;
        if (options.isArriveBy()) {
          if (!route.alights[0][boardState.patternIndex].getPattern().canBoard(stopNo))           continue;
          int boardTime=route.getBoardTime(boardState.tripTimes,stopNo);
          newState.arrivalTime=(int)sd.time(boardTime);
          newState.arrivalTime-=options.getBoardSlack();
          travelTime=newState.getParent().arrivalTime - newState.arrivalTime;
        }
 else {
          if (!route.boards[0][boardState.patternIndex].getPattern().canAlight(stopNo))           continue;
          int alightTime=route.getAlightTime(boardState.tripTimes,stopNo);
          newState.arrivalTime=(int)sd.time(alightTime);
          newState.arrivalTime+=options.getAlightSlack();
          travelTime=newState.arrivalTime - newState.getParent().arrivalTime;
        }
        newState.weight+=travelTime;
        newState.weight+=boardState.weight;
        newState.boardStop=boardState.boardStop;
        newState.boardStopSequence=boardState.boardStopSequence;
        newState.route=route;
        newState.patternIndex=boardState.patternIndex;
        newState.tripTimes=boardState.tripTimes;
        newState.nBoardings=boardState.nBoardings;
        newState.walkDistance=boardState.walkDistance;
        newState.tripId=boardState.tripId;
        newState.stop=stop;
        newState.serviceDay=boardState.serviceDay;
        for (        RaptorState oldState : states) {
          if (oldState.eDominates(newState)) {
            continue CONTINUE;
          }
        }
        for (        RaptorState oldState : newStates) {
          if (oldState.eDominates(newState)) {
            continue CONTINUE;
          }
        }
        Iterator<RaptorState> it=states.iterator();
        while (it.hasNext()) {
          RaptorState oldState=it.next();
          if (newState.eDominates(oldState)) {
            it.remove();
          }
        }
        it=newStates.iterator();
        while (it.hasNext()) {
          RaptorState oldState=it.next();
          if (newState.eDominates(oldState)) {
            it.remove();
          }
        }
        visitedThisRound.add(stop);
        visitedEver.add(stop);
        newStates.add(newState);
      }
      if (stopNo != lastBoardStop) {
        TRYBOARD:         for (        RaptorState oldState : states) {
          if (oldState.nBoardings != nBoardings - 1)           continue;
          if (oldState.getRoute() == route)           continue;
          RaptorBoardSpec boardSpec;
          int waitTime;
          if (options.isArriveBy()) {
            int arrivalTime=oldState.arrivalTime - boardSlack;
            boardSpec=route.getTripIndexReverse(options,arrivalTime,stopNo);
            if (boardSpec == null)             continue;
            waitTime=oldState.arrivalTime - boardSpec.departureTime;
          }
 else {
            int arrivalTime=oldState.arrivalTime + boardSlack;
            boardSpec=route.getTripIndex(options,arrivalTime,stopNo);
            if (boardSpec == null)             continue;
            waitTime=boardSpec.departureTime - oldState.arrivalTime;
          }
          RaptorState boardState=new RaptorState(oldState);
          if (nBoardings == 1) {
            boardState.initialWaitTime=waitTime;
            waitTime=0;
          }
          boardState.weight=options.getBoardCost(route.mode) + waitTime;
          boardState.nBoardings=nBoardings;
          boardState.boardStop=stop;
          boardState.boardStopSequence=stopNo;
          boardState.arrivalTime=boardSpec.departureTime;
          boardState.patternIndex=boardSpec.patternIndex;
          boardState.tripTimes=boardSpec.tripTimes;
          boardState.serviceDay=boardSpec.serviceDay;
          boardState.route=route;
          boardState.walkDistance=oldState.walkDistance;
          boardState.tripId=boardSpec.tripId;
          for (          RaptorState state : boardStates) {
            if (state.eDominates(boardState)) {
              continue TRYBOARD;
            }
          }
          for (          RaptorState state : newStates) {
            if (state.eDominates(boardState)) {
              continue TRYBOARD;
            }
          }
          boardStates.add(boardState);
        }
      }
      createdStates.addAll(newStates);
      states.addAll(newStates);
    }
  }
  visitedLastRound=visitedThisRound;
  return createdStates;
}
