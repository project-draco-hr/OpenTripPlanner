{
  try {
    int tripIndex=getTripIndex(block.tripId);
    if (tripIndex == -1) {
      LOG.info("tripId {} not found in pattern.",block.tripId);
      return false;
    }
 else {
      LOG.trace("tripId {} found at index {} (in scheduled timetable)",block.tripId,tripIndex);
    }
    int stopIndex=block.findUpdateStopIndex(pattern);
    if (stopIndex == UpdateBlock.MATCH_FAILED) {
      LOG.warn("Unable to match update block to stopIds.");
      return false;
    }
    TripTimes existingTimes=getTripTimes(tripIndex);
    ScheduledTripTimes scheduledTimes=existingTimes.getScheduledTripTimes();
    TripTimes newTimes;
    if (block.isCancellation()) {
      newTimes=new CanceledTripTimes(scheduledTimes);
    }
 else {
      newTimes=new UpdatedTripTimes(scheduledTimes,block,stopIndex);
      if (!newTimes.timesIncreasing()) {
        LOG.warn("Resulting UpdatedTripTimes has non-increasing times. " + "Falling back on DecayingDelayTripTimes.");
        LOG.warn(block.toString());
        LOG.warn(newTimes.toString());
        int delay=newTimes.getDepartureDelay(stopIndex);
        newTimes=new DecayingDelayTripTimes(scheduledTimes,stopIndex,delay);
        LOG.warn(newTimes.toString());
        if (!newTimes.timesIncreasing()) {
          LOG.error("Even these trip times are non-increasing. Underlying schedule problem?");
          return false;
        }
      }
    }
    this.tripTimes.set(tripIndex,newTimes);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}
