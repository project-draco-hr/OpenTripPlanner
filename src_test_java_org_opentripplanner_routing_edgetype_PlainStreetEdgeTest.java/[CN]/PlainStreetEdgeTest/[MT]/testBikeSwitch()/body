{
  PlainStreetEdge e0=edge(v0,v1,0.0,StreetTraversalPermission.PEDESTRIAN);
  PlainStreetEdge e1=edge(v1,v2,0.0,StreetTraversalPermission.BICYCLE);
  PlainStreetEdge e2=edge(v2,v0,0.0,StreetTraversalPermission.PEDESTRIAN_AND_BICYCLE);
  RoutingRequest noPenalty=proto.clone();
  noPenalty.setMode(TraverseMode.BICYCLE);
  noPenalty.setRoutingContext(_graph,v0,v0);
  State s0=new State(noPenalty);
  State s1=e0.traverse(s0);
  State s2=e1.traverse(s1);
  State s3=e2.traverse(s2);
  RoutingRequest withPenalty=proto.clone();
  withPenalty.setBikeSwitchTime(42);
  withPenalty.setBikeSwitchCost(23);
  withPenalty.setMode(TraverseMode.BICYCLE);
  withPenalty.setRoutingContext(_graph,v0,v0);
  State s4=new State(withPenalty);
  State s5=e0.traverse(s4);
  State s6=e1.traverse(s5);
  State s7=e2.traverse(s6);
  assertEquals(0,s0.getElapsedTimeSeconds());
  assertEquals(0,s1.getElapsedTimeSeconds());
  assertEquals(0,s2.getElapsedTimeSeconds());
  assertEquals(0,s3.getElapsedTimeSeconds());
  assertEquals(0.0,s0.getWeight(),0.0);
  assertEquals(0.0,s1.getWeight(),0.0);
  assertEquals(0.0,s2.getWeight(),0.0);
  assertEquals(0.0,s3.getWeight(),0.0);
  assertEquals(0.0,s4.getWeight(),0.0);
  assertEquals(23.0,s5.getWeight(),0.0);
  assertEquals(23.0,s6.getWeight(),0.0);
  assertEquals(23.0,s7.getWeight(),0.0);
  assertEquals(0,s4.getElapsedTimeSeconds());
  assertEquals(42,s5.getElapsedTimeSeconds());
  assertEquals(42,s6.getElapsedTimeSeconds());
  assertEquals(42,s7.getElapsedTimeSeconds());
}
