{
  assertNotNull(start);
  assertNotNull(end);
  RoutingRequest prototypeOptions=new RoutingRequest();
  prototypeOptions.setStairsReluctance(1.0);
  prototypeOptions.setWalkReluctance(1.0);
  prototypeOptions.setTurnReluctance(1.0);
  prototypeOptions.setCarSpeed(1.0);
  prototypeOptions.setWalkSpeed(1.0);
  prototypeOptions.setBikeSpeed(1.0);
  prototypeOptions.setTraversalCostModel(new ConstantIntersectionTraversalCostModel(10.0));
  if (traverseModes != null) {
    prototypeOptions.setModes(traverseModes);
  }
  RoutingRequest options=prototypeOptions.clone();
  options.setRoutingContext(_graph,start,end);
  GenericAStar aStar=new GenericAStar();
  if (sptFactory != null) {
    aStar.setShortestPathTreeFactory(sptFactory);
  }
  ShortestPathTree tree=aStar.getShortestPathTree(options);
  GraphPath path=tree.getPath(end,false);
  options.cleanup();
  assertNotNull(path);
  double startEndWeight=path.getWeight();
  assertTrue(startEndWeight > 0);
  boolean violated=false;
  for (  Vertex intermediate : _graph.getVertices()) {
    if (intermediate == start || intermediate == end) {
      continue;
    }
    GraphPath startIntermediatePath=getPath(aStar,prototypeOptions,null,start,intermediate);
    if (startIntermediatePath == null) {
      continue;
    }
    Edge back=startIntermediatePath.states.getLast().getBackEdge();
    GraphPath intermediateEndPath=getPath(aStar,prototypeOptions,back,intermediate,end);
    if (intermediateEndPath == null) {
      continue;
    }
    double startIntermediateWeight=startIntermediatePath.getWeight();
    double intermediateEndWeight=intermediateEndPath.getWeight();
    double diff=startIntermediateWeight + intermediateEndWeight - startEndWeight;
    if (diff < -0.01) {
      System.out.println("Triangle inequality violated - diff = " + diff);
      violated=true;
    }
  }
  assertFalse(violated);
}
